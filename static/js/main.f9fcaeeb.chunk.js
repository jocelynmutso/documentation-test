(this["webpackJsonpdocumentation-test"]=this["webpackJsonpdocumentation-test"]||[]).push([[0],{280:function(e,n,t){var i={"./000_basic_operations/000_intro.md":281,"./000_basic_operations/001_pages.md":282,"./000_basic_operations/002_groups.md":283,"./000_basic_operations/003_adding_items.md":284,"./000_basic_operations/004_input_types.md":285,"./000_basic_operations/005_output_types.md":286,"./000_basic_operations/006_reordering.md":287,"./000_basic_operations/007_ids.md":288,"./000_basic_operations/008_testing.md":289,"./001_advanced_operations/000_lists.md":290,"./001_advanced_operations/001_lifecycle_management-_tags.md":291,"./001_advanced_operations/002_translations.md":292,"./001_advanced_operations/003_csv.md":293,"./001_advanced_operations/004_downloading_json.md":294,"./001_advanced_operations/005_custom_variables.md":295,"./001_advanced_operations/006_using_custom_variables.md":296,"./002_input_and_output_types/000_text.md":297,"./002_input_and_output_types/001_number.md":298,"./002_input_and_output_types/002_decimal.md":299,"./002_input_and_output_types/003_boolean.md":300,"./002_input_and_output_types/004_date.md":301,"./002_input_and_output_types/005_choice.md":302,"./002_input_and_output_types/006_multi-choice.md":303,"./002_input_and_output_types/007_multi-row.md":304,"./002_input_and_output_types/008_survey.md":305,"./002_input_and_output_types/009_time.md":306,"./003_dialob_expression_language:_(DEL)/000_basic_del.md":307,"./003_dialob_expression_language:_(DEL)/001_basic_del_operators.md":308,"./003_dialob_expression_language:_(DEL)/002_advanced_del_operators.md":309,"./003_dialob_expression_language:_(DEL)/003_request_ids.md":310,"./003_dialob_expression_language:_(DEL)/004_overview-_functions_and_reserved_words.md":311,"./004_logic/000_logic_rules_overview.md":312,"./004_logic/001_logic_reserved_words_examples.md":313,"./004_logic/002_language_keywords.md":314,"./004_logic/003_time_and_date_keywords.md":315,"./004_logic/004_regular_expressions.md":316,"./004_logic/005_validation.md":317,"./004_logic/006_visibility_and_required.md":318,"./005_options_and_settings/000_introduction.md":319,"./005_options_and_settings/001_dialog_options.md":320,"./005_options_and_settings/002_element_styling_options.md":321,"./006_reference/000_new_form_walkthrough.md":322};function a(e){var n=o(e);return t(n)}function o(e){if(!t.o(i,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return i[e]}a.keys=function(){return Object.keys(i)},a.resolve=o,e.exports=a,a.id=280},281:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/000_intro.2c452ebe.md"},282:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/001_pages.440772eb.md"},283:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/002_groups.8a23cb3e.md"},284:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/003_adding_items.917bcdc7.md"},285:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/004_input_types.dc8454bb.md"},286:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/005_output_types.de24f147.md"},287:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/006_reordering.97ca7ec9.md"},288:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/007_ids.219a439e.md"},289:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/008_testing.1e23e54d.md"},290:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/000_lists.9d7884b4.md"},291:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/001_lifecycle_management-_tags.1a052af0.md"},292:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/002_translations.ef0c3acb.md"},293:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/003_csv.ab506608.md"},294:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/004_downloading_json.187d31ea.md"},295:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/005_custom_variables.65407050.md"},296:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/006_using_custom_variables.32f60206.md"},297:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/000_text.37c21dfe.md"},298:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/001_number.cf576163.md"},299:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/002_decimal.0b482bb3.md"},300:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/003_boolean.7d8f5d2f.md"},301:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/004_date.9b26f69a.md"},302:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/005_choice.d6786a8a.md"},303:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/006_multi-choice.3a743142.md"},304:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/007_multi-row.89e48765.md"},305:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/008_survey.43ac4001.md"},306:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/009_time.43348bec.md"},307:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/000_basic_del.da6766b3.md"},308:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/001_basic_del_operators.e3773b2d.md"},309:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/002_advanced_del_operators.04d32fd1.md"},310:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/003_request_ids.f20ef82a.md"},311:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/004_overview-_functions_and_reserved_words.fca1cf8a.md"},312:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/000_logic_rules_overview.83fbe42b.md"},313:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/001_logic_reserved_words_examples.0480e7b2.md"},314:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/002_language_keywords.f723df90.md"},315:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/003_time_and_date_keywords.99585d70.md"},316:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/004_regular_expressions.59a32ef2.md"},317:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/005_validation.b9dd2b7f.md"},318:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/006_visibility_and_required.384d9250.md"},319:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/000_introduction.4c97adcd.md"},320:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/001_dialog_options.c4ba639e.md"},321:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/002_element_styling_options.8ecba3d5.md"},322:function(e,n,t){"use strict";t.r(n),n.default=t.p+"static/media/000_new_form_walkthrough.af094cfc.md"},325:function(e,n,t){"use strict";t.r(n);t(0);var i,a,o=t(9),s=t.n(o),r=t(126),l=t.n(r),u=t(47),d={primary:Object(u.a)({typography:{h1:{fontSize:"2.2rem",lineHeight:1.5,padding:10,marginLeft:"10px",marginRight:"10px",fontFamily:'"Mulish", sans-serif',fontWeight:800,textAlign:"center"},h2:{fontSize:"1.8rem",lineHeight:1.5,fontFamily:'"Mulish", sans-serif',fontWeight:900,scrollMarginTop:"-500px"},h3:{fontSize:"1.5rem",lineHeight:1.5,fontFamily:'"Mulish", sans-serif',fontWeight:900,paddingTop:900,scrollMarginTop:"-500px"},h4:{fontSize:"1.2rem",lineHeight:1,fontFamily:'"Mulish", sans-serif',fontWeight:700},h5:{fontSize:"1.2rem",fontFamily:'"Mulish", sans-serif',fontWeight:700},h6:{fontFamily:'"Mulish", sans-serif',fontWeight:700},body1:{fontFamily:'"Mulish", sans-serif',fontWeight:400,fontSize:"1rem"},body2:{fontFamily:'"Mulish", sans-serif',fontWeight:400,fontSize:"1rem",paddingBottom:20}},palette:{type:"light",primary:{main:"#26173a"},secondary:{main:"#ff8600"},text:{primary:"rgba(9,9,59,0.87)",secondary:"rgba(44,75,148,0.75)"}},props:{},overrides:{MuiToolbar:{root:{backgroundColor:"white"}}}}),secondary:Object(u.a)({palette:{type:"dark",primary:{main:"#114B8E"},secondary:{main:"#ff8600"},text:{primary:"#F2F1EF",secondary:"#EEEEEE"}},overrides:{MuiPaper:{root:{backgroundColor:"#26173a"}},MuiDivider:{root:{backgroundColor:"rgb(174,168,211, .3)"}}}})},h=function(e){e&&e instanceof Function&&t.e(3).then(t.bind(null,364)).then((function(n){var t=n.getCLS,i=n.getFID,a=n.getFCP,o=n.getLCP,s=n.getTTFB;t(e),i(e),a(e),o(e),s(e)}))},c=t.p+"static/media/logo.ce6d8abd.svg",p=t(99);try{i=JSON.parse('52 files queued up. Starting scrape...\n\nTotal execution time = 0.65 seconds.\n{"build":1613299644,"files":[{"build":{"created":1610128748,"modified":1613232060},"url":"./src/markdown/000_basic_operations/000_intro.md","name":"000_basic_operations/000_intro.md","content":"\\n# About Dialob\\n\\n**Dialob** is a platform for creating and testing responsive dialogs and publishing them online. In the context of the Dialob platform, a dialog is both a form and a process. Creating with Dialob is a dynamic process wherein the word \u201cdialog\u201d is a representation of the constant communication between user inputs on the front-end and Dialob\u2019s back-end processes, resulting in a constant \u201cdialogue\u201d between the system and the user throughout the creation process.  In this way, Dialob constantly updates and saves user inputs on the back-end side and reflects those changes in near real time. The product and end result of the dialog process is a highly customizable form with validations, versioning, translation, and security built in, all tailored to a specific end-user requirement.\\n\\nThe Dialob platform comes with a comprehensive set of tools targeted at non-technical users to enable the creation, testing, and deployment of responsive forms.  \\n\\nThe image below represents the Dialob structural hierarchy:\\n\\n![](/aboutDialob/picture_1.png)\\n\\n* **Dialob Composer**: This is the main environment for creating, changing and testing on-line dialogs. It is powered by Dialob Expression Language (DEL), a powerful, custom-made logic-building language which is easy to learn and use even for non-technical users.  Dialob Composer is available as a cloud service, so there is no need to download anything before use. New users need only create a new account to get started.\\n\\n* **Dialob Manager**: This is the runtime backend service that executes dialogs developed via Dialob Composer. Dialob Manager is an open-source-distributed package, available either as a Docker-image or via source code. Dialob Manager comes with:\\n\\n * **REST API**: Simple API for online UI front end to interact with Dialob manager. See reference implementation.\\n\\n * **Dialog repository**: Repository where dialogs and associated visibility rules are stored so that they can be fetched by the engine at run time.\\n\\n * **Dialog session repository**: Repository that tracks all the changes, dialog requests, and responses, of each unique dialog session. The gathered data provides a full audit trace of each dialog session and thus provides the baseline for further optimization of the online dialogs.\\n\\nThe image below represents the Dialob logical architecture:\\n\\n![](/aboutDialob/picture_2.png)\\n\\n**Dialob R&D** is continuously evaluating new technologies as potential additions to Dialob for the purpose of improving its online dialog creation capabilities.\\n\\nThe Dialob dialog lifecycle management concept is described below:\\n\\n![](/aboutDialob/picture_3.png)\\n\\n\\nLearn more on [dialob.io](http://www.dialob.io).\\n\\n\\n\\n---\\n\\n### Custom features can be added per client request to Dialob\'s ever-growing list of out-of-the-box features\\n\\n* **Logic-building**: Form creators can use rich yet simple logic-building expressions using _Dialob Expression Language (DEL)_ to control the flow of dialogs and, in turn, create a highly configurable end-user filling side.\\n\\n* **Complex validation and visibility rules with built-in functions, DEL, or Java regular expressions**: Using DEL, intricate and detailed forms with interconnected visibility and validation logic can be created, resulting in a fully-customizable and highly-specific user experience on the filling side.  Dialob Composer can validate or hide/show any response field based on user inputs. Custom functions can also be created when needed.\\n\\n  \x3c!-- * NOTE: Pages and groups can have visibility rules attached, whereas individual response fields (questions) can have validation, visibility, and requirement rules attached. --\x3e\\n\\n* **Constant communication between front and backend = Saving on the fly, data security**: Because Dialob Composer (frontend) is in constant contact with Dialob Manager (backend), changes are saved as they happen. There is no fear of losing work. This provides the additional benefit of security: Data cannot be manipulated on the front end, because the backend does all the heavy lifting.  \\n\\n* **Lists**: Lists can be created to populate multi-choice and choice questions and can be reused/edited as often as needed.  \\n  * **CSV support**: Upload and download valueset entries from Comma Separated Value files, which is useful for utilising lists created outside of Composer.\\n\\n* **Custom Variables and Functions**: Using \\"Context Variables\\" and \\"Expression Variables\\", form creators can create their own custom variables and functions to suit their needs.  \\n\\n  * A context variable is a user-created variable that can be used either to store the result of a function evaluation, to prefill form data on the filling side, or as a static value (age = 5).  \\n\\n  * An expression variable is a user-created function that can be used to process inputs from dialog questions, and the product can be stored in a context variable. For example, an expression variable can be written to find the sum of two fields, (question1 and question2) which can then be stored in and later retrieved from a context variable (`question1 + question2 = {sum}`)\\n\\n* **Pre-filling data**: Dialogs can be configured to populate the filling side with pre-selected data (questionnaires, context variables) where desired. This can be done in the integration layer of Dialob where Dialogs are instantiated.\\n\\n* **Full visual customisation options**:\\n  * **CSS customisability**: Dialogs can easily be adapted to fit users\' look and feel requirements.\\n  * **Markdown editing**: Text outputs such as group descriptions, question-level additional information (help text), and note outputs can be styled with simple [Markdown](https://www.markdownguide.org/)\\n\\n* **Preview**: In preview mode, the user is able to see the form in its current state and test the functionality in real time from the perspective of the filling side.  \\n\\n* **Downloading as JSON**: Dialogs can be downloaded as JSON files.\\n\\n* **Versioning**: Dialogs can be tagged and versioned to create a history of changes. The Dialob lifecycle is managed either in a linear or a branched manner. \\n\\n* **Translations**: Dialog questions and list items can be individually translated to / from English, Finnish, Swedish, or Estonian languages. In addition, custom languages can also be created.\\n\\n* **Saving changes**: Because Dialob Composer (frontend) is in constant contact with Dialob Manager (backend), changes are saved as they happen.\\n"},{"build":{"created":1610445169,"modified":1612767226},"url":"./src/markdown/000_basic_operations/001_pages.md","name":"000_basic_operations/001_pages.md","content":"# Pages\\n\\n## Quick Summary\\n\\n* Pages are the main containers for all Dialob elements\\n* All forms need to have at least one page\\n* Only visibility logic rules can be applied to pages\\n\\n---\\n\\n## Overview  \\n\\nPages are the basic containers for all Dialob elements.\\n\\nBelow is a simple diagram of Pages and their child elements:\\n\\n* Page\\n  * Group\\n    * Question\\n      * Logic Rules\\n\\n---\\n\\n## Creating a page\\n\\nBefore you can begin creating your form\'s content, you need to create a page to hold it. All forms need at least one page, but you can have as many pages as you require.\\n\\nPages can contain only visibility rules.\\n\\nWhen you first create a new form, you will need to add your first page by clicking the \'add\' button in the top right corner.\\n\\n![New Page](basicoperations/new-page.png)\\n\\nNow, you can begin to populate your empty page with items.\\n\\n![Second Page](basicoperations/new-page2.png)\\n"},{"build":{"created":1610445169,"modified":1612779793},"url":"./src/markdown/000_basic_operations/002_groups.md","name":"000_basic_operations/002_groups.md","content":"# Groups\\n\\n## Quick Summary\\n\\n* Groups exist within pages\\n* Only visibility logic rules can be applied to groups\\n* Groups can be nested\\n* Inputs can exist outside groups\\n* Groups are created with the \'Add Item / Structure\' buttons\\n* Groups are deleted via the hamburger icon in the top right corner of the group\\n\\n---\\n\\n## Overview\\n\\nGroups exist within pages. They serve to organise different types of questions into logical groups and have slightly different functionalities depending on their type.\\n\\nThere are four types of groups:\\n\\n* Group (general)\\n* Survey Group\\n* Survey Group (vertical)\\n* Multi-row Group\\n\\nAll groups can contain other groups (nested groups), inputs, and outputs (note type). Inputs or outputs can be created both inside and outside of groups.\\n\\nOnly visibility logic rules can be applied to groups\\n\\n---\\n\\n## Group Types\\n\\n### Group (general)\\n\\nThis is the most basic type of group. It can be used to nest other groups or simply to logically organise inputs and outputs.\\n\\n### Survey Group\\n\\nA survey group is used to create survey-style questions.  It usually contains **Survey Items** and a **List**.  In this type of group, survey radio buttons are arranged horozontally across the screen on the filling side.\\n\\n### Survey Group (vertical)\\n\\nA vertical survey group is used to create survey-style questions.  A vertical survey group can contain **Survey Items** and a **List**.  In this type of group, survey radio buttons are arranged vertically across the screen on the filling side.\\n\\n### Multi-row Group\\n\\nThis type of group is used when multiple inputs are required, for example, when collecting a client\'s first, middle, and last names as separate inputs. On the filling side, a multi-row group will be rendered as a row containing a group of input fields. The number of fields rendered within the group is determined by the number of input fields created within that group on the Composer side.\\n\\nA multi-row group can contain any combination of different inputs.  \\n\\n---\\n\\n## Creating a new group\\n\\nTo create a group, click \'Add item / Structure\' buttons at the bottom left corner of the page or an existing group. Then, select the type of group to create.\\n\\n![New Group](basicoperations/create-group.png)\\n\\n---\\n\\n## Deleting a group\\n\\nTo delete a group, click the hamburger icon in the top right corner of the group, and select \'Delete\'.\\n\\n![Delete Group](basicoperations/delete-group.png)\\n\\n"},{"build":{"created":1610445169,"modified":1612779793},"url":"./src/markdown/000_basic_operations/003_adding_items.md","name":"000_basic_operations/003_adding_items.md","content":"# Adding new items\\n\\n## Quick Summary\\n\\n* There are two ways to add new items: Via the hamburger icon + \\"Insert New\\" in the top right of an element, or \\"Add Item\\" button on the bottom left.\\n* Adding an item via the hamburger icon creates the item outside of a group.\\n* Adding an item via the \'Add Item\' button creates the item within the active group.\\n\\n---\\n\\n## Overview\\n\\nItems consist of structures (groups), inputs, and outputs.  \\n\\nThere are two ways to add a new item:\\n\\n1. **To create a new item WITHIN a group**: Use the \\"Add Item\\" button in the bottom left corner of a group1. \\n2. **To create a new item OUTSIDE of a group**: Use the hamburger icon in the top right corner of a page or group and select \\"Insert new\\"\\n\\n---\\n\\n## Creating a new item WITHIN a group: Use the \'Add Item\' button\\n\\nUsing the \'Add Item\' button at the bottom left corner of a group will create a new item within that particular group. See example below:\\n\\n\\n![Add new item](basicoperations/add-item.png)\\n\\nSelect text input type and write a label.\\n\\n![Add new item](basicoperations/add-item2.png)\\n\\nOn the filling side, we see that our text input with the label \\"I am inside group 1\\" appears within group1.\\n\\n![Add new item Preview](basicoperations/add-item3.png)\\n\\n---\\n\\n## Creating a new item OUTSIDE of a group: Use the hamburger icon + \'Insert New\'\\n\\nCreating a new item with the hamburger icon + \\"Insert New\\" from **within a group** will create a new item **below and outside** of the group. See example below:\\n\\nFirst, we add an input of type `text`.\\n\\n![Insert new](basicoperations/insert-new.png)\\n\\nWe add a label to `text1`.\\n\\n![Insert new](basicoperations/insert-new2.png)\\n\\nOn the filling side, we see that the `text1` with the label \\"I am outside of group 1\\" appears outside of Group1.\\n\\n![Insert new Preview](basicoperations/insert-new3.png)\\n\\n---\\n"},{"build":{"created":1611824811,"modified":1612779793},"url":"./src/markdown/000_basic_operations/004_input_types.md","name":"000_basic_operations/004_input_types.md","content":"# Input Types\\n\\n## Quick Summary\\n\\n* A Response is akin to a question: We create a Response on the Composer side, and a user fills out that Response, or question, on the filling side.\\n* An Input type is one of the different kinds of values that can be returned by a response. \\n  * Example: An input such as a text field or text box will return a text value (string response type). An input of type \\"number\\" has a `number` response type.\\n* Dialob supports a variety of different input/response types that cover basic data collection needs.\\n* Additional types can be added to suit your needs.\\n\\n---\\n\\n## Overview\\n\\nData is comprised of multiple types, such as numbers, texts, true/false information, time, etc.  To collect this information, we use input/response types. \\n\\nWhen you design a form, you decide what type of information to collect, from names to birthdates to decimal values. This is where input/response types come in. As you build your form and create your questions, you specify, using types, what kind of data you are collecting and accordingly, the form of that data that will be returned by Dialob.\\n\\nAs an example, if a question requires that a user enter a first name, the type capable of capturing and returning text is called a \\"string\\".  To collect decimal values, you will use the corresponding \\"decimal\\" type.\\n\\n---\\n\\n\\n\\n### Supported response types\\n\\n\\n| Tables        | Are           | Cool  |\\n| ------------- |:-------------:| -----:|\\n| col 3 is      | right-aligned |  |\\n| col 2 is      | centered      |    |\\n| zebra stripes | are neat      |     |\\n\\n\\n\\n* **Survey item**: Return type will be a key\\n\\n* **Text**: Return type will be a string\\n\\n* **Text box**: Return type will be a long string\\n\\n* **Address**: Enables autocomplete of addresses (disabled by default)\\n\\n* **Decimal**: Return type will be a decimal number\\n\\n* **Number**: Return type will be an Integer number (whole number, positive, negative, or zero, no decimals)\\n\\n* **Boolean**: Return type will be a Boolean value (true / false)\\n\\n* **Date**: Return type will be a date in the format of \\"yyyy-mm-dd\\". [See more on ISO dates](http;//ISO Date](https://en.wikipedia.org/wiki/ISO_8601).\\n\\n* **Time**: Return type will be a time in the format of \\"hh:mm:ss\\"\\n\\n* **Choice**: Return type will be an ID of selected row in the list\\n\\n* **Multi-Choice**: Return type will be a set of an ID of selected rows from the list\\n\\n* **Multi-Row**: Return type will be TODO\\n\\n"},{"build":{"created":1611824811,"modified":1612779793},"url":"./src/markdown/000_basic_operations/005_output_types.md","name":"000_basic_operations/005_output_types.md","content":"# Output Types\\n\\n## Quick Summary\\n\\n* **Note** type is the only output type currently supported in Dialob.\\n  * It is used to provide additional information on the filling side\\n  * It has no return value\\n\\n---\\n\\n## Overview\\n\\nNote is an output type which is used to provide additional / general information about a question, on the filling side, to assist users in answering questions.\\n\\nThere is no return value to note type.\\n\\nNote text can be styled with Markdown. [Link to Markdown Syntax Guide](https://www.markdownguide.org/)\\n\\n---\\n\\n## Example of Note type\\n\\n![Note on filling side](basicoperations/note-example1.png)\\n\\nDetailed information on working with Note type can be found in input-and-output-types.\\n\\n\\n"},{"build":{"created":1610445169,"modified":1612779793},"url":"./src/markdown/000_basic_operations/006_reordering.md","name":"000_basic_operations/006_reordering.md","content":"# Reordering items\\n\\n\\n## Quick Summary\\n\\n* The left-hand tree view shows you the current order of present form items\\n* To rearrange items, drag and drop them within the tree\\n\\n---\\n\\n## Overview  \\n\\nTree view shows you the current hierarchy of items as they appear both on the Composer side and on the filling side.  \\n\\nTo rearrange your form items, simply click on them in the tree view, and then drag and drop them in the desired location.\\n\\n---\\n\\n## Example of the tree view\\n\\n![Tree view](basicoperations/tree-view1.png)\\n\\n\\n"},{"build":{"created":1610445169,"modified":1612779793},"url":"./src/markdown/000_basic_operations/007_ids.md","name":"000_basic_operations/007_ids.md","content":"# Identifiers\\n\\n## Quick Summary\\n\\n* All Dialob elements have globally unique IDs\\n* All IDs must be globally unique\\n* Group, response (question), and note IDs can be changed by clicking on their current ID in the top left corner of the item window\\n* Page IDs can be changed by clicking on the hamburger icon next to their names\\n\\n--- \\n\\n## Overview \\n\\nAll Dialob elements have globally unique identifiers:\\n\\n* Dialog ID\\n* Page ID\\n* Group ID\\n* Input ID\\n* Output ID\\n\\nThe Dialog ID can be found in the Dialog Options/Information window, accessible from the upper menu.\\n\\nThe IDs for all other items can be seen in the top left corner of the items themselves. See example:\\n\\n\\n![IDs](basicoperations/id1.png)\\n\\n---\\n\\n## ID Rules\\n\\n* A valid ID consists of letters, numbers, and underscores\\n* A valid ID must start with a letter\\n* IDs are case sensitive\\n* IDs must be unique\\n* IDs must not match reserved words used in expressions\\n\\n---\\n\\n\\n## Changing IDs\\n\\nChanging an ID will update all references to this ID automatically.\\n\\n### Page ID\\n\\nThe Page ID can be changed by clicking the hamburger icon to the right of the Page name and selecting \\"Change ID\\" from the dropdown.\\n\\n\\n### Group ID, Question ID, Note ID\\n\\nThese can all be changed simply by clicking on their current IDs in the top left corner of the items and creating a new ID.\\n\\n\\nIf a new ID conflicts with an existing one, the ID editing field will turn red, and a new ID will not be set until the naming conflict is resolved.\\n"},{"build":{"created":1610445169,"modified":1612786167},"url":"./src/markdown/000_basic_operations/008_testing.md","name":"000_basic_operations/008_testing.md","content":"# Preview mode: Testing the filling side\\n\\n## Quick Summary\\n\\n* Forms can be live-tested at any time with the \\"Preview Mode\\" feature\\n* Click \\"Preview\\" in the top right corner of the Composer window\\n* Preview mode is not accessible if a form has errors\\n\\n---\\n\\n## Overview  \\n\\nYou can test your form live, at any time in the creation process.\\n\\nTo activate Preview Mode, simply click \\"Preview\\" in the upper right corner of the Composer window.\\n\\n**NOTE**: Any existing errors will need to be resolved before you can utilise Preview Mode.\\n\\n---\\n\\n![Preview Mode](basicoperations/preview1.png)\\n\\n"},{"build":{"created":1610128748,"modified":1612786167},"url":"./src/markdown/001_advanced_operations/000_lists.md","name":"001_advanced_operations/000_lists.md","content":"# Lists\\n\\n## Quick Summary\\n\\n* Lists\\n  * are **key**-_value_ pairs (**id**-_listItem_) \\n  * are used to populate drop-down menus, choice selections, and create survey button options\\n  * can have visibility rules, which are created via the Lists window\\n  * used in combination with Choice or Multi-choice types must be inserted **at the response level**.\\n  * used in combination with Survey Group or Vertical Survey Group must be inserted **at the group level**.\\n\\n\\n[Use cases of lists](#use-cases)  \\n[Creating a Global list](#creating-global-list)  \\n[Creating a Local list](#creating-local-list)  \\n[Setting list visibility rules](#list-visibility)  \\n[Using a List in a Choice or Multi-Choice Response Field](#using-list-choice-multichoice)  \\n[Using a List in a Survey Group or Survey Group (Vertical) \\n[Response Field](#using-list-survey-group)  \\n\\n---\\n\\n## Overview\\n\\nLists are **key**-_value_ pairs (**id**-_listItem_) that are used to populate drop-down menus, choice selections, and create survey button options.  There are two types of lists in Dialob:\\n\\n**Global lists**: These lists exist independently from specific response fields, which means that they are not tied to any specific question and can easily be reused anywhere in the form. Any changes made to a global list will automatically be updated in all of the questions which use that list. Use a global list for drop-downs if the intent is to reuse the same list many times in different questions. For example, if a form requires the repeated reuse of a drop-down menu comprised of the same generic sports cars, a global list is the best choice.\\n\\n**Local lists**: These lists are bound to the response in which they are created. In fact, you can only create them from within the question/response where they will be used. Changes to local lists will be reflected only within the question where they were created. Use a local list if the goal is to simply create a one-time drop-down which is bound to a particular response field and will only apply to that particular question. For example, if a form requires one specific list of Italian sports cars and only one question will ask the user about these cars, a local list is the best choice.\\n\\n---\\n\\n### Use cases of lists {#use-cases}\\n\\n* Populate a drop-down menu\\n* Create survey button options\\n\\nA **global list** exists independently from specific response fields, which means that it is not tied to any specific question and can easily be reused. Any changes made to a global list will automatically be updated in all of the questions which use that list. Use a global list for drop-downs if the intent is to reuse the same list many times in different questions. For example, if a form requires the repeated reuse of a drop-down menu comprised of the same generic sports cars, a global list is the best choice.\\n\\nA **local list** is bound to the response in which it is created. Changes to local lists will be reflected only within the question where they were created. Use a local list if the goal is to simply to use it once and only in that particular question. For example, if a form requires one specific list of Italian sports cars and only one question will ask the user about these cars, a local list is the best choice.\\n\\n---\\n\\n### Creating a global list {#creating-global-list}\\n\\n1. Select \\"Lists\\" option from the top menu of the Composer screen.\\n2. Create a new list by selecting \\"Add new list\\".\\n3. Give the list a name.\\n4. Give the list items their keys and texts.\\n\\n* **Name** is the name of the list itself and is used by the form creator on the Composer side to identify the list.\\n* **Key** is the request ID and must be manually created by the form creator (at this time, list keys are not auto-generated). Keys must follow the [Request ID rules](https://docs.dialob.io/dialob-expressions/#request-id-rules) for creation of IDs.\\n* **Text** is the actual words / sentences / numbers that the form filler will see when selecting an item from the list.\\n\\n---\\n\\n### Setting visibility rules for list items {#list-visibility}\\n\\n* To write a visibility rule, click the \\"eye\\" icon to the left of the item\'s key. A gray eye indicates that no rule exists, whereas a black eye indicates that a rule does exist.\\n* The rule is edited at the bottom of the list window.\\n* Visibility rules can refer to ANY response ID in the Dialog except for attributes inside of a multi-row element.\\n\\nFor more information on writing visibility rules, see [Basic Logic Building and Rule Writing](https://docs.dialob.io/dialob-expressions/logic-building/)\\n\\n![List](advancedoperations/list-visibility1.png)\\n\\n**NOTE:** Next to the list name, you can utilise the \\"Users\\" option as a quick way to see how many responses are using this list and to identify unused lists.\\n\\n---\\n\\n### Creating a local list {#creating-local-list}\\n\\nLocal lists are created **at the response level** or **at the group level**.\\n\\n* `Choice` and `Multi-choice` local lists are created at the response level.\\n\\n* `Survey Group` and  `Survey Group (Vertical)` local lists are created at the group level.\\n\\nClick the hamburger icon in the top-right corner of the response editor. Then select \\"Options\\". Select \\"Create new local list\\".  The process of creating a local list is identical to that of a global list.  The new local list will automatically be inserted into the question once \\"OK\\" is selected.\\n\\n---\\n\\n### Using a list in a Choice or Multi-Choice response field {#using-list-choice-multichoice}\\n\\nLists used in combination with `Choice` or `Multi-choice` types must be inserted **at the response level**.  \\nLists used in combination with `Survey Group` or `Vertical Survey Group` must be inserted **at the group level**.\\n\\n\\nThe following screenshots demonstrate how to use a list in a Choice or Multi-Choice response type:\\n \\n1. To use a list in a `Choice` or `Multi-choice` response, insert the list **at the response level**. Create a group, then create a response of type `Choice` or `Multi-choice` within that group.\\n2. Click the hamburger icon in the top-right corner of the response editor. Then select Options. Select the desired list.\\n3. Preview the filling side.\\n\\n\\n![List 4](advancedoperations/list4.png)\\n\\n**Click the hamburger icon in the top-right corner of the response editor. Then select Options. Select the desired list.**\\n\\n![List 5](advancedoperations/list5.png)\\n\\n**Insert the list at the response level. To do this, create a group, then create a response of type Choice or Multi-choice within that group. Finally, select and insert the list.**\\n\\n![List 6](advancedoperations/list6.png)\\n\\n**Preview the filling side.**\\n\\n![List 7](advancedoperations/list7.png)\\n\\n**NOTE**: There is currently no external or visual indication that a response has a list attached to it. To check whether a response has a list bound to it, click the hamburger icon, then \\"Options\\".\\n\\n---\\n\\n### Using a list in a Survey Group or Survey Group (Vertical) response field {#using-list-survey-group}\\n\\nCreating a survey question is done at the **group level** through the creation of a \\"Survey Group\\" or \\"Survey Group (Vertical)\\".  \\n\\nA complete survey question is comprised of three basic parts:\\n\\n* A survey group (general container for the survey question)\\n* `Survey item` input type to provide the survey questions within the survey group\\n* A **global or local list** to provide the survey responses from which users can select\\n\\nThe following example follows these steps to create a survey about user opinions on car brands.  \\n\\n1. Create a survey group by selecting \\"Add item/Structure/Survey Group\\".\\n2. Inside the survey group, create Survey Items. For this example, the Survey Items are the car brands we will ask opinions on.\\n3. Create the list to populate the Survey Responses. The list will comprise the range of opinion choices for the user to select.\\n4. Insert the list into the Survey Group by selecting the hamburger icon at the top-right of the **group**.\\n5. Preview the filling side.\\n\\n\\n\\n**Create a survey group by selecting \\"Add item/Structure/Survey Group\\".**\\n\\n![Survey](advancedoperations/survey3.png)\\n\\n**Inside the survey group, create Survey Items. For this example, the Survey Items are the car brands we will ask opinions on.**\\n\\n![Survey](advancedoperations/survey5.png)\\n\\n **Create the list to populate the Survey Responses. The list will comprise the range of opinion choices for the user to select.**\\n\\n![Survey](advancedoperations/survey2.png)\\n\\n**Insert the list into the Survey Group by selecting the hamburger icon at the top-right of the **group**.**\\n\\n![Survey](advancedoperations/survey7.png)\\n\\n**Preview the filling side.**\\n\\n![Survey](advancedoperations/survey6.png)\\n"},{"build":{"created":1611915630,"modified":1612786167},"url":"./src/markdown/001_advanced_operations/001_lifecycle_management-_tags.md","name":"001_advanced_operations/001_lifecycle_management-_tags.md","content":"# Lifecycle Management: Tagging and Branching\\n\\n## Quick Summary\\n\\n* Dialob supports two kinds of tagging: Linear and Branching\\n* Dialob forms created via branching will not appear in Version History\\n* Multiple users editing the same dialog session simultaneously will result in unpredictable Dialob behaviour\\n\\n[Examples of tagging: Linear and Branching](#examples)  \\n[How to create a tag](#create-tag)  \\n[Multiple users accessing the same dialog session simultaneously](#multiple-users)  \\n\\n---\\n\\n## Overview\\n\\nManaging the Dialob Lifecycle is simple with tagging. Creating a tag can be thought of as assigning a name to represent the state of a dialog at a certain point in time. This tag can then be referred back to at any time, and previously-created dialogs can be recalled and used whenever needed. Dialogs can be continually refined and managed in this way, with the tagging history providing a list of each tag, its creation date, and the ability to revisit/reactive previous tags. \\n\\nWhen making a new tag, Dialob Manager will save the dialog in its current state, which will then become immutable. Then, Dialob will create an exact copy of this dialog, which it will tag as the \\"latest version\\". Only the \\"latest version\\" can be edited. In this way, new versions can be built on top of old versions, using the older tags as a \\"starting off point\\" for the \\"latest versions\\".  \\n\\nDialob currently supports two forms of versioning: **Linear** and **Branching**. \\n\\n---\\n\\n### Examples of Tagging: Linear and Branching {#examples}\\n\\n\\n**Linear tagging**: \\n\\nPossible use case: Create a singular, evolving form with a core set of elements which won\'t change much over time\\n\\n* Create v1.0 with 10 core questions.\\n* Create v2.0, which is based on v1.0 **PLUS** additional 20 questions.\\n  * v2.0 now has 30 questions: 10 from v1.0 and 20 new, unique to v2.0\\n* Create v3.0 from v2.0.  Modify existing questions.\\n\\n_Result: There are three different tags in this scenario which represent the same form at different periods in time, a sort of evolution. This scenario can save time if you need to reuse many of the same questions without making too many modifications._\\n\\n**Branching**: \\n\\nPossible use case: Create multiple different forms based on the same core elements/original form, and modifying each core to suit different needs\\n\\n* Create v1.0 with 10 core questions.\\n* Create v2.0 with modified v1.0 questions, tailored to a similar but different user base.\\n* Create v3.0 with modified v1.0 questions, tailored to a similar but different user base.\\n* Repeat for each version of v1.0 required.\\n\\n_Result: Using one core set of questions, multiple different forms can be created, each sharing similarities of the original core._\\n\\nIn summary, creating version tags via the \\"Version\\" menu creates dialogs that are tagged in a straight line as a continuous process, which means, in practice, that the newer version is an evolution based on the version that came immediately before it.\\n\\nBranching, on the other hand, produces \\"lateral\\" versions based on the same original copy. It works simply by copying the original version and creating a duplicate.  \\n\\n---\\n\\n### How to create a tag {#create-tag}\\n\\n**Linear tags** are created via the \\"Version\\" menu in the Composer window.\\n\\n1. Navigate to the \\"Version\\" menu. To the right of \\"Version\\", the current dialog\'s version tag in will be displayed. If the active dialog is the latest version, \\"Latest Version\\" will be displayed. If the active dialog of is a previous version, that version\'s tag will be displayed.\\n\\n2. To create a new tag, navigate to \\"Version\\" / \\"Create version tag\\" and enter desired tag name.\\n\\n3. When navigating back to \\"Version\\" / \\"Manage versions\\", a list of all tags and the dates at which they were created is displayed. Select \\"Activate\\" for a previous version.\\n\\n**Branches** are created by copying the original version to create a duplicate to be edited. The branching functionality is not currently available in the \\"Version\\" menu, and branched versions will not appear in Version history.\\n\\n---\\n\\n![Version Menu](advancedoperations/version1.png)\\n\\n### Multiple users accessing the same dialog session at the same time {#multiple-users}\\n\\nIn the Dialob lifecycle, it is possible for multiple versions of the same dialog to co-exist at the same time.  For example, a situation may occur when one user is working with an older version on the filling side, while, at the same time, another user decides to create a new version.  Because session IDs are associated with the user\'s login, the user with the older version will proceed with the older version while the user with the newer version will proceed with the newer version.  Dialob\'s default behaviour is to allow this, but it can be modified if needed.  \\n\\nAlso, when in the production environment, one user can be editing a dialog on the Composer side while another user can see the changes as they happen on the filling side.  However, multiple users editing the same dialog session at the same time is not supported and will result in unpredictable Dialob behaviour.\\n"},{"build":{"created":1610128748,"modified":1612767716},"url":"./src/markdown/001_advanced_operations/002_translations.md","name":"001_advanced_operations/002_translations.md","content":"# Translation and Localisation\\n\\n## Quick Summary\\n\\n* Create multi-language forms with the Translation feature\\n* Built-in languages include English, Estonian, Finnish, and Swedish. Additional language support can be added according to your needs.\\n* There are two creation modes: Create Empty and Copy from Active\\n* Test your translations on the filling side by changing the active language either via the Translation window OR via the language dropdown in the Composer upper menu\\n\\n[Activating a new language](#activating)  \\n[Translating items](#translating-items)  \\n[Testing](#testing)  \\n\\n---\\n\\n## Overview\\n\\nThe ability to create multi-language forms is critical, and Dialob supports this via a simple Translation feature.  There are three main items within the Translation window:\\n\\n1. **Languages Tab**: All activated languages, including the currently active language of the filling side. Within this tab, you can also set the active language for your filling session. The active language is indicated with the language name inside of a blue highlighted box.\\n\\n2. **Fields Tab**: All form fields, including Page, Group, and Question-level labels\\n\\n3. **Lists Tab**: All list items\\n\\n![Translations](advancedoperations/translation1.png)\\n\\n---\\n\\n### Activating a new language {#activating}\\n\\nWhen you activate a supported new language, any translations you have written for fields and items will appear in that language on the filling side as long as they have been defined.  Filling side buttons will automatically be translated into the active language.\\n\\nFrom the screenshots above and below, you can see that English is the only supported language on our form. Also, the blue highlighted box indicates that English is the currently active language. \\n\\nTo activate a new language, select it from the \\"Add new language\\" dropdown. Currently, English, Swedish, Finnish, and Estonian come built-in. Support for additional languages can be added per client request.\\n\\n![Translations](advancedoperations/translation2.png)\\n\\nTake note of the two creation method options: **Copy from Active** and **Create Empty**.  \\n\\n#### Copy from Active\\n\\nThis feature will create the new language and populate its values with a copy of the values in the currently active language. In practice, this means that if your currently active language is English, and you create a new language with the \\"Copy from Active\\" option, you will see your existing values copied to the new language in English. The values will need to be deleted and translated accordingly.\\n\\nThis is the result when selecting \\"Copy from Active\\":\\n\\n![Copy from Active](advancedoperations/copy-from-active.png)\\n\\nNOTE: When creating new translations via \\"Copy from Active\\", you can be assured that there will never be any blank fields or items on the filling side. If you forget to translate certain items into the active language of the filling side, they will appear in the language from which they were copied, thus ensuring that every field has at least some text in it.\\n\\n#### Create Empty\\n\\nThis feature will activate the new language without copying the values from the currently active language, essentially leaving you with a \\"blank slate\\" with which to start writing your translations, no deleting needed.  \\n\\nThis is the result when selecting \\"Create Empty\\":\\n\\n![Create Empty](advancedoperations/create-empty.png)\\n\\nNOTE: If you forget to translate some fields and then start a filling session with incomplete translations, the untranslated items will not appear, causing empty fields on the flling side.  You can easily see if there are any remaining untranslated items by checking the \\"problems\\" box. If the \\"problems\\" box indicates a number other than zero, simply click on the box and you will be taken to the untranslated item.\\n\\n---\\n\\n### Translating items {#translating-items}\\n\\nUpon activating a new language, you can begin to translate your items. In this example below, we activated the Estonian language and selected the \\"Create empty\\" option. We then navigated to the \\"Fields\\" tab.\\n\\nThere are two things to be aware of here.\\n\\n* **Blue \\"Problems\\" message**: This will display how many untranslated items there are. Once all items have been translated, the \\"problems\\" will change to zero.\\n* **\\"Show language\\" dropdown**: Click here to select the language into which you want to translate your items. In our case, we will select Estonian language. Note that you cannot proceed with translations until you have chosen the language to show in the Translation window.\\n\\n**NOTE**: To make additional languages appear in this dropdown into which you can translate, you need to activate them in the Languages tab first.  \\n\\n![New Language List Tab](advancedoperations/translation3.png)\\n\\nOnce you have clicked your desired language inthe \\"Show language\\" dropdown, the translation text box will appear on the right.\\n\\nTo start additing translations, click the row/value you wish to translate, and write your translations in the Translation box.\\n\\n![Writing translation](advancedoperations/translation4.png)\\n\\nNow, we have written all the translations. Note that the \\"problems\\" message is now zero.\\n\\n![Translations complete](advancedoperations/translation6.png)\\n\\n---\\n\\n### Testing {#testing}\\n\\nYou can test that your translations appear correctly on the filling side first by changing the active language either via the Translation window OR via the language dropdown in the Composer upper menu.\\n\\n![Testing languages](advancedoperations/activate-language.png)\\n\\nIn this example, we select \\"Estonian\\" from the dropdown and then select \\"Preview\\", and on the filling side, everything is correct:\\n\\n![Testing languages](advancedoperations/est-translation.png)\\n\\n"},{"build":{"created":1610128748,"modified":1612786167},"url":"./src/markdown/001_advanced_operations/003_csv.md","name":"001_advanced_operations/003_csv.md","content":"# Comma Separated Values (CSV)\\n\\n## Quick Summary\\n\\n* CSV files are a quick and easy way to create list valuesets with localisations\\n* Uploaded CSV files must follow the required format for Composer to apply them\\n* Supported form languages must be created via Translations **before** uploading a multi-language CSV file, otherwise those language values will be ignored by Composer\\n\\n[What is a valueset?](#valueset)  \\n[Required CSV format and notes](#format)  \\n[Simple outline of steps to list-building with CSV](#outline)  \\n[Step-by-step walkthrough: Build a single-language list with CSV](#walkthrough)  \\n[Important notes and troubleshooting multi-language list-building with CSV](#multilanguage)\\n\\n---\\n\\n## Overview\\n\\nUploading CSV files is a quick and easy way to create list valuesets with localisations, using your CSV editor of choice.  The uploaded file can then populate an empty list created within Composer, which you can apply to individual questions just like any Composer-created list.  \\n \\nYou can also download any list valuesets as a CSV file.\\n\\n**NOTE**: If you plan to use CSV files for multi-language valueset creation, first check out [Important notes on list-building with localisations in CSV](#multilanguage)\\n\\n---\\n\\n### What is a valueset?{#valueset}\\n\\n A valueset is the key-value pair for a list item (unique id + item text/description). See this example from a list entitled \\"animals\\":\\n\\n![Value set](advancedoperations/valueset.png)\\n\\nValuesets created via CSV files can be localised for a particular language, simply by adding additional columns with headers designating the language of that item using two-letter language codes. This localisation is explained in greater detail in the next section: _Required CSV format_.\\n\\n---\\n\\n### Required CSV format and notes {#format}\\n\\nA CSV file must follow this format:\\n\\n* The first row is the header row.\\n  * The first column of the header row must be `ID`.\\n  * The rest of the header columns must be two-letter language IDs for labels. [See two-letter language codes](https://en.wikipedia.org/wiki/List_of_ISO_639-2_codes)\\n* The first column of the content rows is item ID.\\n* The rest of the content columns are the entries in the language corresponding to the two-letter language code in the column header.\\n\\nThe example below follows these rules. It contains two items (column B and C). Each item has an ID (item1 and item2), a two-letter language code (English = en, Estonian = et), and corresponding English and Estonian localisations.\\n\\n![CSV format](advancedoperations/csv-format-example.png)\\n\\n#### Notes on CSV creation and uploading\\n\\n* Empty rows are ignored\\n* The order of entries in the file is retained\\n* All **defined** languages on a form are imported. This means that, if your target form doesn\'t support the language specified in the CSV file, the values will remain hidden.  In practice, for example, if you specify Estonian language valuesets like we did above, but your form doesn\'t have Estonian language translations enabled, the values in the \\"et\\" column will not appear in your Lists, nor will they be accessible until you define the Estonian language and reupload your CSV.  Defining a language for your form is as simple as going to the [Translations](https://docs.dialob.io/introduction/translations/) feature in the top menu bar and activating your desired language.\\n\\n_To avoid this issue, be sure to activate your desired languages via the Translations modal **before** uploading your CSV file._\\n\\n* All entry IDs are imported exactly how you wrote them in your CSV file. In the case of conflicts or other problems, error messages will be displayed, and you will need to resolve these as normal.\\n* Valueset entries are downloaded as a CSV file in the same format as described above.\\n* The following import modes are supported:\\n\\n  * **Replace all**: Replaces all valueset entries with the values from the CSV file.\\n  * **Append**: Appends values from the CSV file to the end of the existing valueset entries. This will cause ID conflicts if new CSV values have IDs which are the same as existing valueset entries\' IDs.\\n  * **Update**: Updates existing entries by ID and adds new entries from file.  \\n\\n---\\n\\n### Simple outline of steps to list-building with CSV {#outline}\\n\\nBelow is a simple outline for creating a list using CSV files from Google Sheets. A more detailed walkthrough for this process follows the outline.\\n\\n#### Creating and uploading the CSV file\\n\\n1. Create a csv file following the required format\\n2. Download file in .csv format (only .csv format is supported)\\n3. Create a new list in Composer and give it a name\\n4. Upload .csv file to that list via the upload button\\n\\n#### Applying the CSV file to your form\\n\\n5. Create the question to which you wish to append your list\\n6. If using multiple languages, open Translations and add your required language\\n6. Navigate to Translations/Fields, and translate the question to which you will append your list\\n7. Test the filling side by selecting an active language in the top right of the Composer window, followed by the Preview button.  \\n\\n---\\n\\n### Step-by-step walkthrough of single-language list-building with CSV {#walkthrough}\\n\\n**1. Create a CSV file and download it in .csv format _only_**\\n\\nFor this walkthrough, we will use a CSV file containing key-value pairs for animals. The CSV file has one language localisation: English (en).  \\n\\nCreate your CSV file according to the guidelines for required CSV format above, and download it to your local machine.\\n\\n![CSV format](advancedoperations/csv-format-example2.png)\\n\\n**2. Create a new list in Composer to hold your CSV values**\\n\\nNavigate to \\"Lists\\" in the top menu, and create a new list. Give the list a name, but do not fill in any list items.\\n\\n![Animals list](advancedoperations/animals1.png)\\n\\n**3. Upload your CSV file via the upload button in the Global Lists modal**\\n\\nClick the \\"Upload CSV\\" icon.\\n\\n![Uploading and downloading CSV](advancedoperations/upload-valueset2.png)\\n\\nThen, select your desired CSV file, followed by upload mode. For this example, we are going to select \\"Replace all\\" because we are dealing with a completely new list with no pre-existing values to edit or append to.\\n\\n![Uploading and downloading CSV](/advancedoperations/upload-valueset1.png)\\n\\nOnce you have uploaded your CSV file, you will see that the list will automatically be populated with your valuesets, which appear in English because the form\'s active language is English and the two-letter language codes used in the second column of the table determined this content to be of language \\"en\\".\\n\\n![Uploading and downloading CSV](advancedoperations/upload-valueset3.png)\\n\\n**4. Test your new list**\\n\\nAppend your list to a choice or multi-choice input type, write your question, and preview your form.\\n\\n![Filling side preview CSV](/advancedoperations/animals-csv-preview.png)\\n\\n---\\n\\n### Important notes and troubleshooting multi-language list-building with CSV {#multilanguage}\\n\\n* To ensure that all of your CSV\'s languages are recognised and added to your form upon upload, supported form languages **must be created** via the [Translations](https://docs.dialob.io/introduction/translations/) feature **BEFORE** you upload your CSV file!  \\n* This means the following: Composer will ignore the values of a CSV file associated with a language that has not been defined in Composer prior to CSV upload.  \\n* If you forget to activate a desired language prior to CSV upload, or you just wish to add support for other languages after the initial upload, activate the desired language via the Translation function and **reupload your list.**\\n* When looking at your list in the Lists window, you will see only the values associated with the currently active language in Composer. Changing the active language will change the values in the list to the specified language.  \\n"},{"build":{"created":1611828805,"modified":1612767716},"url":"./src/markdown/001_advanced_operations/004_downloading_json.md","name":"001_advanced_operations/004_downloading_json.md","content":"# Downloading a Dialog in JSON format\\n\\n## Quick Summary\\n\\n* Forms can be downloaded in JSON format\\n\\n---\\n\\n## Overview  \\n\\nYou can download a JSON file at any time which describes your current Dialog.  \\n\\nSimply click on the download icon in the top right of the Composer window.\\n\\n---\\n\\n![Preview Mode](advancedoperations/download-json.png)\\n\\n"},{"build":{"created":1612599863,"modified":1612786167},"url":"./src/markdown/001_advanced_operations/005_custom_variables.md","name":"001_advanced_operations/005_custom_variables.md","content":"# Custom variables and expressions\\n\\n\\n## Quick Summary\\n\\n* Context Variables are static/immutable variables, available across the entire dialog session\\n* Expression Variables are user-defined functions, available across the entire dialog session\\n* Custom variables are only available for use when their values are set. If the values are not set, they will not be present or usable in the session\\n\\n---\\n\\n## Overview: Custom Variables and Expressions\\n\\n**DEL** supports custom variables and custom expressions, called **Context Variables** and **Expression Variables** respectively, which can be used as part of dialog *visibility*, *required* or *validation* logic. These special variables/expressions are especially helpful for several situations where custom functionality is needed:\\n\\n* If you need to pre-fill default data into a response field\\n* When a filling session is to be initialised with pre-defined data, often pulled from an outside resource\\n* Writing custom mathematical and logical functions\\n\\nContext variables and expression variables can be of the following types: `Text`, `Number`, `Boolean`, `Date`, or `Time` with the exclusion of `Note` type.\\n\\nContext variables and expression variables can be a combination of existing variables or function calls.  \\n\\n---\\n\\n## Context variables\\n\\n**In terms of a dialog session, a context variable is a static variable: it is immutable in the dialog session and is available across the entire session.**  \\n\\n* A context variable has an ID, a type, and a default value.  \\n* A context variable can be called with its ID surrounded by curly braces. For example: ` {contextId}`.\\n* A context variable\'s value is set outside of the context of the given dialog session and is not tied to any specific request ID. It works like a \\"hidden field\\", and typically, it is used to preload a given dialog session with data, such as preloading CRM data of an identified user, which is known before launching the session.  \\n* A context variable  can also be any existing response ID in the current session. For example, if you have a Text type response with ID `myName`, you can output the value of `myName` in a `Note` type. Just surround the response ID with curley braces `{ }` from inside the `Note`. So, as a response ID: `myName` but as a context variable being called: `{myName}`.  \\n\\nBelow are some examples to demonstrate what context variables can look like.\\n\\n![Context variables examples](/advancedoperations/context-variable-examples.png)\\n\\n---\\n\\n## Expression variables\\n\\n**An expression variable is a user-defined function which is not coupled to any specific request ID. It can be used, for example, to find the sum of two request IDs of type `Number` or to validate a text input in multiple different responses.** \\n\\n* An expression variable has an ID and an expression (function).\\n* An expression variable can be called with its ID surrounded by curley braces. For example: `{expressionId}`.\\n* An expression variable can be any of the response IDs in the current Dialob session, a logical expression, or a mathematical operation.\\n  * **Response ID in the current session**: Examples include default IDs such as `text1`, `date3`, `boolean2` or user-created IDs such as `isNewCustomer`, `postalCode2`, etc..\\n  * **Logical expression**: Example: `{date3 > date2}`, which can be read as \\"**If** date 3 is later (greater) than date 2, **then** return true\\".\\n  * **Mathematical operation**: Example: `{1 + 5 + 2 * (6 / 3)}`, which can be read as \\"6 divided by 3, 2 multiplied by 2, and then 1 plus 5.\\n\\nBelow are some examples to demonstrate what expression variables can look like.\\n\\n![Context variables examples](/advancedoperations/expression-variable-examples.png)\\n\\n**NOTE**: **Requests, expression variables or context variables** are *ONLY* available when their values are set. This means that if the value is not set, then they will not be not present in the given dialog context.  In other words, in **DEL**, there is no such thing in as a NULL as value for a variable.\\n\\nThe next page outline the use of context and expression variables.\\n"},{"build":{"created":1612599863,"modified":1612786167},"url":"./src/markdown/001_advanced_operations/006_using_custom_variables.md","name":"001_advanced_operations/006_using_custom_variables.md","content":"# Using custom variables and expressions\\n\\n## Quick Summary\\n\\n* Custom variables are created in the \\"Variables\\" menu item at the top of the Composer screen\\n* Custom variables have many use cases, including\\n  * Pre-filling data on a question \\n  * Initialising a form filling session with prefilled data\\n  * Creation of custom functions\\n* It is recommended to leave custom variables\' \\"Published\\" value unselected as per default, unless special implementation is required\\n* A custom variable built using *question input data* becomes active only after all of its questions have been asked. This means that it must \\"wait\\" to receive input data before it can start working\\n\\n\\n[Example basic use cases](#basic-use-cases)  \\n[Using context variables to pre-fill default data in a question](#pre-fill)  \\n[Using context variables to initialise a filling session with pre-defined data](#initialise-session)  \\n[Using expression variables to perform mathematical and logical operations](#expression-variable-function)  \\n\\n---\\n\\n## Overview: Creating custom variables and expressions\\n\\n\\nContext variables and expression variables can be created in the \\"Variables\\" menu at the top of the Composer window.  \\n\\n![variables menu](/advancedoperations/variables-menu.png)\\n\\nSelecting the \\"Variables\\" menu option will present you with the variables window. From here, you can choose to create context or expression variables via the tabs.\\n\\n![variables menu](/advancedoperations/variables-menu2.png)\\n\\n---\\n\\n**NOTE**: When you create a variable, it is important to take note of the \\"Published\\" feature.\\n\\n![variables menu](/advancedoperations/variables-published.png)\\n\\n**Context and expression variables both have the \\"Published\\" option.  Publishing a variable will make its value available on the filling side UI.**\\n\\nIt is recommended that, unless required by a specific implementation, the \\"Published\\" setting remain unselected.\\n\\n**\\"Published\\" is unselected by default.**\\n\\n---\\n\\n### General example of creating and injecting a custom variable into a dialog\\n\\nFor this example, we create a custom variable called `{age}` which will be of type `Number` and will have a default value of 15. This variable will be used in a Boolean response field and will prompt the user on the filling side with the following:\\n\\n`Is your age 15?`\\n`YES/NO`\\n\\nWe begin by creating our context variable.\\n\\n![age context variable](/advancedoperations/age3.png)\\n\\nNow that we have a variable created, we want to put it to use by inserting it into a response field. To do this, the we take the variable ID, surround it with curly braces`{ }`, and insert it in the field where we want to use it. In this case, it is in the \\"Label\\" field of ageQuestion1. \\n\\nSo, the variable\'s ID is `age`, but when used in a response field, we must refer to it as `{age}`.  \\n\\nIn this next step, we create a boolean response field and place our context variable inside, remembering to surround it with curly braces: `{age}`. This boolean response field will ask the user if his/her age is equivalent to the default value set by the context variable, which we set to 15.  We then preview the variable on the filling side:\\n\\n![Age context variable](/advancedoperations/age-context-variable-preview1.png)\\n\\nBefore you can actually preview the form, it is important to remember that, whenever context variables are exist in a dialog, whether or not they are being used at the time, you will need to declare or check their default values before the filling side preview mode can be shown. This means that, after you click Preview but before you see your form, you will be presented with the Context Variable Preview window as seen below. This window will show you your context variables and any default values you have given them.\\n\\nIn the example below, you can see here that a value of 15, which we set for our `{age}` context variable, shows up as the default value. This value will appear on the filling side unless we type in a different value.\\n\\n![Age context variable](/advancedoperations/is-your-age2.png)\\n\\nFinally, on the filling side, this is the output:\\n\\n![Age context variable](/advancedoperations/is-your-age3.png)\\n\\n---\\n\\n## Example basic use cases {#basic-use-cases}\\n\\n[Using context variables to pre-fill default data in a question](#pre-fill)  \\n[Using context variables to initialise a filling session with pre-defined data](#initialise-session)  \\n[Using expression variables to create a function to add two numbers together](#expression-variable-function)  \\n\\n---\\n\\n### Using context variables to pre-fill data in a question {#pre-fill}\\n\\nIn this use case, a context variable is used to pre-fill a dialog response field with a default value for a customer\'s age.\\n\\n#### Step 1: Create context variable, specify its ID, type, and default value. Leave \\"Published\\" unchecked.\\n\\n![Context Variable Type](/advancedoperations/age-context1.png)\\n\\n#### Step 2: Insert context variable into response field in Composer\\n\\nCreate your response field and enter the context variable, surrounded by curly braces, right into your response field.\\n\\n![Context Variable Type](/advancedoperations/age-context2.png)\\n\\n#### Step 3: Hit the Preview button to bring up the Context Variable preview before viewing the filling side\\n\\n![Context Variable Type](/advancedoperations/age-context3.png)\\n\\n#### Step 4: Preview the filling side with the custom default value\\n\\n![Context Variable as pre-filled value](/advancedoperations/age-context4.png)\\n\\n---\\n\\n### Using context variables to initialise the filling session with pre-filled data {#initialise-session}\\n\\nSimilarly to setting default values with context variables, DEL also supports a way to initialize the filling session with predefined data already prepared. This is done by declaring a set of attributes via context variables that are passed to the dialog as the filling session is started.\\n\\nIn the same way as the previous example, you need to declare or confirm the values of the context variables on the Composer side before you can preview the form on the filling side. \\n\\nIn this next use case, we are going to create a filling session that outputs predefined data and does not require any user inputs to produce that data.  We will display three predefined values: `firstName`, `surname`, `age`.\\n\\n#### Step 1: Create context variables, specify their IDs, types, and default values. Leave \\"Published\\" unchecked.\\n\\n![Personal Info Context Variables](/advancedoperations/pre-fill1.png)\\n\\n **Note**: Variable names must be the same, one-to-one, on both sides (variable and Composer side) in order for mapping to work.\\n\\n#### Step 2: Enter context variables in a `Note` Output type (for the sake of this exercise)\\n\\nEnsure that variable names are the same both in the Variable editor as well as on the Composer side.\\n\\n![Entering default values](/advancedoperations/pre-fill2.png)\\n\\n#### Step 3: Before previewing filling side, set default values for context variables  \\n\\nBefore context variables can work, their default values must be set. If you create context variables without also assigning their default values, Composer will prompt you to assign their default values before dialog Preview mode for the filling side can be activated.\\n\\nThe window below will appear when you hit the \\"Preview\\" button. You\'ll be prompted to input the context variable default values.\\n\\n![Entering default values](/advancedoperations/pre-fill3.png)\\n\\n#### Step 4: Replace the variables\' default values with the data you want pre-filled on the filling side\\n\\n![Entering default values](/advancedoperations/pre-fill4.png)\\n\\n#### Step 5: View output on filling side\\n\\n![Entering default values](/advancedoperations/pre-fill5.png)\\n\\n---\\n\\n### Using expression variables to create and execute mathematical functions {#expression-variable-function}\\n\\nIn this example, we create several expression variables which will perform mathematical and logical operations on data that the user inputs on the filling side. \\n\\n#### Step 1: Create form inputs\\n\\nBefore we create our expression variables, let\'s first create the inputs that the expression variables will perform operations on. We will create two inputs of type Integer: `number1` and `number2`.\\n\\n![Fun with numbers](/advancedoperations/fun-with-numbers1.png)\\n\\nPreviewing the filling side gives us this:\\n\\n![Fun with numbers](/advancedoperations/fun-with-numbers2.png)\\n\\n#### Step 2: Write expression variable functions\\n\\nNext, we will create several expressions to perform operations on whatever integer input we get from the filling side.  Keep in mind that **creating an expression variable is almost the same as creating a context variable**:  \\n\\n* In the ID field, write the desired name of the custom function. This is how you will call this function later.\\n* In the Expression field, write the ID(s) of the responses to process with the function as well as the mathematical / logical operators that will be used.\\n* Remember to leave \\"Published\\" unchecked unless your specific implementation requires it be checked.\\n* Expressions can be broken into multiple lines. The reason for this is to increase readability if the expressions grow long.\\n\\nThe expressions we will create are as follows:  \\n\\n| ID                | Expression           |\\n|-------------------|----------------------|\\n| add               | number1 + number2    |\\n| subtract          | number1 - number2    |\\n| multiply          | number1 * number2    |\\n| comboOperation    | (number1 + number2) * (number1 + number2) |\\n| isGreater         | number1 > number2    |\\n| isDifferentNumber | number1 != number2   |\\n\\nAnd in Composer, they look like this:\\n\\n![Fun with numbers](/advancedoperations/fun-with-numbers4.png)\\n\\n**Calling an expression variable** works in the same way as calling a context variable. For this example, we are going to call the expression variables in a note output, where we will be able to view the outcome of their mathematical operations after the user has input integers into the filling side.  \\n\\n#### Step 3: Create a note output into which you can insert your expression variables and view the outcome of your operations\\n\\nCreate a new output type: `note` in your group and enter the following:\\n\\n```markdown\\n\\nThe sum after adding is: {add}.  \\n\\nThe remainder after subtracting is: {subtract}.  \\n\\nThe product after multiplying is: {multiply}.  \\n\\nThe super fun comboOperation result is: {comboOperation}.  \\n\\nIs number1 greater than number2?  {isGreater}.\\n\\nIs number1 a different number than number2?  {isDifferentNumber}.  \\n\\n```\\n\\nDepending on how you laid out your group/input structure, on the Composer side, you should see something like this:\\n\\n![Fun with numbers](/advancedoperations/fun-with-numbers5.png)\\n\\n#### Step 4: Preview and test\\n\\nFinally, hit the Preview button and test your form to see if everything is working correctly.\\n\\n![Fun with numbers](/advancedoperations/fun-with-numbers6.png)\\n\\n**NOTE** A custom variable built using *question input data* becomes active only after all of its questions have been asked!\\nThis means that, for example, the expression variables created above in the previous cannot work until number1 and number2 have been answered on the filling side.\\n"},{"build":{"created":1611921525,"modified":1612767716},"url":"./src/markdown/002_input_and_output_types/000_text.md","name":"002_input_and_output_types/000_text.md","content":"# Text and Text box types\\n\\n## Quick Summary\\n\\n* Text and Text Box both return text (string)\\n* The only difference between them is how they are rendered on the filling side\\n\\n---\\n\\n## Overview  \\n\\nBoth text and text box return text (string) values. There is no length difference between the maximum text length for either of these. \\n\\nThe only difference between them is how they appear on the filling side.\\n\\n* **Text**: A single-line text field\\n* **Text box**: A multi-line text field\\n\\n---\\n\\nOn the Composer side, they both look the same:\\n\\n![Text and Text Box](types/text-textbox1.png)\\n\\n\\nBut on the filling side, the rendering difference is visible:\\n\\n![Text and Text Box](types/text-textbox.png)\\n\\n\\n## Creating a new text response\\n\\n1. Select \\"Add item\\" --\x3e \\"Structure\\" --\x3e \\"Group\\" \\n2. Select \\"Add item\\" --\x3e \\"Inputs\\" --\x3e \\"Text\\" / \\"Text box\\"\\n\\n"},{"build":{"created":1611921525,"modified":1612859514},"url":"./src/markdown/002_input_and_output_types/001_number.md","name":"002_input_and_output_types/001_number.md","content":"# Number type\\n\\n## Quick Summary\\n\\n* Number responses may only be whole numbers\\n* Number return type is `Integer`\\n* Typical validation example can be seen at the bottom of this page\\n\\n---\\n\\n## Overview\\n\\nNumber responses are used in the case where whole numbers are required. Decimal points will be ignored on the filling side so as to provide \\"automatic validation\\" that only whole numbers are entered. See examples:\\n\\n![Number Example](types/number-example.png)\\n\\n---\\n\\n## Creating a new Boolean response\\n\\nCreating a new Number response works in the same way as other types:\\n\\n1. Select \\"Add item\\" --\x3e \\"Structure\\" --\x3e \\"Group\\"\\n2. Select \\"Add item\\" --\x3e \\"Inputs\\" --\x3e \\"Integer\\"\\n\\n---\\n\\n## Typical validation example\\n\\n### Ensuring a number falls within a specified range\\n\\nIn this example, we create a response where the user is required to enter a number between 1 and 10. If a response is not within that range, our validation message will appear. This example shows a situation where the input does not match the validation requirements.\\n\\n**Validation expression**: `answer < 1 or answer > 10`\\n**Another version of a valid expression**: `number1 < 1 or number1 > 10`\\n\\n**Validation message**: \\"Number must be between 1 and 10, and your number doesn\'t fall in this range!\\"\\n\\n**Expected result**: The user is going to enter a response of 15. This will fall outside of the acceptable range and cause the validation message to appear. \\n\\n**Example screenshots**\\n\\nComposer side\\n\\n![Number Validation](types/number-validation1.png)\\n\\n\\nFilling side\\n\\n![Number Validation](types/number-validation2.png)\\n"},{"build":{"created":1611921525,"modified":1612859514},"url":"./src/markdown/002_input_and_output_types/002_decimal.md","name":"002_input_and_output_types/002_decimal.md","content":"# Decimal type TODO\\n\\n## Quick Summary\\n\\n* Decimal responses may be entered as whole numbers and as decimal values\\n* Decimal return type is a decimal number \\n* Typical validation example can be seen at the bottom of this page\\n\\n---\\n\\n## Overview\\n\\nDecimal responses are used in cases where more precision is needed than whole numbers can provide:\\n\\nSee example:\\n\\n![Decimal Example](types/decimal-example.png)\\n\\n---\\n\\n## Creating a new decimal response\\n\\nCreating a new Number response works in the same way as other types:\\n\\n1. Select \\"Add item\\" --\x3e \\"Structure\\" --\x3e \\"Group\\"\\n2. Select \\"Add item\\" --\x3e \\"Inputs\\" --\x3e \\"Decimal\\"\\n\\n---\\n\\n## Typical validation example TODO\\n\\n### Checking that a decimal value is greater than or less than zero\\n\\nIn this example, we are going to validate that a user enters a decimal value greater than zero. If the input is less than or equal to zero, we will trigger a validation message.\\n\\nValidation expression: `answer <= 0`\\nAnother version of a valid expression: `decimal1 <= 0`\\n\\nValidation message: \\"You cannot add 0 or less to your account!\\"\\n\\nExpected result: The user is going to enter a response of -5. This will fall outside of the acceptable range and cause the validation message to appear. \\n\\n**Example screenshots**\\n\\nComposer side\\n\\n![Decimal Validation](types/decimal-validation1.png)\\n\\n\\nFilling side\\n\\n![Decimal Validation](types/decimal-validation2.png)\\n\\n"},{"build":{"created":1611921525,"modified":1612767716},"url":"./src/markdown/002_input_and_output_types/003_boolean.md","name":"002_input_and_output_types/003_boolean.md","content":"# Boolean type TODO\\n\\n## Quick Summary\\n\\n* Boolean is used for yes/no or true/false questions.\\n* Return type will be a boolean value: `true` or `false`. \\n\\n---\\n\\n## Overview\\n\\nBoolean responses are used for true/false situations. When you create a Boolean response, a button will be rendered on the filling side with YES/NO selection options. See example:\\n\\n![Boolean Example](types/boolean-example.png)\\n\\n---\\n\\n## Creating a new Boolean response\\n\\nCreating a new Boolean response works in the same way as other types:\\n\\n1. Select \\"Add item\\" --\x3e \\"Structure\\" --\x3e \\"Group\\"\\n2. Select \\"Add item\\" --\x3e \\"Inputs\\" --\x3e \\"Boolean\\"\\n\\n"},{"build":{"created":1611921525,"modified":1612859514},"url":"./src/markdown/002_input_and_output_types/004_date.md","name":"002_input_and_output_types/004_date.md","content":"# Date type\\n\\n## Quick Summary\\n\\n* Date type creates a date picker on the filling side\\n* Date type returns a date in the format of \u201cyyyy-mm-dd\u201d. See more ISO Date.(LINK)\\n* Two typical validation examples can be seen at the bottom of this page\\n\\n---\\n\\n## Overview\\n\\nDate type creates a date picker in the form of a calendar on the filling side:\\n\\n![date picker](types/date-picker.png)\\n\\n---\\n\\n## Creating a new date response \\n\\n\\nCreating a new Date response works in the same way as other types:\\n\\n1. Select \\"Add item\\" --\x3e \\"Structure\\" --\x3e \\"Group\\"\\n2. Select \\"Add item\\" --\x3e \\"Inputs\\" --\x3e \\"Date\\"\\n\\n---\\n\\n## Two typical validation examples\\n\\n### Example A: A date is not in the past\\n\\nA typical use case for Date type is verification that a user-selected date is **not** in the past. This operation can be accomplished with the `today()` function and the following DEL notation entered into the date response type validation field:\\n\\n`responseId < today()`\\n\\nIn the following case, our response id is `date1`, and the expression is validating whether `date1` is **earlier** than today\'s date:\\n\\n`date1 < today()`\\n\\n![date validation one](types/date-in-past1.png)\\n\\nThis validation expression will trigger our validation message when a user selects a date in 1995:\\n\\n![date validation two](types/date-in-past2.png)\\n\\n\\n### Example B: A date is not in the past, not in the future, and a time limit applies to the situation\\n\\nAnother typical use case builds on the first example. In the context of an insurance claim, we want to ensure three things:\\n\\n1. A user-entered date is not in the past\\n2. The claim data cannot be in the future\\n3. If the incident happened more than 30 days ago, the claim is no longer valid\\n\\n\\n**Validation message**: \\"Incident date cannot be in the future, and incident date cannot be more than 30 days in the past. Please check entered dates for these criteria.\\"  \\n**Validation expression**: `incidentDate > today() or incidentDate < today() -30 days`\\n\\nIn plain language, this Validation expression says   \\n\\n_\\"incidentDate cannot be later than today, and incidentDate cannot be earlier than 30 days before today\\"_\\n\\n**Expected result**: The user is going to enter a date which is more than 30 days in the past. This will trigger the validation message. \\n\\n\\nOn the Composer side:\\n\\n![date validation one](types/date-validation1.png)\\n\\n\\nOn the filling side: \\n\\n![date validation one](types/date-validation2.png)\\n"},{"build":{"created":1611921525,"modified":1612863656},"url":"./src/markdown/002_input_and_output_types/005_choice.md","name":"002_input_and_output_types/005_choice.md","content":"# Choice type\\n\\n## Quick Summary\\n\\n* Choice type functions with an attached list\\n* A Choice return type will be an ID of selected row in the list\\n* It allows users to choose only one option from the list\\n* Creating a Choice and a Multi-choice type follows the same process\\n* Syntax for Choice type logic writing and a typical usage example can be seen at the bottom of this page\\n\\n\\n---\\n\\n## Overview\\n\\nChoice type utilises a global or local list to populate a single-choice selection menu.\\n\\n---\\n\\n### Creating a new choice response \\n\\n\\n**To create a Choice type, follow the steps of creating a multi-choice input type:**\\n\\n1. Create a group to contain your choice response: Select \\"Add item\\" --\x3e \\"Structure\\" --\x3e \\"Group\\"\\n2. Create the choice input item: Select \\"Add item\\" --\x3e \\"Inputs\\" --\x3e \\"Choice\\"\\n3. Create or apply global or local list which will form the individual choice items: Select the hamburger icon in the top right corner of the question window and select \\"Options\\". You will then be given the option to apply a global list or create a local list.\\n\\nBelow is an example of a choice type on the filling side. The choice list has four items, and their associated IDs are `opt1`, `opt2`, `opt3`, `opt4`.\\n\\n![](types/choice1.png)\\n\\n---\\n\\n## Syntax for Choice type logic writing\\n\\nWhen using logic with Choice type, the syntax is as following:\\n\\nWhen matching a single item: `responseId = \\"listItemId\\"`  \\nEvaluates true when the return value of question1 is opt1.\\n\\nWhen matching multiple items: `responseId in (\\"listItemId1\\", \\"listItemId2\\", \\"listItemId3\\")`  \\nThis evaluates true when the return value of question1 is one of the following: opt1, opt3 or opt4 possible *Choice* key values.  \\n\\nWhen matching multiple items: `responseId not in (\\"listItemId1\\", \\"listItemId2\\", \\"listItemId3\\")`  \\nThis evaluates true when the return value of question1 is NOT one of the following opt1, opt3 or opt4 possible *Choice* key values.\\n\\n---\\n\\n## Typical validation example\\n\\nIn this example, we want to evaluate against a single choice option. Depending on this choice, a corresponding note output will be displayed.\\n\\nTo do this, we create a group with a Choice type. The Choice type has a local list attached to it with three values. We have two note outputs. We write visibility rules for the note outputs and set them to be shown depending on which option the user selects from the Choice list.\\n\\n**Note visibility expression**: `list2 = \\"countryside`  \\n\\n**Expected behaviour**: When a client selects \\"Rural Countryside\\" from the Choice list, the Note output visibility rule will be triggered, and note content will be output.\\n\\nOn the Composer side:\\n\\n![Choice example](types/choice-example1.png)\\n\\n\\nOn the filling side:\\n\\n![Choice example](types/choice-example2.png)\\n\\n"},{"build":{"created":1611921525,"modified":1612865885},"url":"./src/markdown/002_input_and_output_types/006_multi-choice.md","name":"002_input_and_output_types/006_multi-choice.md","content":"# Multi-choice type\\n\\n## Quick Summary\\n\\n* Multi-choice type functions with an attached list\\n* A multi-choice return type will be a set of an ID of selected rows from the list\\n* It allows users to choose one or more items from the list\\n* Creating a Choice and a Multi-choice type follows the same process\\n* Syntax for Multi-choice type logic writing and a typical usage example can be seen at the bottom of this page\\n\\n---\\n\\n## Overview  \\n\\nMulti-choice type utilises a global or local list to populate a multiple-choice selection menu.\\n\\nBelow is an example of a multi-choice type on the filling side: \\n\\n\\n![Multi-choice respone example](types/multi-choice-example.png)\\n\\n---\\n\\n## Creating a new multi-choice response\\n\\n\\n**To create a multi-choice response, follow the steps of creating a choice response:**\\n\\n1. Create a group to contain your multi-choice response: Select \\"Add item\\" --\x3e \\"Structure\\" --\x3e \\"Group\\"\\n2. Create the multi-choice input item: Select \\"Add item\\" --\x3e \\"Inputs\\" --\x3e \\"Multi-choice\\"\\n3. Create or apply global or local list which will form the individual multi-choice items: Select the hamburger icon in the top right corner of the question window and select \\"Options\\". You will then be given the option to apply a global list or create a local list.\\n\\n---\\n\\n## Visual guide to creating a multi-choice type\\n\\n* **Create a group to hold your response.**\\n* **Create a multi-choice input.**\\n* **Write your group label and multi-choice label.**\\n\\n![Multi-choice](types/multi-choice1.png)\\n\\n**After creating a group and a multi-choice input, click the hamburger icon in the top right corner of the question window and select `Options`. You will then be given the option to apply a global list or create a local list.**\\n\\n![Multi-choice](types/multi-choice2.png)\\n\\n**Create a list of input items. Add visibility rules if desired.**\\n\\n![Multi-choice](types/multi-choice3.png)\\n\\n**The filling side preview**\\n\\n![Multi-choice](types/multi-choice-after.png)\\n\\n---\\n\\n## Syntax for Multi-choice type logic writing\\n\\nTo write rules to evaluate Multi-choice responses, use the ID of the question you wish to evaluate against, followed by the `in` keyword, and then the ID of the Multi-choice question.\\n\\nExample: `\\"id1\\" in multichoice1`\\n\\nMore examples: \\n\\nWhen matching a single item: `\\"responseId1\\" in multichoiceId1`  \\nEvaluates true when `responseId1` is selected from `multichoiceId1`\\n\\nWhen matching a single item: `\\"responseId1\\" not in multichoiceId1`  \\nEvaluates true when `responseId1` is **not** selected from `multichoiceId1`\\n\\nWhen matching multiple items within the same multi-choice response: `\\"responseId1\\" not in multichoiceId1 or \\"responseId2\\" not in multichoiceId1`  \\nEvaluates true when `responseId1` and `responseId2` are **not** selected from `multichoiceId1`\\n\\n---\\n\\n## Typical validation example\\n\\n### Specifying the number of selections a user must make\\n\\nTo validate/specify the number of choices within a given multi-choice request, use the `count( )` function and create validation logic to fit your needs.  \\n\\nThe example below shows a situation where the user is not permitted to choose nothing, and they are required to select at least two choices. \\n\\nOn the Composer side:\\n\\n![Multi-choice](types/multi-choice-validation.png)\\n\\nOn the filling side, **before** a choice is made:\\n\\n![Multi-choice](types/multi-choice-validation2.png)\\n\\nOn the filling side, **after** the correct number of choices is made:\\n\\n![Multi-choice](types/multi-choice-validation3.png)\\n\\n\\n\\n\\n\\n\\n\\n\\n"},{"build":{"created":1611999392,"modified":1612865885},"url":"./src/markdown/002_input_and_output_types/007_multi-row.md","name":"002_input_and_output_types/007_multi-row.md","content":"# Multi-row type\\n\\n## Quick Summary\\n\\n* Multi-row creates an inline row of any number of input fields\\n* Multi-row response type: TODO\\n* The number of rows in a multi-row element directly corresponds to the number of input fields created.\\n* A visibility-logic example can be seen at the bottom of this page\\n\\n\\n---\\n\\n## Overview\\n\\nMulti-row creates an inline row of any number of input fields. The number of input fields created will determine how many rows the multi-row input will consist of.  \\n\\nBelow is an example of a multi-row input with three input fields.\\n\\n**Composer side**\\n\\n![Multi-row composer side](types/multi-row-composer-example.png)\\n\\n**Filling side**\\n\\nNote the \\"Add new\\" button. This will add as many identical rows as needed.\\n\\n![Multi-row filling side](types/multi-row-filling-example.png)\\n\\n**Filling side after selecting \\"Add new\\" row multiple times.**\\n\\n![Multi-row filling side](types/multi-row-filling-example2.png)\\n\\n\\n---\\n\\n### Creating a multi-row response \\n\\n\\n**To create a multi-row group:**\\n\\n1. Create a multi-row group to contain your response: Select \\"Add item\\" --\x3e \\"Structure\\" --\x3e \\"Multi-row group\\"\\n2. Create the label(name) for the multi-row group, which will serve as the prompt for the user on the filling side.\\n3. Create the input fields: The input fields created here will be the visible fields on the filling side.\\n\\n![Multi-row](types/multirow1.png)\\n\\n---\\n\\n\\n![Multi-row filling side](types/multirow2.png)\\n\\n---\\n\\n## Visibility-logic example\\n\\n### Showing an additional field within a multi-row type depending on a previous answer \\n\\nIn this example, we want to show a particular field within a multi-row item only if the user selects a particular boolean value.\\n\\n* We create a multi-row group with three input fields (two text fields and one boolean). \\n* We write a visibility rule to trigger the visibility of a fourth field (`list1`, a choice menu), if the user answers \\"Yes\\" to `boolean1`. \\n\\nOur items are as follows: \\n\\n`text2`: First Name  \\n`text4`: Last Name  \\n`boolean1`: Do you wish to be added to our mailing list?  \\n\\n...if the user answers \\"yes\\".... then show\\n\\n`list1`: Please select the topic you are most interested in.  \\nVisibility rule: `boolean1 = true`  \\n\\n**Example screenshots**\\n\\nComposer side\\n\\n![Rowgroup visibility](types/rowgroup-visibility1.png)\\n\\nFilling side\\n\\n![Rowgroup visibility](types/rowgroup-visibility2.png)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n"},{"build":{"created":1611921525,"modified":1612866238},"url":"./src/markdown/002_input_and_output_types/008_survey.md","name":"002_input_and_output_types/008_survey.md","content":"# Survey type\\n\\n## Quick Summary\\n\\n* A complete Survey response type is comprised of three parts: Survey group, survey options, and survey inputs\\n* A Survey return type is a key\\n* Survey buttons can be horizontally or vertically arranged\\n* Follow the (visual) guide below to create a Survey response type.\\n* Syntax for Survey type logic writing and a typical usage example can be seen at the bottom of this page\\n\\n---\\n\\n## Overview  \\n\\nSurvey type uses radio buttons to collect input from users. Below is an example:\\n\\n![Survey List Creation](types/survey-filling-side.png)\\n\\n\\nSurvey types function a bit differently than other types.  For example, where a **Text** response type is located within a group which can contain any number of various response types, a **Survey** response type is the group itself. \\n\\n**A complete Survey response type is comprised of three parts:**\\n\\n1. The **survey group**, which can be thought of the \\"question\\" itself.\\n2. The **survey options** which are created with a global or a local list. \\n3. The **survey inputs**, which are text fields. \\n\\nIn summary, one survey group is the equivalent of one survey \\"whole\\" encompassing these three elements. This example below illustrates the three cohesive elements of a Survey response type as they appear on the filling side.\\n\\n![Survey List Creation](types/survey-filling-side-b.png)\\n\\n---\\n\\n## Creating a new survey response\\n\\nA Survey response type is created as a Survey Group or Survey Group (Vertical). \\n\\nTo create a survey:\\n\\n* Click \\"Add item\\"\\n* Select \\"Structure\\"\\n* Select \\"Survey Group\\" or \\"Survey Group (Vertical\\"\\n* Give your survey question a name by writing in the Survey Group label field\\n* Create a global/local list and attach it to the Survey group via the Survey Group-level hamburger icon + \\"Options\\" hamburger.\\n* Create survey inputs by clicking \\"Add item\\" in the bottom left of the Survey Group, and select \\"Survey Item\\". Write your text accordingly.\\n\\nFollow the guide below for screenshots of this process.\\n\\n---\\n\\n## Visual guide to creating a survey group\\n \\n**Click the \\"Add item\\" button and select \\"Structure\\", then \\"Survey Group\\".**\\n\\n![Survey Group](types/survey-group.png)\\n\\n**Next, survey values are needed to populate the Survey group. Create a list (Global or local) which will comprise your inputs.**\\n\\n![Survey List Creation](types/survey-input-list.png)\\n\\n**Next, apply your list of survey values to a survey group**  \\n\\nClick the hamburger icon in the top-right corner of the survey group. Then, select the list you wish to apply.\\n\\n![Survey List Selection](types/select-survey-input-list.png)\\n\\n**After that, create survey inputs by creating a survey input within the survey group**.\\n\\n![Survey List Creation](types/create-survey-input.png)\\n\\n---\\n\\n## Syntax for Survey type logic writing\\n\\nWhen matching a single item:  \\n`question1 = \\"opt1\\"`  \\nEvaluates true when the return value of question1 is opt1.\\n\\nWhen matching multiple items:  \\n`question1 in (\\"opt1\\", \\"opt3\\", \\"opt4\\")`  \\nEvaluates true when the return value of question1 is one of the following: opt1, opt3 or opt5 possible *Survey* key values.\\n\\nWhen matching multiple items:  \\n`question1 not in (\\"opt1\\", \\"opt3\\", \\"opt4\\")`  \\nEvaluates true when the return value of question1 is NOT one of the following: opt1, opt3 or opt4 possible *Survey* key values.\\n\\n## Typical visibility-logic example\\n\\nFor this situation, we create a customer satisfaction survey. If the user indicates via a survey item that a service was \\"poor\\", we want to trigger a text input to appear so that we can collect additional information on how to improve in that area of service.\\n\\nWe create a survey group and three survey inputs:\\n\\n* Friendliness of staff\\n* Response time for service inquiries\\n* Quality of solution to my problem\\n\\nWe create three survey options via a local list. These options describe the quality of service:\\n\\n* `opt1` :  poor\\n* `opt2` :  average\\n* `opt3` :  good\\n\\nWe add a visibility rule to a text field inside the survey group that will appear on the filling side if a user selects `opt1: poor` and to describe \\"Staff Friendliness\\".\\n\\n**Text input**: \\"Please tell us how we can improve our staff friendliness\\"\\n**Visibility rule**: `survey1 = \\"opt1\\"`\\n\\nOn the Composer side:\\n\\n![Survey Example](types/survey-example1.png)\\n\\nOn the filling side:\\n\\n![Survey Example](types/survey-example2.png)\\n\\n"},{"build":{"created":1611921525,"modified":1612786167},"url":"./src/markdown/002_input_and_output_types/009_time.md","name":"002_input_and_output_types/009_time.md","content":"# Time type\\n\\n## Quick Summary\\n\\n* Time type returns a time in the format of \\"hh:mm:ss\\".\\n* Time type appears as a time picker on the filling side.\\n* Example of validating time type can be seen at the bottom of this page.\\n\\n---\\n\\n## Overview  \\n\\nTime type creates a time picker on the filling side:\\n\\n![time picker](types/time-picker.png)\\n\\n---\\n\\n## Creating a new time response\\n\\n1. Select \\"Add item\\" --\x3e \\"Structure\\" --\x3e \\"Group\\" \\n2. Select \\"Add item\\" --\x3e \\"Inputs\\" --\x3e \\"Time\\"\\n\\n\\n## Validating Time type\\n\\nLogical operators can be used to determine the relation of different time values to each other.\\n\\nUsing the \\"less than\\" `<` operator essentially means \\"earlier than\\" in Time type.  The \\"greater than\\" `>` operator essentially means \\"later than\\".\\n\\n\\nFor example:\\n\\nTo check if Time1 is earlier than Time2, use the \\"less than\\" operator: `<` \\n\\n`time1 < time2` \\n\\n\\n\\n\\n\\n\\n"},{"build":{"created":1610128748,"modified":1612767716},"url":"./src/markdown/003_dialob_expression_language:_(DEL)/000_basic_del.md","name":"003_dialob_expression_language:_(DEL)/000_basic_del.md","content":"# Basics of DEL\\n\\n## Quick Summary\\n\\n* DEL expressions resemble traditional grammar and have a subject (Request ID), verb (operator or function), and condition (elements or values to compare against or evaulate against).\\n* DEL reserved words operate similarly to verbs (is answered, is not answered, is valid, etc.) or connecting words (and, or).\\n* Functions are actions. Functions are reserved words followed by parenthesis. The thing you want to perform the action on goes into the parenthesis. Not all functions require inputs in the parenthesis. \\n* A String type is the same as a \\"text\\" type, which includes letters, numbers, and punctuation.\\n* DEL expressions do not end in any punctuation such as full stops or semi-colons.\\n* DEL expressions are if/then statements, where the **if** part is written by the user, and the **then** part is handled and evaluated by Dialob Manager\\n\\n---\\n\\n## Overview: Introduction to Dialob Expression Language (DEL)\\n\\n* **DEL: Dialob Expression Language** was designed for use with Dialob Composer\\n  * It is used to powerfully yet simply define the control logic of online forms. \\n* DEL is continuously enhanced and improved with new features to cover more complex cases and extend its usability to new areas.\\n\\n---\\n\\n### Concepts of DEL in linguistic terms\\n\\nLet\'s think about DEL in terms of simple grammar. All sentences have a subject and a verb.\\n\\nA subject is what the sentence is about.  \\nA verb shows the action in the sentence. \\n\\nLet\'s see an example first:\\n\\n\\"A customer\'s age is at least 21.\\"\\n\\nIn this sentence, _customer_ is the subject, and _is_ is the verb. In Dialob, you will be writing expressions both similar and more complex than this, which will comprise the core of your form logic.  So, let\'s \\"translate\\" this English sentence into DEL to see what it looks like. \\n\\nFor one of our form questions, we need to validate that a customer is at least 21 years of age, because if he/she is younger than 21, we cannot sell certain products. In DEL, you can write this expression as follows:\\n\\n`customerAge >= 21`\\n\\nIn this example, `customerAge` is the Request ID (subject), `>=` is the logical operator (verb), and \\"21\\" is the value that we are to validate against.  We will revisit these terms shortly.\\n\\n### Syntax of a DEL expression: Examples\\n\\nA DEL expression is basically an **If/Then statement**.  The \\"If\\" part is written by the user, and the \\"Then\\" part represents the result of the expression. The \\"then\\" part can evaluate to `true` or `false` based on how the user writes the \\"If\\" part.  For example, here we have two questions. The second question should only appear if the user specifies in the previous question that his/her age is greater than 25. \\n\\n```javascript\\nquestion1:  How old are you?\\nAnswer1: 25\\n\\nquestion2: Are you married?\\nVisibility Rule: question1 > 25 \\n```\\n\\nHere, `question1 < 25` is the \\"if\\" part of the DEL expression. The \\"then\\" part is implied.  **If** the user enters his age as 26, **then** the statement will evaluate to true, and **then** this Question 2 will be displayed. However, **If** the user enters his age as 16, **then** this statement will evaluate to false, and **then** Question 2 will not be displayed.\\n\\n\\nA DEL expression can have several basic parts:\\n\\n* [Request ID](https://docs.dialob.io/dialob-expressions/#what-is-request-id) or reference to a request ID (not required to be used in `Required` fields)\\n* [Logical operator](https://docs.dialob.io/dialob-expressions/basic-del-operators/)\\n* [Reserved word](https://docs.dialob.io/dialob-expressions/del-functions-reserved-words/)\\n* [Function](https://docs.dialob.io/dialob-expressions/del-functions-reserved-words/)\\n\\nIn the following expression, we can see three of these elements:\\n\\n`text1 = \\"happy\\"`  \\n\\n`text1` is the Request ID  \\n`=` is the logical operator  \\n`\\"happy\\"` is the String value we wish to validate against  \\n\\n**NOTE: \\"String\\" is a programming term which means \\"text\\". Text can be any character, including punctuation, letters, and numbers.**\\n\\n`text1` can be thought of as the subject, `=` is the verb (is / is equal to), and `\\"happy\\"` is akin to the condition.\\n\\nLet\'s look at some more examples:\\n\\n`age > 25 and favouriteColour = \\"green\\"`  \\n\\nIn this expression, we have two Request IDs: `age` and `favouriteColour`. There are two logical operators: `>` and `and`.  There are also two predicate expressions: 25 and \\"green\\".\\n\\nThis sentence can be \\"translated\\" into English as the following: \\"**If** age is greater than 25 and favourite color is green, **then**...\\"  \\n\\n### Response types and punctuation\\n\\nIn the examples above, you might have noticed that some elements were surrounded by quotation marks and others were not.  Here is the explanation:\\n\\n**No quotation marks**: If you are referencing a number, there are no quotation marks around the number.\\n\\n`numberOfCats >= 35`  \\n\\n**Quotation marks**: If you are referencing a String (text), the text has to have quotation marks around it.\\n\\n`catName = \\"Tiger\\"`\\n\\n**Referencing a particular selection from a Choice list**: If you want to reference a particular choice that a user selected from a `Choice` drop down list, the ID of the choice must be surrounded with quotation marks and the requestID of the question to which the choice list is attached must be in the beginning of the expression.\\n\\n`question1 = \\"opt1\\"` **Translation**: The selection from question1 must be opt1.\\n\\n**Referencing more than one selection from a Choice list**: If you want to specify more than one predicate (answer), you still need quotation marks around the individual answers, but all of the answers must be grouped and surrounded by parenthesis.  \\n\\n`coloursList = (\\"green\\", \\"orange\\")` **Translation**: The selection from coloursList must be green OR orange.  \\n\\nDEL expressions do not end with any punctuation like full stops or semi-colons.\\n\\nFor more examples of writing DEL expressions with different response types like `Survey`, `Multi-choice`, `Choice`, etc., [click here](https://docs.dialob.io/dialob-response-types/working-with-types/)\\n\\n### Using reserved words\\n\\nReserved words function as \\"verbs\\" in DEL expressions. They will go after the \\"subject\\" of the sentence (Request ID).  \\n\\nHere are some examples:\\n\\n`text1 is answered and text1 is valid` **Translation**: If the question whose ID is text1 has been answered **and** the answer to text1 is valid, then...  \\n\\n`survey4 not in \\"cat\\"` **Translation**: If the user does NOT select \\"cat\\" from the survey question whose ID is survey4, then...\\n\\nThe next example shows a validation rule for multiple selections from a mult-choice list:\\n\\n`carsOwned in (\\"Opel\\", \\"Renault\\", \\"Audi\\")` **Translation**: If the question whose ID is carsOwned has been answered by the user, who selected either Opel, Renault, or Audi....  \\n\\nFor a complete list of the current Dialob reserved words, [click here](https://docs.dialob.io/dialob-expressions/del-functions-reserved-words/#reserved-words)\\n\\n### Using functions\\n\\nFunctions are statements that perform actions. A DEL function is a reserved word followed by parenthesis `( )`.  The word will trigger an action, and this action will be performed on whatever is inside the parenthesis. An example function is as follows:\\n\\n`wash()`  \\n\\n**Translation:** The `( )` show that this is a function (action). However, there is nothing inside the parenthesis for our wash function to actually wash. As it is written, this function will simply wash, but becasue we haven\'t defined what it will wash, it will just wash in a generic sense.  So, let\'s add something to wash.\\n\\n`wash(laundry)`  \\n\\nNow, our function will perform the action of wash on the object of laundry.  Functions in DEL work the same way. Here are some real examples:\\n\\n`lengthOf(text1)`  **Translation**: This function will check the length of the question whose ID is text1.  \\n\\n`lengthOf(text1) > 5` **Translation**: This function will check that the length of text1 is greater than 5 characters.\\n\\nNot all functions need to have anything entered into the parenthesis. For example, the function `now()` will simply fetch the current system time.  \\n\\nFor more information and examples of DEL\'s functions, [click here](https://docs.dialob.io/dialob-expressions/del-functions-reserved-words/#existing-functions)\\n\\n"},{"build":{"created":1610128748,"modified":1612767716},"url":"./src/markdown/003_dialob_expression_language:_(DEL)/001_basic_del_operators.md","name":"003_dialob_expression_language:_(DEL)/001_basic_del_operators.md","content":"# Basic Dialob Expression Language (DEL) operators\\n\\n## Quick Summary\\n\\n* Use operators to write logic rules\\n* DEL comparison operators: `=` , `!=` , `>`, `>=` , `<` , `<=`\\n* DEL keyword-based basic logical operators: `and`, `or`, `in`, `not in`\\n\\n---\\n\\n## Overview\\n\\nOperators are symbols or words used to connect and evaluate two or more expressions to produce a result.  In Dialob, operators are used for writing the various logic rules (validation, visibility, and requirement).\\n\\nDEL utilises several types of operators, including:\\n\\n* Comparison operators\\n* Symbol-based logical operators\\n* Keyword-based logical operators\\n\\n---\\n\\n## Available operators\\n\\nBelow is a description of the basic DEL operators, which includes comparison operators, symbol-based logical operators, and keyword-based basic operators and their corresponding input types.\\n\\n### Comparison Operators\\n\\n* **=**: **Equal to** is valid with all default Response types\\n\\n* **!=**: **Not equal to** is valid with all default Response types\\n\\n* **>**, **<**: **Greater than** and **Less than** are valid with Integer, Decimal, Date and Time Response types\\n\\n* **>=**, **<=**: **Greater than or Equal to**, and **Less than or Equal to** are valid with Integer, Decimal, Date and Time Response types\\n\\n### Basic Logical Operators\\n\\n* **and**: To combine a set of comparisons for evaluation as one entity\\n\\n* **or**: To evaluate a set of comparisons as separate entities\\n\\n* **in**: Checks if a given set of unique key(s) is found in the list to which it is compared. Valid Response types are Choice and Multi-choice\\n\\n* **not in**: Checks if a given set of unique key(s) are found in the list to which it is compared. Valid Response types are Choice and Multi-choice\\n\\n\\n\\n\\n"},{"build":{"created":1612174186,"modified":1612767716},"url":"./src/markdown/003_dialob_expression_language:_(DEL)/002_advanced_del_operators.md","name":"003_dialob_expression_language:_(DEL)/002_advanced_del_operators.md","content":"# Advanced Dialob Expression Language (DEL) operators\\n\\n## Quick Summary\\n\\n* Advanced operators include the keyword phrases `is answered`, and `is valid`\\n  * These two operators produce different behaviours on the filling side\\n\\n---\\n\\n## Overview\\n\\n* **`is answered`**: Checks if a given request has a response.  Useful in cases where visibility of a particular question is based on whether a previous question has been answered on the filling side.\\n\\n* **`is valid`**: A special comparison that checks if all Required and Validation conditions are passed for a given, answered request. `is valid ` can be used in a situation, for example, to define that a particular page, group, or question will not be displayed until all Required and Validation errors have been addressed and will only be displayed **while** the validation and required conditions **are being met.**  \\n\\n---\\n\\n## How are `is valid` and `is answered` different? \\n\\nThe behaviour of these two operators can be seen in how questions are displayed on the filling side. \\n\\n* `is answered` can be used in situations where a request field is to be displayed **only when a response to a previous question is entered, regardless of whether it passes validation rules**, i.e.: _it does not matter if the previous response\'s validation rule has been met._  The question field will remain visible as long as there is some data entered in the previous response field.\\n  * Example: `vatNumber is answered and europeanCountries = \\"germany\\"` will cause a response field to appear as soon as there is some data entered into VAT number field and \\"Germany\\" has been selected from a list.  If VAT number field is deleted by the form filler or \\"Germany\\" is deselected from the list, the response field will also disappear until data is entered again in VAT field and \\"Germany\\" is selected.\\n\\n* `is valid` can be used in situations where a request field will **only** be displayed **while a previous response is currently entered _and_ that response _is currently passing_ all validation rules.** If the response is edited and no longer matches validation rules **or** that response is deleted, the response field with `is valid` in its validation/visibility will disappear. It will only appear again once validation / required rules have been met.\\n  * `vatNumber is valid and list1 = \\"estonia\\"` will cause a response field to appear **only as long as** an entered VAT number is passing validation **and** \\"Estonia\\" is currently selected from a list. If either condition is altered, the field in which this validation/visibility rule is written will disappear until the conditions are met again.\\n\\n"},{"build":{"created":1610525865,"modified":1612787964},"url":"./src/markdown/003_dialob_expression_language:_(DEL)/003_request_ids.md","name":"003_dialob_expression_language:_(DEL)/003_request_ids.md","content":"# Requests IDs and ID-naming rules\\n\\n## Quick Summary\\n\\n* A Request ID is a unique variable name that ensures each Request has a unique identifier across a Dialog session\\n* Requests consist of two parts: Request Type (string, boolean, number, etc.) and meta data (e.g. the question the user will be responding to on the filling side)\\n* DEL is used to write three types of logic rules: validation, visibility, and requirement logic rules\\n* DEL works in combination with Request IDs and logical operators/expressions\\n* There is ONLY one outcome of logic written with elements: True\\n\\n[What is a Request ID?](#what-is-request-id)  \\n[Request IDs and rules for writing them](#request-id-rules)  \\n\\n---\\n\\n## What is a Request ID? {#what-is-request-id}\\n\\nThe main variable used in DEL is a special meta variable called **Request**. A Request is the meta variable used to gather (form user) input defined as **Response**.\\n\\nA Request consists of two parts:\\n\\n* **Request type**: Defines how user input is gathered. For example, a Text type will gather responses by the user in the form of text and return a String, whereas Integer type will gather numbers and return an Integer.  In other words, the request type is the type of data that a question will return; for example, a number, a paragraph, or an address.\\n\\n* **Request meta data**: Contains a hint/rubric/question describing what it wants the form user to do. Examples of a request include prompts such as \\"What is your name?\\" Take a picture\u201d or \u201cSelect from the list\u201d.  This can be thought of as the question prompt for the user to answer. \\n\\nSee example below of a request type, request meta data, and a validation rule:\\n\\n![Response ID and meta data](expressions/request-id-example.png)\\n\\nDEL also allows the defining of variables without binding to a Request, for example, [context variables](https://docs.dialob.io/dialob-variables/), and it also permits the creation of new types of variables.\\n\\n---\\n\\n## Request IDs and rules for writing them {#request-id-rules}\\n\\nRequest IDs (unique variable names) are automatically generated by Dialob Composer to speed up the development process and to ensure that each Request has a unique ID by default. The user can change them as desired, and user-defined Request IDs uniqueness is automatically checked in near real time. Dialob Composer\u2019s built-in ID notation check is based on the following naming conventions:\\n\\n* The request ID must start with letter [a-z,A-Z]\\n* It can be followed by a number [0-9]\\n* It cannot be any reserved name (logical operators, comparison operators etc.)\\n* It must be unique. This is automatically checked by Dialob.\\n* Request IDs are case-sensitive. E.g. _firstname_ is not the same as _Firstname_.\\n* All of the changes to existing Request IDs are automatically updated by Dialob Composer. This ensures that the previously-created control logic with DEL remains correct and up-to-date.\\n\\n"},{"build":{"created":1610128748,"modified":1612787964},"url":"./src/markdown/003_dialob_expression_language:_(DEL)/004_overview-_functions_and_reserved_words.md","name":"003_dialob_expression_language:_(DEL)/004_overview-_functions_and_reserved_words.md","content":"# Overview of Dialob functions and reserved words\\n\\n## Quick Summary\\n\\n* Dialob Expression Language (DEL) comes with built-in functions and keywords to help create form logic\\n\\n---\\n\\n## Overview  \\n\\n* **DEL** comes with a set of inbuilt functions and keywords that help in the creation of dialog logic. \\n  * These functions are built via Java and Groovy and are automatically loaded into the dialog context when creating a new dialog.\\n* **DEL** function library is continuously being improved, and it is possible to extend it.\\n\\n---\\n\\n### Existing DEL functions: \\n\\n* **`today()`**: Gets the system date (where **Dialob Manager** is deployed) in ISO format \\"yyyy-mm-dd\\". Return type is *Date*.  \\n\\n* **`now()`**  Gets the system time (where **Dialob Manager** is deployed) in ISO format \\"hh:mm:ss.sss\\". Return type is *Time*.\\n\\n* **`lengthOf(*Text*)`**: Provides the length of *Text* type. White spaces before and after the response are counted. Return type is *Number*.\\n\\n* **`isLyt(*Text*)`**: Checks if a given input is a valid FI company ID. Format is nnnnnnnn-n (for example, 12345678-3). Return type is *Boolean*.\\n\\n* **`isHetu(*Text*)`**: Validates if given FIN personal ID (Hetu) is valid. The format of ID is ddmmyy-nnnl. Return type is *Boolean*.\\n\\n* **`birthDateFromHetu()`**: Calculates a birthday from FIN personal ID (Hetu). Return type is *Date*.\\n\\n* **`count(*Multi-choice type*)`**: Provides the number of selected items of **Multi-choice** type of request. Return type is *Number*.\\n\\n**NOTE**: Although the list of inbuilt functions can be extended via Java or Groovy, users should consider using service requests instead as an alternative to functions. This especially true in cases where the scope of functions is growing larger and more complex.  \\n\\n---\\n\\n### DEL reserved words summary table\\n\\nThere are three basic categories of reserved words used when writing logic expressions in DEL: **Logic-building**, **time and date**, and **language specification**.\\n\\nLanguage specification follows ISO-639-1 two-character abbreviations. [See list here](https://www.wikimass.com/html/language-code)\\n\\n| Logic-building    |      Time and Date  |  Language       |\\n|-------------------|---------------------|-----------------|\\n|  `and`            |  `day`              | `language = \'\'` |\\n| `answer`          |  `days`             |                 |\\n| `answered`        |  `hour`             |                 |\\n|  `false`          |  `hours`            |                 |\\n| `in`              |  `minute`           |                 |\\n| `is`              |  `minutes`          |                 |\\n| `lengthOf`        |  `now()`            |                 |\\n| `matches`         |  `second`           |                 |\\n| `not`             |  `seconds`          |                 |\\n| `or`              |  `today()`          |                 |\\n| `true`            |  `week`             |                 |\\n| `valid`           |  `weeks`            |                 |\\n|                   |  `year`             |                 |\\n|                   |  `years`            |                 |\\n"},{"build":{"created":1610128748,"modified":1612787964},"url":"./src/markdown/004_logic/000_logic_rules_overview.md","name":"004_logic/000_logic_rules_overview.md","content":"# Introduction to the logic rules of Dialob Expression Language (DEL) \\n\\n## Quick Summary\\n\\n\\n* Dialob has three types of logic rules:\\n  * Validation rules\\n  * Visibility rules\\n  * Requirement rules\\n* The location where you write a rule depends on what type of rule it is\\n \\n---\\n\\n## Overview\\n\\nDEL creates the logic to control the behavior of a dialog via three main control elements (rules): **Visibility**, **Validation**, and **Requirement**.  Combined with Request IDs, DEL logic rules will determine the complexity of the end-user filling experience.\\n\\nThere are three basic types of DEL rules:\\n\\n* **Visibility logic**: Defines if a given form element (unique request, group of requests or set of groups) is available in a given dialog when compared against a set of user inputs.  \\nIn other words, visibility logic can be used to decide whether to show or to hide a certain question or group of questions based on a previous answer: E.g. If a user specifies that his/her age is 15, then visibility rules can be set to hide questions about spousal income, and these will not be asked.\\n\\n* **Required logic**: Defines if a response (user interaction) is required for a given Request. The request must be visible.  \\nRequired logic can be used in situations where, for example, a question about total household income can be required to be answered if a user\'s previous answer indicates that he/she is married and both partners work.  \\n\\n* **Validation logic**: Validates that the user response (user interaction) for a given Request is valid. The request must be visible.\\nThe current state of Required and Validations is also \\"monitored\\" across all visible requests and the online rendering application (UI) is made \\"aware\\" if there are Required and / or Validation violations within a visible set of Requests.  \\n  * As a basic example, validation logic can be used to require a user to answer a question about his/her age with numbers only. If the user enters a short text or series of letters in the \\"age\\" field, the validation logic will catch this mistake and require the user to enter input in the specified correct format: Integer.  Validations are highly-customizable and can be written in a rich and complex manner.\\n  * Validation logic can also be written with Java Regular Expressions\\n\\n**NOTE: There is ONLY one outcome of logic written with elements: True. If the expressions do not evaulate to true, then Visibility, Required, Validation form control elements will do nothing and they will not exist in the form context!**\\n\\n**REMINDER**: _Rules for visibility and requirement are read-only within the question itself. They can be edited by clicking inside a question to make it active and then editing them in the field editor window located at the bottom of the screen. For more information, see_ [Basic Logic Building: Where to write rules](https://docs.dialob.io/dialob-expressions/logic-building/#where)\\n\\n---\\n\\n### Where to write rules {#where}\\n\\nThe type of rule will determine where in Composer you need to write it.\\n\\n* **Visibility Rule**: \\n  * For individual responses, the visibility rule is written directly into the response itself\\n  * For list items, the visibility rule is written at the bottom of the Lists window\\n\\n* **Requirement Rule**: This is written in the rule editor window at the bottom of the Composer screen.\\n\\n* **Validation Rule**: This is written in the rule editor window at the bottom of the Composer screen. \\n\\nTo write Requirement and Validation rules in the editor window, click on the response that you wish to edit. This will make the response the currently active item.  The rule editor at the bottom of the screen will then be populated with the Requirement and Validation rule editing fields. \\n\\nOn the actual response level, Requirement and Validation rules are read-only.\\n\\nSee example:\\n\\n![Rule editor](expressions/rule-editor.png)\\n\\n"},{"build":{"created":1610128748,"modified":1612767716},"url":"./src/markdown/004_logic/001_logic_reserved_words_examples.md","name":"004_logic/001_logic_reserved_words_examples.md","content":"# Logic and reserved words example use cases\\n\\n## Quick Summary\\n\\n* DEL keywords are a powerful and simple way to build logic rules\\n* This page will give several examples of common use cases of keywords in logic-building\\n\\n---\\n\\n## Overview: Keywords in use\\n\\n**DEL** comes with a set of inbuilt functions and keywords that help in the creation of dialog logic. These functions are built via Java and Groovy and are automatically loaded into the dialog context when creating a new dialog.\\n\\nThe following examples feature various logic-building keywords across common use cases and should provide a basic working reference. The examples feature groups of words that are commonly used together.\\n\\n* Example set 1: `answer`, `answered`, `and`, `is`, `valid`, `not`, `or`, `in`, `true`, `false`, `matches`\\n* Example set 2: `true`, `false`\\n* Example set 3: `matches`, `not matches`\\n\\n---\\n\\n## Example set 1: `answer`, `answered`, `and`, `is`, `valid`, `not`, `or`, `in`, `true`, `false`, `matches`\\n\\n`answer`: Refers to the answer of the current question. `answer` can not be used to reference the answer from a different question. \\n\\n![](expressions/answer.png)\\n\\nIn this case, `answer` is referring to the specific answer to `number1`. \\n\\n---\\n\\n`answered`: Refers to the answer of a previous question.  \\n\\n`and`: Used when joining two statements together. Both statements must evaluate to either `true` or `false`\\n\\n`is`: Used in boolean logic calculations involving `answered` and `valid`\\n\\n![](expressions/is-answered2.png)  \\n\\nAnother example:\\n\\n![](expressions/is-answered1.png)  \\n\\n---\\n\\n`valid`: Used when showing/hiding/requiring/validating a field is dependent on a previous input being valid (passes validation rules). Used in combination with `is` and `not`\\n\\n`not`: Used to negate an expression / part of an expression\\n\\n![](expressions/is-valid.png)\\n\\n`or`: Used when specifying one given statement in an expression and excluding the other(s). One of the statements must evaluate differently than the others. \\n\\n**Mini-example A: Visibility using OR**\\n\\nThis rule below specifies `text1` to be visible only if the left or the right side of the visibility rule statement, separated by `or`, returns `true`.\\n\\ntext1: `Who is your current car insurance provider?`\\n\\nVisibility rule: `age > 18 or age is not answered`\\n\\n**Mini-example B: Visibility using OR**\\n\\n![](expressions/or.png)\\n\\n---\\n`in`: Used in combination with `Choice` or `Multi-Choice` type questions.  Evaluates to `true` if the answer(s) it refers to is/are selected from a list.\\n\\n![](expressions/in.png)\\n\\n---\\n\\n## Example set 2: `true`, `false`\\n\\n`true` and `false` are used in evaluating boolean logic statements. They are preceeded by `=` or `!=` operator.\\n\\n**Mini-example A: Visibility rule**\\n\\nA following question will be displayed if the answer to isHappy is yes (true)\\n\\n_Question 1_: `Are you happy? Select \'yes\' or \'no.\'`  \\n_Answer evaluation_: `isHappy = true`\\n\\n_Question 2_: `You are happy. You may continue with the survey.`  \\n`Please explain what makes you happy.`\\n\\n**Mini-example B: Validation rule**\\n\\nA question will not pass validation if the answer is false  \\n\\n_Question 1_: `You must be 25 or older to participate. Are you 25 or older?`  \\n_Answer evaluation_: `answer != true`  \\n\\n_Question 2_: `How did you hear about this competition?`\\n\\n---\\n\\n## Example set 3: `matches`, `not matches`\\n\\n`matches`: Used when matching an input against a formula to see whether they are the same. Used in Regular Expression validations/visibility rules.\\n\\nThe following example shows a Java regex which validates that an input matches a date format (YYYY-MM-DD) and that if the month is April, June, September, or November, the input should match for between 1 and 30 days:\\n\\n![](expressions/matches.png)\\n\\n**NOTE**: Why is the validation written as `answer not matches` if we are trying to use a regex to match a pattern?  \\n\\nWhen using validations, the logic works opposite to visibility and required logic.  Validations can be thought of as \\"Answer CANNOT be\\" whereas visibility and requirement can be thought of as \\"Answer MUST be\\".\\n"},{"build":{"created":1610128748,"modified":1612767716},"url":"./src/markdown/004_logic/002_language_keywords.md","name":"004_logic/002_language_keywords.md","content":"# Language Keywords  TODO\\n\\n## Quick Summary\\n\\n* Dialob Expression Language (DEL) comes with built-in functions and keywords to help create form logic\\n\\n---\\n\\n## Overview  \\n\\nIt is possible to show and/or hide different language fields and note outputs on the filling side based on the currently active language of a filling session. For example, you may want certain inputs to appear based on the form user\'s active language: If a client is using the English version of a form, but the client\'s active language is Finnish, it is possible to set outputs to appear, in Finnish. These Finnish outputs will only appear for Finnish-language users of this form and will be invisible to everyone else.\\n\\n\\n?? TODO\\nUsing the ISO 639-1 standard, two-character language codes can be specified, which store the language that the current Dialob session is using. The `language` keyword can be used to write logic rules based on language. A list of two-character language codes [can be found here](https://www.wikimass.com/html/language-code).\\n\\n\\n---\\n\\nIn DEL, a language is designated with the keyword `language` followed by **equal to** `=` operator  or **not equal to** `!=` operator and completed with the two-character abbreviation.\\n\\nExample:\\n\\n`language = \'xx\'`\\n\\nLanguage specification is written into the visibility or required fields as an expression seen below:\\n\\n`language = \'fi\'` (Language is Finnish)  \\n`language != \'en\'` (Language is not English)\\n\\n**Example**\\n\\nA form has two languages for the filling side: Finnish and English, depending on the client/user needs. Depending on the currently-displayed language of the form, note outputs will appear in Finnish or English.\\n\\n![](logic/language-fi.png)\\n\\nOn the filling side, the note specified to appear if the form language is set to Finnish is displayed.\\n\\n![](logic/languages-visibility.png)"},{"build":{"created":1610128748,"modified":1612767716},"url":"./src/markdown/004_logic/003_time_and_date_keywords.md","name":"004_logic/003_time_and_date_keywords.md","content":"**Time and date keywords** can be used to write logic connected to the following:\\n\\n* [**Time durations**](#time) (time in hours, minutes, seconds)\\n* [**Date periods**](#date) (time in months, days, years)\\n\\n\\n**Time and date functions** can be used to return the system time and date to write logic in connection with the current time and date.\\n\\nThe `today()` function returns the system date in MM/DD/YY format.  \\nThe `now()` function returns the system time in 12-hour format (hh:mm AM/PM): For example 8:58 AM.\\n\\n#### Time and date keywords and functions overview table {#time-date}\\n\\n| Time in Years, Months, Weeks, Days    |  Time in Hours, Minutes, Seconds  |\\n|---------------------------------------|-----------------------------------|\\n| `day`                                 |  `hour`                           |\\n| `days`                                |  `hours`                          |\\n| `week`                                |  `minute`                         |\\n| `weeks`                               |  `minutes`                        |\\n| `year`                                |  `second`                         |\\n| `years`                               |  `seconds`                        |\\n| `today()`                             |  `now()`                          |\\n\\n\\n\x3c!--For example use cases, see [Working With Response Types and Structures](/content/response-types/working-with-types.md)--\x3e\\n---\\n\\n#### _Time_ type reserved words {#time}\\n\\nTime type reserved keywords work in the same way as Date type reserved words; accordingly, they can be used for the following functionalities:\\n\\n* Calculating and returning a duration of a time period between times in hours, minutes, and seconds\\n\\n* Building logic to perform mathematical operations on time such as adding time in hours or subtracting time in minutes\\n\\n* Building logic to validate that one time is earlier or later than another time\\n\\nDate type words are frequently used in combination with the `now()` function.\\n\\n**Basic operations**:  \\n\\n* [Time] **-** or **+** [Time] => [Duration]. Outcome is in the format \\"PT**hh**H**mm**M**ss**S\\" , \\"PT12H34M55S\\" where:\\n  * **P** marks that this is a period of time\\n  * **T** marks that the type of period is time\\n  * **hh** is the difference in hours\\n  * **mm** is the difference in minutes\\n  * **ss** is the difference in seconds\\n\\n* [Time] **-** or **+** [Duration] => [time]. The outcome of time format is \\"hh:mm:ss\\"\\n\\nFor example, the following will return the difference between two times, `time1` and `time2`, in Hours, Minutes, and Seconds in the PT**hh**H**mm**M**ss**S format:\\n\\n**Expression variable ID**: `{durationOfWorkday}`  \\n**Expression variable value**: `time2 - time1`  \\n**Times used for comparison**: `time1 = 08:00` and `time2 = 17:15`  \\n**Note output text**: `Your workday is {durationOfWorkday} long.`  \\n**Return**: `Your workday is PT9H15M long.`\\n\\n*In other words, this return value says that the time difference between time1 and time2 is a **Period** of **Time** of 9 **H**ours, 15 **M**inutes.*\\n\\n**Time duration** can be used also to build logic with the following notation:  \\n`8 hours + 30 minutes + 22 seconds`\\n\\nUsing **Time** type examples:\\n\\n`question1 > \\"05:00\\"`  \\nIs true if *question1* is later than \\"05:00\\" (5 am).\\n\\n`question1 + 2 hours + 30 minutes > \\"18:30\\"`  \\nIs true if *question1* is no earlier than \\"17:00\\".\\n\\n**Example 3**: Checking one time against another time, validating that one is later than the other by a certain number of hours and minutes.\\n\\n---\\n\\n#### _Date_ type reserved words {#date}\\n\\nDate type reserved keywords can be used for the following functionalities:\\n\\n* Calculating and returning a duration of a time period between dates in years, months, and/or days\\n\\n* Building logic to perform mathematical operations on dates such as adding time in months or subtracting time in days\\n\\n* Building logic to validate that one date is earlier or later than another date\\n\\nDate type words are frequently used in combination with the `today()` function.\\n\\n##### Calculating date periods\\n\\n**Basic operations**:  \\n\\n* [Date] **-** or **+** [Date] => [Period]. The period format is \\"P**y**Y**m**M**d**D\\" where:\\n\\n  * **P** marks that this type is a period of time\\n  * **y** is the difference in years  \\n  * **m** is the difference in months\\n  * **d** is the difference in days\\n\\n* [Date] **-** or **+** [Period] => [Date]. Outcome is in the format \\"yyyy-mm-dd\\".\\n\\nFor example, the following will return the difference between two dates, `date1` and `date2`, in Years, Months, and Days in the P**y**Y**m**M**d**D format:\\n\\n**Expression variable ID**: `{timeDifference}`  \\n**Expression variable value**: `date2 - date1`  \\n**Dates used for comparison**: `date1 = 05/11/2005` and `date2 = 10/24/2020`  \\n**Note output text**: `The time difference between date1 and date2 is {timeDifference}`  \\n**Return**: `The time difference between date1 and date2 is P15Y5M13D`\\n\\n*In other words, this return value says that the time difference between these two dates is a **Period** of 15 **Y**ears, 5 **M**onths, and 13 **D**ays.*\\n\\n##### Building logic to add or subtract years, months, or days\\n\\n**Date period** can also be used to build logic with the following notation:  \\n `1 years + 3 months + 14 days`\\n\\n##### Validating that one date has occured before or after another date\\n\\n`question1 > \\"2005-01-01\\" `  \\nIs true if question1 is later than the 1st of January, 2005.\\n\\n`question1 + 4 years < \\"2005-01-01\\" `  \\nIs true if *question1 + 4 years* is earlier than the 1st of January, 2005.  \\n\\nFor example, if the answer to `question1` is \\"2000-01-01\\", then this would evaluate to true, as `question1 + 4 years`  would evaluate to \\"2004-01-01\\", which is earlier than \\"2005-01-01\\".\\n\\n`question1  - \\"2005-01-01\\" > 1 year + 2 months + 10 days`  \\nIs true if *question1* is later than \\"2006-03-12\\".\\n\\n`question1  in (\\"2005-01-01\\",  \\"2006-01-01\\", 2007-01-01\\")`  \\nIs true if *question1* is one of following dates: \\"2005-01-01\\", \\"2006-01-01\\" or \\"2007-01-01\\".\\n\\n**Example 1**: Validating that, as of today\'s date, a client\'s age is at least 18 years old.\\n\\n1. Add a new date input to capture client\'s birthdate.\\n2. Create expression variable for output: `today() > date3 + 18 years`. This will trigger the validation message if the client\'s date of birth is 18 years earlier than today\'s date.\\n3. Add an output `note` and insert the expression variable along with some contextual information:\\n\\n```markdown\\nCustomer birthdate is {date3}\\n\\nCustomer must be at least 18 years old to purchase this product.\\n\\nPossibility to sell product to this customer is {isOver18}.\\n```\\n\\n4. Preview behviour on filling side\\n\\n![date expression variable](/images/date-expression-variable2.png)\\n\\n![date expression variable](/images/date-expression-variable1.png)\\n\\n**Example 2**: Validating that an entered date is both in the past and one day ago (checking for yesterday\'s date)\\n\\n1. Create two inputs of type `Date`. date1 is for today\'s date, date2 is for yesterday\'s date.\\n2. Write your validation rule and validation message in date2.\\n\\n**Validation message**: \\"Yesterday\'s date must be in the past, and it can only be one day ago!\\"  \\n**Validation rule**: `date2 <= date1 or date2 - date1 != 1 day`  \\n\\n3. Preview and test.\\n\\n![Date validation](/images/date-validation.png)\\n\\nForm preview\\n![Date validation](/images/date-validation2.png)\\n\\n---\\n"},{"build":{"created":1610128748,"modified":1612767716},"url":"./src/markdown/004_logic/004_regular_expressions.md","name":"004_logic/004_regular_expressions.md","content":"# Regular Expressions in validation and visibility logic\\n\\n## Quick Summary\\n\\n* Regex format in a logic rule is as follows:\\n  * `answer not matches \\"regex\\"`\\n  * `answer matches \\"regex\\"` \\n* Dialob supports Java Regex in any variable, validation, or visibility rule.\\n* Regex can evaluate only the structure of Strings, Numbers, Dates, etc., but they cannot ensure that this data is factually valid.\\n* Validation logic must evaluate to true in order to make validation message appear on the filling side. \\n  * Write helpful validation messages to assist users in correcting their input if it doesn\'t match the Regex-stipulated format\\n\\n[Java regular expressions and Dialob](#java-regex)  \\n[Notes before you start using Regex](#input-regex)  \\n[Important notes to remember about writing validations with regex](#important-notes)  \\n[Example use cases](#use-cases)  \\n[Validating regex against out-of-scope answers](#out-of-scope) \\n\\n---\\n\\n## Overview\\n\\n### Java regular expressions and Dialob {#java-regex}\\n\\nDialob supports the use of Java regular expressions (regex) in any variable and any validation or visibility rule. Using regex, form creators can write simple or complex rules to validate user inputs against any array of requirements so as to ensure accurate recording of entered data by the end-user on the filling side.  \\n\\n**NOTE**: It is important to remember that regular expressions can validate the *structure* of Strings, Numbers, Dates, etc., but they cannot ensure that this data is factually valid. For example, a regex can ensure that a user\'s ID number is of the correct format for a given country but it cannot check that this ID number is active or real.\\n\\nFor more information on regular expressions: [Wikipedia](https://en.wikipedia.org/wiki/Regular_expression)  \\nFor Oracle Java regular expression patterns: [Oracle Documentation](https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html)\\n\\n---\\n\\n### Notes before you start using Regex {#input-regex}\\n\\n* **Preface Regex with keywords**: In the `Validation Rule` or `Visibility` field, write the following Dialob keywords _first_ : `answer matches` or `answer not matches`. Your Regex will then come _after_ these.\\n\\n* **Ensure rule evaluates to true**: If a response field should be shown based on a previous answer, the rule must be written to evaluate to `true`. Keep in mind that validation messages will only appear on the filling side when a validation rule returns `true`. Therefore, if a form creator wishes the validation message to appear when the user enters incorrect information, validations must be written in a way so as to return true (i.e. `true` produces the validation message, `false` does not).  \\n\\n* **Remember to create a validation message**: The validation message field appears above the validation rule field. The validation message is helpful for the end user on the filling side, as it can be used to give additional information to the user to assist in completing a response accurately (if a user entered data in the wrong format, for example, the validation message can alert him/her to this).  For example, on the filling side, if a response requires that a user enter his/her VAT number, the validation message can be set to appear if the VAT number is entered in an incorrect format. The message will inform the user that the data entered is incorrect and provide a model for him/her to follow to ensure that the response fulfils the validation rule for VAT number format.  \\n\\n\\n### How to create a helpful validation message and ensure it appears when you need it\\n\\n**Question:** `Are you older than 25? Only those 25 and older may participate.`  \\n\\n**Validation Message:** `\\"Sorry, you must be 25 or older!\\"`  \\n\\n**Validation:** `answer > 25`\\n\\n_Validation message is triggered._\\n\\nIf the user enters that his age is 50, the validation will evaluate to true, and the validation message will appear, which is clearly not what we want. We want the validation message to appear only if the user\'s age is under 25, so we need to write the validation in a way that it will evaluate to `true`, given this situation.\\n\\nTo make the validation message appear if a user enters an age less than 25, we need to write the validation in this way:\\n\\n`answer < 25`  \\n\\nIn this way, if a user enters his age is 18, and because 18 is less than 25, the validation will evaluate to true, and the message will appear, alerting the user that his age is under the threshold.\\n\\n### Important notes to remember about writing validations with regex {#important-notes}\\n\\n* `answer not matches` will produce a validation which will return false when the regex matches the input. A return of false will cause the validation message **_not to appear_**.\\n\\n* `answer matches` will produce a validation which will return true when the regex matches the input. A return of true will cause the validation message to appear.  \\n\\n* `answer` refers to the user response which is only in scope of the current selected question.  \\n  * When using regex, it will be very commonplace to need to refer to an `answer` which is out of scope of the regex itself. To access and work with a different variable, simply use that variable\'s ID in place of `answer`. For example, instead of `answer not matches \\"XXX\\"`, write `text2 not matches \\"XXX\\"`.\\n* Regex must be surrounded by quotation marks \\" \\" as in this example: `answer not matches \\"xxxxxx\\"`\\n\\n---\\n\\n## How to input Regex into Composer with example use cases {#use-cases}\\n\\n* [Estonian VAT number validation](#estonian-vat)\\n\\n* [Finnish ID number validation](#id-number)\\n\\n* [Phone number validation](#phone-number)\\n\\n* [Email address validation](#email)\\n\\n---\\n\\n### Estonian VAT number validation {#estonian-vat}\\n\\n**_Example Use Case:_** A form requires that a user input an Estonian VAT number.  \\n\\nThe following regex will check that\\n\\n* The VAT number entered on the filling side is a correctly formatted Estonian VAT number, which takes the format EE123456789 (EE followed by 9 digits).\\n\\n`answer not matches \\"^(EE)?[0-9]{9}\\"`\\n\\n#### Composer side\\n\\n![Estonia VAT Validation Composer Side](logic/estonia-vat-validation.png)  \\n\\n#### Filling side\\n\\n![Estonia VAT Validation Composer Side](logic/estonia-vat-validation-filling-side.png)  \\n\\n**NOTE on writing visibility rules**: If a response field should be shown based on a previous answer, the visibility rule must be written to evaluate to `true`.  \\n\\n---\\n\\n### Finnish identification number validation {#id-number}\\n\\n**_Example Use Case_** A form requires a user to input a national identification / social security number because the user specified that he/she is a Finnish citizen.  \\n\\nThe following regex will validate  \\n\\n* The user input a properly formatted Finnish social security number\\n\\n`answer not matches \\"(\\\\d{2})(\\\\d{2})(\\\\d{2})([+-A])\\\\d{3}[0-9A-Z]\\"`  \\n\\nNext, Composer will validate that the user-entered social security number is of a valid format and match it against the user-specified citizenship (Finnish) which was selected in the previous question.\\n\\n#### Composer side  \\n\\n![Finnish social security number](logic/national-id.png)\\n\\n#### Filling side\\n\\n![Finnish social security number filling side](logic/national-id-filling-side.png) \\n\\n---  \\n\\n### Phone number validation {#phone-number}\\n\\n**Validating an international number**: The following regex will check that\\n\\n**_Example Use Case_:** A form requires that a user input an international phone number. \\n\\n* The phone number follows [E.123 standards](https://en.wikipedia.org/wiki/E.123) for international telephone number notation\\n  * The number is preceeded by a + sign to denote country code\\n  * The country code is followed by telephone number\\n  * Spaces should separate the country code, area code, and local number\\n\\n`answer not matches \\"^\\\\+(?:[0-9] ?){6,14}[0-9]\\"`\\n\\n**Validating a United States number**: The following regex will check that\\n\\n* The phone number is a valid United States format\\n* The number format matches any of these possibilities:\\n  * 1234567890\\n  * 123-456-7890\\n  * 123.456.7890\\n  * 123 456 7890\\n  * (123) 456 7890\\n\\n`answer not matches \\"^\\\\(?([0-9]{3})\\\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})\\"`\\n\\n**Validating that a country code matches a particular country**: The following regex will check that\\n\\n* The user entered a three-digit country code\\n\\n`answer not matches \\"\\\\d{3}\\"`\\n\\nNext, Composer will check that the country code provided matches the country of residence that the user previously specified. For this example, Dialob has been configured to match the country code of Estonia (372).\\n\\n#### Composer side \\n\\n![Country Code Validation](logic/country-code-validation.png)  \\n\\n#### Filling side  \\n\\n![Country Code on Filling Side](logic/country-code-filling-side.png)\\n\\n---\\n\\n### Email address validation {#email}\\n\\n**_Example Use Case:_** A form requires that a user input his/her email address, and the format of the email must be correct to ensure that it is of a valid format before attempting to send an email there.  \\n\\nThe following regex will check that  \\n\\n* The domain name includes at least one dot  \\n* The part of the domain name after the last dot consists of only letters  \\n* The domain must consist of two levels (i.e. secondLevel.com or secondLevel.thirdLevel.com)  \\n* The top-level domain must consist of two to six letters (A good example is country-specific domain names: .uk, .ee, .us)  \\n* Generic top-level domains have between three (.com) and six (.happy) letters  \\n\\n``answer not matches \\"^(?i)^[\\\\w!#%&\'*+/=?`{|}~^-]+(?:\\\\.[\\\\w!#%&\'*+/=?`{|}~^-]+)*@(?:[A-Z0-9-]+\\\\.)+[A-Z]{2,6}\\"``\\n\\n**Composer side**\\n\\n![Email validation](logic/email-validation.png)\\n\\n**Filling side**\\n\\n![Email validation](logic/email-validation-filling-side.png)\\n\\n---\\n\\n### Validating regex against out-of-scope answers {#out-of-scope}\\n\\nIt is easy to validate regex against previous inputs. Simply replace `answer` with the ID of the question you wish to validate against, then adjust your logic accordingly.  \\n\\nIn this example, we are validating that two user-input emails match.\\n\\n![Email validation](logic/email-match1.png)\\n![Email validation](logic/email-match2.png)\\n![Email validation](logic/email-match3.png)\\n"},{"build":{"created":1610445169,"modified":1612767716},"url":"./src/markdown/004_logic/005_validation.md","name":"004_logic/005_validation.md","content":"# Validation Rules\\n\\n## Quick Summary\\n\\n* Validation rules ensure that filling side data matches stipulated requirements. \\n* Validations can be thought of as \u201cAnswer CANNOT be\u201d whereas visibility and requirement can be thought of as \u201cAnswer MUST be\u201d.\\n* Validation rules should be accompanied by Validation Messages, which are short texts providing additional information to users on the filling side, either to give additional information on certain questions or to help them fix any errors that don\'t pass validation.\\n* To make a validation message appear to the user on the filling side, the DEL rule must evaluate to `TRUE`\\n\\n---\\n\\n## Overview\\n\\nValidation rules ensure that the data recorded on the filling side matches the requirements. Dialob matches the filling side data against the validation rule written on the Composer side, and if there is a discrepancy, a validation message will appear and alert the user.  \\n\\nValidation Messages are short texts providing additional information to users on the filling side, either to give additional information on certain questions or to help them fix any errors that don\'t pass validation. By default, these messages are blank in Composer. If you do not write a validation message and the user input doesn\'t pass validation for that particular question, an empty red text field will appear on the filling side because no actual text was specified or written. For that reason, it is a good idea to write clear validation messages when you write a validation rule, as these two things go hand-in-hand. \\n\\nValidation messages appear on the filling side when they are triggered by a validation rule\'s evaluation: That is, when a validation rule evaluates to TRUE, the message will appear. \\n\\nValidation rules are edited directly within the active question. They are not editable within the editor window at the bottom of the screen.\\n\\n\\nSee examples:\\n\\n**Validation rule and message on the Composer side:**\\n\\n![Validation on Composer side](logic/validation-composer-side.png)\\n\\n**Validation rule and message on the filling side with message:**\\n\\n![Validation on filling side](logic/validation-filling-side1.png)\\n\\n**Validation rule and message on the filling side without message:**\\n\\n![Validation on filling side](logic/validation-filling-side2.png)\\n\\n---\\n\\n### Evaluation of Validation rules\\n\\nTo make a validation message appear to the user on the filling side, the DEL rule must evaluate to `TRUE`.  Therefore, the logic works opposite to visibility and required logic. Validations can be thought of as \u201cAnswer CANNOT be\u201d whereas visibility and requirement can be thought of as \u201cAnswer MUST be\u201d.\\n\\n**In other words, an evaluation of `TRUE` triggers the validation message and prevents the user from continuing to the next page of the form, whereas `FALSE` will not trigger the message and will allow the user to continue filling the form.**\\n\\nSee these examples below:  \\n\\n![Personal code validation length](logic/personal-code-validation.png)\\n![Personal code validation length](logic/personal-code-validation2.png)\\n\\nFor examples of validations with Regex, see [this section](https://docs.dialob.io/introduction/regular-expressions/#input-regex)"},{"build":{"created":1612178716,"modified":1612767716},"url":"./src/markdown/004_logic/006_visibility_and_required.md","name":"004_logic/006_visibility_and_required.md","content":"# Visibility and Requirement Rules\\n\\n## Quick Summary\\n\\n* Visibility rules determine when and if a particular question is shown on the filling side.\\n* Requirement rules determine whether a question must be answered before proceeding to the next page or completing the form.\\n* Each page, group, list item, and question can have maximum of **one** visibility rule.\\n* Each page, group, list item, and question can have **multiple** requirement rules.\\n\\n---\\n\\n## Overview\\n\\n**Visibility rules** determine when and if a particular question is shown on the filling side. What determines this is usually based on the answer to a previous question.  For example, if a user selects \\"other\\" from a drop-down list, a subsequent text field can be made to appear for collecting additional information.\\n\\n**Each page, group, list item, and question can have up to one visibility rule each.**\\n\\n**Requirement rules** determine whether a question must be answered before proceeding to the next page or completing the form.  Requirement rules have a default value of `false`, which means that the question is not required to be answered.  Simply writing `true` in the Requirement field is enough to make it universally required without dependency on any other question.\\n\\n**Each page, group, and question can have multiple requirement rules.**\\n\\nVisibility and Requirement rules are written into the rule editor at the bottom of the screen or window.\\n\\nVisibility and Requirement rules cannot be edited within the question itself as these fields are \\"read-only\\" within the question: The editor window at the bottom of the Composer screen must be used.  The rule editor will display the fields of the currently active question.\\n\\n---\\n\\n### Evaluation of Visibility and Requirement rules\\n\\nWhen considering how to write visibility and requirement rules to be triggered at the appropriate times, think of their evaluation in terms of \u201cAnswer MUST be\u201d.  See these examples below:\\n\\n1. To trigger `text2` visibility, the answer to `boolean1` MUST BE true.\\n\\n![Writing visibility](logic/visibility-rule1.png)\\n\\n2. To make `text2` visible AND required, the answer to `boolean1` MUST BE true.\\n\\n![Writing visibility](logic/visibility-rule2.png)\\n\\n**To write a visibility or requirement rule for an active question, use the rule editor window at the bottom of the screen.**\\n\\n![Writing logic](logic/writing-logic1.png)\\n\\n**To write a visibility rule for a list item, use the \\"eye\\" icon next to the list item ID in the Global List modal.**\\n\\n![Writing logic](logic/list-visibility1.png)\\n\\n**To write a requirement rule for an active question, use the editor window at the bottom of the screen.**\\n\\n![Boolean and Visibility](logic/required-rule1.png)\\n\\nIn this case, text2 will only be a required field if the response to boolean1 in the previous field is `true`. "},{"build":{"created":1611921525,"modified":1612767716},"url":"./src/markdown/005_options_and_settings/000_introduction.md","name":"005_options_and_settings/000_introduction.md","content":"# Introduction to Options and Settings\\n\\n## Quick Summary\\n\\n* Dialog options allow the modification of general information.\\n* Element options provide metadata and/or style classes to individual form elements.\\n\\n---\\n\\n## Overview\\n\\nSettings provide various metadata to the form and the form elements. \\n\\n---\\n\\n### Dialog options: Form metadata\\n\\nView and modify general information such as form name, number and types of elements in the form, submit URL, form creation date and last save date, etc.\\n\\n[Jump to General Dialog Options](https://docs.dialob.io/element-options/general-options)\\n\\n### Form element options\\n\\nProvide additional metadata and/or style classes to the individual form elements: Group and Question.\\n\\n[Jump to Element Options](https://docs.dialob.io/element-options/element-options)\\n"},{"build":{"created":1611921525,"modified":1612767716},"url":"./src/markdown/005_options_and_settings/001_dialog_options.md","name":"005_options_and_settings/001_dialog_options.md","content":"# Dialog Options\\n\\n## Quick Summary\\n\\n* Access Dialog options by clicking on the \\"Options\\" button in the Composer upper menu\\n* Dialog options give you an overview of basic form data and several globally-applicable visibility and requirement options\\n\\n---\\n\\n## Overview  \\n\\nThe Dialog options give you \\n\\n* An overview of basic form data\\n* General visibility and requirement options that can be applied globally to all questions\\n\\nDialog options can be accessed by clicking the Options button on the top menu bar.\\n\\n![Accessing Dialog Options](optionsandsettings/menu-bar.png)\\n\\n---\\n\\n#### Options tab\\n\\n![General Dialog Options](optionsandsettings/dialog-options1.png)\\n\\n##### Dialog name\\n\\nA String representing your form\'s name, not technical ID. This can be changed at any time.\\n\\n##### Labels\\n\\nFor grouping and filtering purposes, you can create arbitrary labels for your forms.  This can be used to filter by label when you request a list of forms or to identify which forms belong to which application if you have several applications using the same Dialob backend.\\n\\n##### Default submit URL\\n\\nThis is where completed session data is POST-ed in JSON format.\\n\\n##### Question visibility during filling\\n\\nThis drop-down gives you multiple global options to apply to your questions.\\n\\n* **Show only active questions:** Only information about active elements is sent to filling side (default). For example, elements with visibility rules dependent on previous elements will not appear, as they are not active until their dependent questions are answered.\\n\\n* **Show inactive pages:** Information about inactive pages is sent to filling side, which is useful for navigation features.  \\n\\n* **Show all questions:** Information about all elements is sent to filling side, which is useful for debugging reasons.\\n\\n* **All answers required by default:**  Sets a global \\"required\\" rule across all questions. A Dialog cannot be completed until all questions have been answered. To make an exception to this rule for individual questions, write a requirement rule that returns `false` for each excepted question.\\n\\n---\\n\\n#### Information Tab\\n\\n![General Dialog Options](optionsandsettings/dialog-options3.png)\\n\\nThis tab gives you the following information:\\n\\n* **ID:** The session ID\\n* **Technical name:** The unique ID of this form. It is automatically set upon creating a new form, and it cannot be changed.\\n* **Created:** The date/time of when this form was created.\\n* **Last saved:** The date/time of the last save. The save action takes place upon **every change**, even if it is not immediately reflected in this field.\\n* **Stats:** General information about the elements in the form.\\n  * **Items:** The sum of active and inactive questions in this form.\\n  * **Lists:** The total number of lists in this form, whether or not they have been applied to questions.\\n  * **Variables:** The sum of active and inactive context and expression variables in this form.\\n"},{"build":{"created":1611921525,"modified":1612767716},"url":"./src/markdown/005_options_and_settings/002_element_styling_options.md","name":"005_options_and_settings/002_element_styling_options.md","content":"# Element Styling Options\\n\\n## Quick Summary\\n\\n* Note outputs and description fields (group description / question level help text) can be styled with Markdown\\n* Use the eye icon to toggle between the editor and preview when editing with Markdown\\n* The description field can be used at the group level or at the question level\\n* **Only CSS classes that have already been specified and predefined by your organisation are available for use.**\\n\\n[Styling with Markdown](#markdown)  \\n[Description](#description)  \\n[Style classes](#style-classes)  \\n[Properties](#properties)  \\n\\n---\\n\\n## Overview\\n\\nDialob is set up to give you a range of out-of-the-box customisation options for specifying the look and feel of the filling side; for example, creating custom layouts, customising colors, fonts, input buttons, and much more.  These features are accessed via the `Options` menu on the element level. \\n\\nAccess `Options` via the hamburger icon at the top right of the element.  \\n\\n![Accessing Element Options Modal](optionsandsettings/options-menu1.png)\\n\\nThe `Options` window contains three basic items: **Description, Style Classes,** and **Properties.**\\n\\n---\\n\\n### Styling with Markdown {#markdown}\\n\\nThe following outputs can be styled using simple Markdown: \\n\\n* Note output\\n* Description field\\n  * Group description\\n  * Question level additional information/help text\\n\\n[See Markdown reference](https://www.markdownguide.org/)\\n\\nWhile editing Markdown, you can\\n\\n* Toggle between the editor and the preview by clicking on the eye and code icon.\\n* View Markdown syntax guide by clicking on the question mark icon.\\n\\n![Markdown window](optionsandsettings/markdown.png)\\n\\nSome examples of the differences between unstyled and styled fields are below.\\n\\n**This is an unstyled Group Description and question-level additional information.**\\n\\n![Markdown before](optionsandsettings/markdown-before.png)\\n\\n**This is the same Group Description and question-level additional information styled with Markdown.**\\n\\n![Markdown after](optionsandsettings/markdown-after.png)\\n\\n\\n---\\n\\n### Description {#description}\\n\\nThe Description field can be used on the Group level or on the Question level.\\n\\n* **Group level**:\\n  * **Create a group description**: Give additional information about a group which will appear under the Group Label on the filling side. To access the Description on the Group Level to apply a Group Description, click on the Group\'s Hamburger icon.\\n* **Question level**:\\n  * **Create question-level \\"help text\\"**: Give additional information to assist users on the filling side or communicate extra information about specific questions. To access the Description on the Question Level to apply a Question-level additional information text, click on the question\'s Hamburger icon.\\n\\nLike `Note` output type, both Group Description and Additional Information can be styled with [Markdown](https://www.markdownguide.org/). \\n\\n![Accessing Element Options Modal](optionsandsettings/options-menu2.png)\\n\\nThe form below has a Group Level Description and Question-level additional information text/styling applied.\\n\\n![Styling headings and descriptions](optionsandsettings/properties1.png)\\n\\n**NOTE**: Keep in mind that the Group Label is written directly into the Group Label field itself, not via the Options modal.\\n\\n---\\n\\n### Style classes {#style-classes}\\n\\nThis feature allows you to _apply_ existing CSS classes to elements.\\n\\n![Styling classes tab](optionsandsettings/style-classes-tab.png)\\n\\n**Only CSS classes that have already been specified and predefined by your organisation are available via this modal.**\\n\\nTo apply preexisting styles, refer to your organisation\'s documentation to enter a defined CSS class name, and if it already exists in the system, it will be applied. However, if it hasn\'t already been defined, no changes will appear on the filling side.\\n\\n**NOTE**: New CSS classes cannot be created with this feature.\\n\\n---\\n\\n### Properties {#properties}\\n\\nThis feature makes it possible to communicate specific data to the fill API.  Client-specific configurations can strictly define properties, including which elements can have which properties. For example, a Group element may have a `columns` property with a value that defaults to 1.  \\n\\n![Properties Column](optionsandsettings/properties-column1.png)\\n\\nAnother example is a `display` property with the value of Dropdown and a `notscored` property with the value of a switch.\\n\\n![Properties Dropdown](optionsandsettings/properties-dd.png)\\n\\nThe Properties feature works in combination with your specific configuration to allow customisation in a controlled manner.\\n"},{"build":{"created":1610445169,"modified":1612767716},"url":"./src/markdown/006_reference/000_new_form_walkthrough.md","name":"006_reference/000_new_form_walkthrough.md","content":"# New form walkthrough \\n\\nWelcome to Dialob! In this guide, you will use Dialob Composer and learn how to create a simple dialog using structures, inputs, and response types. You will create a basic input validation, learn how to show/hide fields, and write a requirement rule for a question, all using Composer\'s built-in features and Dialob Expression Language, **DEL**.\\n\\nAfter completing this new user guide, you will be familiar with Dialob\'s basic features and have a better idea how to organise your workflows while using the platform. Note that this basic guide does not include advanced features such as custom variables and complex validations, visibility, or requirement rules.\\n\\nLet\'s get started in making our first dialog.  Below is a screenshot of the end-result we are going to build: A simple questionnaire to collect user personal data on foods and restaurant opinions.\\n\\n![Complete form](/reference/complete-form.png)\\n\\nTo make this example, we will follow these steps:\\n\\n1. [Create a new form](#new-form)\\n\\n2. [Create a new page](#new-page)\\n\\n3. [Create a new group](#new-group)\\n\\n4. [Create a response (form question)](#response)\\n\\n5. [Create list and apply it to a group / question](#list)\\n\\n6. [Create a survey input](#survey)\\n\\n7. [Write simple validation, visibility, and requirement rules](#rules)\\n\\n8. [Preview your form](#preview)\\n\\n---\\n\\n### Step 1: Create a new form {#new-form}\\n\\nAll dialogs (forms) are built using Dialob Composer, the user interface that you see on the front-end side, and these dialogs are processed by Dialob Manager, which is the engine running in the background, processing all of your changes in near real-time. There is no need for a \\"save\\" button anywhere, as each change you make is automatically processed by Manager.\\n\\nLet\'s begin our work with Composer by creating a new form.\\n\\n![Create new form](/reference/create-new-form.png)\\n\\n---\\n\\n### Step 2: Create a new page {#new-page}\\n\\nPages form the base containers for all inputs in Dialob. Pages contains groups. Groups contain questions. To get started, click the `add` icon to create your first page.\\n\\n![Create page](/reference/new-form-empty.png)\\n\\n---\\n\\n### Step 3: Create a group {#new-group}\\n\\nNow that you have a page, you can create a group inside of it. Click the `Add item` button to add a \\"standard\\" group. The other forms of group -- _Survey group, Survey Group (Vertical), Multirow group_ -- will be discussed later.\\n\\n![Create group](/reference/page-add-group.png)\\n\\n---\\n\\n### Step 4: Create a response (form question) {#response}\\n\\nNow that you have a group, you can give the group a _label_. The label is the name or title of the group which will appear on the filling side above all the questions contained within that group. The group label can be left empty if you don\'t want to have any visible text as a group label. In our case, we want this group to have a visible label, called \\"Personal Data\\", since that is the nature of the question we will be asking the user.  \\n\\nNext, let\'s create our first response (question). Click the `Add item` button in the bottom left corner of the Group window. Add a question of type Text.\\n\\n![Create response](/reference/create-new-response.png)\\n\\nYou can see below that the tree view on the left side of the screen is automatically updated with groups and questions as you go. Our group label (title) has been updated with the name we have given it. `text1` is the default ID of the question we have just created and will be updated if we choose to rename this ID later on.  \\n\\n![Create response](/reference/create-new-text-input.png)\\n\\nNow, let\'s create our first question. Since this group is intended to collect personal data, it is logical that our first question should be a Text input to collect a user\'s full legal name.  In the `Text field label`, write your question: \\"Please enter your full legal name\\".\\n\\n![Create response full legal name](/reference/full-legal-name.png)\\n\\nFor now, do not worry about filling in `Visibility`, `Required`, `Default Value`, or `Validation Rules`--they can be left empty.  \\n\\nLet\'s preview this on the filling side. Click the `Preview` button in the top right of the Composer screen.  Note how the Group Label (title) is displayed above the question.\\n\\n![Full legal name filling side](/reference/full-legal-name-filling-side.png)\\n\\nNow, we have a text response field to collect someone\'s full legal name, but it would make more sense to collect each name individually, so as to create a clear differentiation between a first, middle, and last name. We will create a `Multi-Row` response type to collect these names individually.  \\n\\n`Multi-Row` response types need to be created in a separate, `Multi-Row` group, which we will create now.\\n\\n![Multi-row group](/reference/multi-row-group.png)\\n\\n`Multi-Row` creates inline fields, and the number of inputs you add to the group will determine the number of input fields. For this demonstration, we will create three text fields for the collection of a user\'s first, middle, and last name.\\n\\nBe sure to add a group label here, as the group label will serve as the question prompt to tell the user what to do.  In this case, our group label will be the following: \\"Please enter your full legal name\\".\\n\\n![Multi-row group](/reference/multi-row-group-add-text.png)\\n\\nNow, you should have something that looks like this:\\n\\n![Multi-row group](/reference/multi-row-group-three-inputs.png)\\n\\nOn the filling side, the user will see this:\\n\\n![Multi-row group](/reference/multi-row-group-three-inputs-filling.png)\\n\\nSince we now have a `Multi-Row` group to collect a user\'s legal name, we do not need our first text input anymore, so it can be deleted. To delete, click on the hamburger icon in the top right corner of the desired question. In the picture below, we are deleting the entire group, since it holds only the one question that we don\'t want anyway. Groups and questions can be deleted from the hamburger icon. However, **keep in mind that there is no undo button!  Once a group or question has been deleted, the only way to get it back is to recreate it!**\\n\\n![Delete question](/reference/delete-question.png)\\n\\nOur dialog now has one question. Next, we will add our second, third, and fourth questions: A single-choice dropdown, a multiple-choice dropdown, and a survey question, respectively.\\n\\n---\\n\\n### Step 5: Create a list and apply it to a group / question {#list}\\n\\nA single `Choice` input gives the user the option of selecting only **one** option from a list, whereas the `Multi-choice` input allows the user to select **one or more than one** input. \\n\\n_Note: For more advanced use cases, if you want to specify that the user must select a certain number of inputs from a `Multi-choice` question, this can be determined by writing a validation rule which includes your specification._\\n\\n`Choice` and `Multi-choice` can be created within a \\"standard\\" group.\\n\\nLet\'s create a group to house our two new questions:  `Add-item` --\x3e `Structure` --\x3e `Group`\\n\\nBe sure to select the `Add-item` button which is **outside** of any existing group. If you select the `Add-item` button within a group, you will create a nested group within that group, which, in this case, is not needed.\\n\\n![Add new group](/reference/add-new-group.png)\\n\\nGive the group a label of \\"Favourite Foods\\".\\n\\n![Add new choice type](/reference/new-group-choice.png)\\n\\nNotice that, within the group, the `Choice` input type will produce a `List` ID. This is telling us that, to create the drop-down menu for the user to select from, we need to create a list.\\n\\nTo create a list, go to the upper menu bar and select `Lists`.\\n\\n![Add new choice type](/reference/choice-make-list.png)\\n\\nSelect \\"Add new list\\".\\n\\n![Add new global list](/reference/new-global-list.png)\\n\\nIn this example, we are creating a Global List. Global Lists can be applied to any number of questions across the dialog.  Any changes made to a global list will be reflected across all questions which use that list.  This is a good thing to use if you wish to reuse the same list over and over.\\n\\n![Anatomy of a list](/reference/anatomy-of-list.png)\\n\\nTo add a new list item, click the `add` button (plus sign) and enter a key and text.  **NOTE**: When creating lists, the key (ID) is not auto-generated, and it must be set manually by the form creator. Any changes to the ID will be auto-updated globally, however.\\n\\nLet\'s fill in the name and options in our list of Favourite Foods. You should see something similar to the following:\\n\\n![Anatomy of a list](/reference/anatomy-of-list2.png)\\n\\nNow that we have a list, we need to apply it to our `Choice` question and give our `Choice` question some text to prompt the user on the filling side.  Click the hamburger icon in the top right corner of the question and select `Options`.\\n\\n![Add a list to choice](/reference/choice-attach-list.png)\\n\\nNow, select the global list you just created.  If you had wanted to create a one-time list which is bound to this question in specific, you could create a local list here.\\n\\n![Add a list to choice](/reference/select-global-list.png)\\n\\nLet\'s preview this on the filling side:\\n\\n![Choice list filling side](/reference/choice-list-filling.png)\\n\\nNow that we have seen how to create a global list, next, we will create a `Multi-choice` input type and connect it with a local list, which follows basically the same process.\\n\\n![Add multi-choice](/reference/add-multi-choice.png)\\n\\nCreate a local list. For this case, we will create a \\"Food Preferences\\" list.\\n\\n![Add multi-choice2](/reference/add-multi-choice2.png)\\n\\nCreate the local list of food preferences. Remember that this list is bound to this specific question only and cannot be reused in a different question.\\n\\nYour food preferences list should look something like this:\\n\\n![Local list of food preferences](/reference/food-preferences-local-list.png)\\n\\nLet\'s preview the filling side now.\\n\\n![Local list of food preferences](/reference/preview-filling-2lists.png)\\n\\n---\\n\\n### Step 6: Create a Survey input {#survey}\\n\\nLike `Multi-Row` input types, questions involving survey buttons require being placed in their own specific group: `Survey Group` or `Survey Group Vertical`.  In this section, we will create our fourth question: An opinion survey on restaurants.\\n\\nThe first thing you need to do is create a `Survey Group`.  \\n\\n`Add item` --\x3e `Structure` --\x3e `Survey Group`. This will create a single group with as many survey options as needed. The Group Label will be the singular prompt for the user, unifying all of the survey options under one question text.\\n\\n![Create survey group](/reference/create-survey-group.png)\\n\\nNext, add the categories for the survey options by selecting `Survey item`.\\n\\n![Create survey group](/reference/create-survey-group2.png)\\n\\nNote that the number of inputs directly corresponds to the number of survey categories the user will be able to choose from.\\n\\n![Create survey group inputs](/reference/create-survey-group3.png)\\n\\nNow that we have the categories, it is time to add the survey buttons themselves. This is done by creating a list. For this question, we will create a local list.  Select the hamburger icon in the top right corner of the group, then select `Options` and `Create local list`.\\n\\n![Create survey group inputs](/reference/survey-group-list.png)\\n\\nThis is what we see on the filling side preview:\\n\\n![Survey group on filling side](/reference/survey-group-filling-side.png)\\n\\n---\\n\\n### Step 7: Write simple validation, visibility, and requirement rules {#rules}\\n\\nTo create a more dynamic and appropriate user experience, the dialog should be crafted in such a way that it responds to user inputs efficiently and logically. For example, it would not make sense to ask a user about a favourite restaurant if he/she had previously specified that he/she doesn\'t eat at restaurants. Likewise, if a question asks the user for an email address, and the email address is to be used in the future for sending follow-up emails, it would be reasonable to expect that this field is required to be filled and that the input conforms to valid email address specifications. Validation, visibility, and requirement rules allow you to accomplish these things with ease.  These rules are written in Dialob Expression Language (DEL), a \\"programming\\" language so simple that even those who have never touched programming can use it.  It resembles a combination of algebra and the most basic of English grammatical structures.\\n\\nBefore we begin writing rules, however, it is important to understand that there is are two ways/places to write rules: In the \\"Rule Editor\\" and  in the \\"In-line editor\\".\\n\\n**_Visibility_ and _Requirement_ rules are read-only within the question. These are edited with the Rule Editor at the bottom of the screen.  You cannot edit them simply by moving your mouse curser to their empty fields and starting to type. To edit them, first you need to click the question itself to make it active, and then look at the bottom part of your screen: You will see the Visibility and Requirement rule editor there and it will be populated with the empty visibility and requirement fields.  After writing your rules, you can look up to see that they have appeared in the question\'s read-only fields.**\\n\\n**Validation messages, validation rules, and Default Value are editable directly within the question. To edit these, simply click the question and put your curser inside the field. Then, you can type your rules directly into the question.  These rules will not show up in the rule editor at the bottom of the screen.**\\n\\nBelow is an example of the rule editor when empty. Nothing appears.\\n\\n![Inactive rule editor](/reference/inactive-rule-editor.png)\\n\\nBelow is an example of the rule editor when a question is active. You can tell that a question is active if it has a blue highlight above the question text field.  When the question is active, the rule editor appears with the visibility and requirement fields ready for editing.\\n\\n![Active rule editor](/reference/active-rule-editor.png)\\n\\n**Now that we know where to write and edit rules, from this point forward, please remember that rules demonstrated in the screenshots are created in the manner specified above.**\\n\\nLet\'s begin by adding a simple requirement rule to our first `Multi-Row` input. \\n\\nThis is achieved simply by writing `true` in the `Required` field, which you find in the question editor at the bottom of the screen.  If a question has `Required` set to `true`, the dialog session cannot be completed until the question is answered (Complete button will be greyed out).\\n\\nNote that all questions default to `false`, which means that, unless otherwise specified, there is no requirement that questions be answered before completion of the dialog is permitted.\\n\\n![Adding requirement rule](/reference/adding-requirement-rule.png)\\n\\n\\nNext, after collecting the user\'s name, it might be nice to collect additional information if the user selects \\"other\\" from the favourite food `Choice` drop-down list. However, we did not add the option to select \\"other\\" before when we created the original global list. We will edit the global list to add that option, and then we will make a text box response field and set it to be visible if the user selects \\"other\\".\\n\\nFirst, go up to the top menu bar and select `Lists`. Then, select your global list, `Favourite Foods`.  Adding another option is as simple as clicking the `Add` icon and setting your key-value pair.\\n\\n![Edit Global List](/reference/edit-global-list.png)\\n\\nReturn to `group1`: Favourite Foods. Click the `Add item` button within the group to add a new input. Select the `Text Box` input type.  The text box question editor will appear at the bottom of the group. If you wish to reorder it and place it after the first `Choice` question, drag it into place from the tree view on the left.\\n\\n![Adding a text box](/reference/add-move-text-box.png)\\n\\nAt this point, we will begin writing a visibility rule. We want to show `textBox1` **only if** a user selects \\"other\\" from the drop-down list in the preceeding question.  Using DEL, we will write the following into the `Visibility Rule` field:\\n\\n`list1 = \\"other\\"`\\n\\nBreaking it down, this rule is saying that, if the value \\"other\\" from the global list is selected in the question whose ID is `list1`, the expression will be `true`, and if this expression is `true`, `textBox1` is shown.  We can also make this a `Required` field.\\n\\n![Text Box Visibility](/reference/text-box-visibility.png)\\n\\nOn the filling side, we see this:\\n\\n![Text Box Visibility filling side](/reference/text-box-visibility-filling.png)\\n\\nIt would be nice if our `textBox1` required the user to submit an input of a certain length so as to ensure a more detailed response. We can write a validation rule to specify the minimum / maximum length of a response.  We will also want to write a validation message, which will appear on the filling side if the user enters data that we don\'t want to accept, which is specified by our validation rule. The validation message will alert the user that the input is not valid and prompt him/her to re-enter it correctly.\\n\\nValidations work in this way: Dialob will evaluate the user\'s inputs against the rules you write, and if your validation rule evaluates to `true`, the validation message will be displayed. The message will continue to be displayed until the rule evaluates to `false`. Please keep this in mind when writing validation rules.\\n\\n**Remember that validation rules and messages are edited in-line, in the question itself.**\\n\\nUsing the `lengthOf( )` function, we tell Dialob to check that the input of the item in parenthesis (in this case, `textBox1`) is less than 25 characters. If the user provides an input of fewer than 25 characters, the validation will evaluate to `true` and the validation message will be shown, prompting the user to continue entering characters, until the user enters more than 25 characters. At that time, the validation will evaluate to `false` and the message will stop being displayed. The form will also be completable, as a form cannot be completed with any outstanding invalid inputs.\\n\\n![Text Box validation writing](/reference/text-box-validation-writing.png)\\n\\nOn the filling side:\\n\\n![Text Box with validation on filling side](/reference/text-box-filling-side.png)\\n\\n---\\n\\n### Step 8: Preview your Dialog {#preview}\\n\\nCongratulations! You have now gone through the basic steps in creating a dialog using Dialob Composer. Preview your form to see your end product!\\n\\nThis guide has been a simple beginning to help you become aware of Dialob\'s features and how the platform works in the dialog creation process. Of course, there are many more functionalities to explore and advanced options available to leverage the power of Dialob in the creation of highly complex, flexible dialogs. Please see the other sections of the documentation for an additional, more in-depth look.\\n"}]}')}catch(f){console.log("failed to load compiled site: "+f,'52 files queued up. Starting scrape...\n\nTotal execution time = 0.65 seconds.\n{"build":1613299644,"files":[{"build":{"created":1610128748,"modified":1613232060},"url":"./src/markdown/000_basic_operations/000_intro.md","name":"000_basic_operations/000_intro.md","content":"\\n# About Dialob\\n\\n**Dialob** is a platform for creating and testing responsive dialogs and publishing them online. In the context of the Dialob platform, a dialog is both a form and a process. Creating with Dialob is a dynamic process wherein the word \u201cdialog\u201d is a representation of the constant communication between user inputs on the front-end and Dialob\u2019s back-end processes, resulting in a constant \u201cdialogue\u201d between the system and the user throughout the creation process.  In this way, Dialob constantly updates and saves user inputs on the back-end side and reflects those changes in near real time. The product and end result of the dialog process is a highly customizable form with validations, versioning, translation, and security built in, all tailored to a specific end-user requirement.\\n\\nThe Dialob platform comes with a comprehensive set of tools targeted at non-technical users to enable the creation, testing, and deployment of responsive forms.  \\n\\nThe image below represents the Dialob structural hierarchy:\\n\\n![](/aboutDialob/picture_1.png)\\n\\n* **Dialob Composer**: This is the main environment for creating, changing and testing on-line dialogs. It is powered by Dialob Expression Language (DEL), a powerful, custom-made logic-building language which is easy to learn and use even for non-technical users.  Dialob Composer is available as a cloud service, so there is no need to download anything before use. New users need only create a new account to get started.\\n\\n* **Dialob Manager**: This is the runtime backend service that executes dialogs developed via Dialob Composer. Dialob Manager is an open-source-distributed package, available either as a Docker-image or via source code. Dialob Manager comes with:\\n\\n * **REST API**: Simple API for online UI front end to interact with Dialob manager. See reference implementation.\\n\\n * **Dialog repository**: Repository where dialogs and associated visibility rules are stored so that they can be fetched by the engine at run time.\\n\\n * **Dialog session repository**: Repository that tracks all the changes, dialog requests, and responses, of each unique dialog session. The gathered data provides a full audit trace of each dialog session and thus provides the baseline for further optimization of the online dialogs.\\n\\nThe image below represents the Dialob logical architecture:\\n\\n![](/aboutDialob/picture_2.png)\\n\\n**Dialob R&D** is continuously evaluating new technologies as potential additions to Dialob for the purpose of improving its online dialog creation capabilities.\\n\\nThe Dialob dialog lifecycle management concept is described below:\\n\\n![](/aboutDialob/picture_3.png)\\n\\n\\nLearn more on [dialob.io](http://www.dialob.io).\\n\\n\\n\\n---\\n\\n### Custom features can be added per client request to Dialob\'s ever-growing list of out-of-the-box features\\n\\n* **Logic-building**: Form creators can use rich yet simple logic-building expressions using _Dialob Expression Language (DEL)_ to control the flow of dialogs and, in turn, create a highly configurable end-user filling side.\\n\\n* **Complex validation and visibility rules with built-in functions, DEL, or Java regular expressions**: Using DEL, intricate and detailed forms with interconnected visibility and validation logic can be created, resulting in a fully-customizable and highly-specific user experience on the filling side.  Dialob Composer can validate or hide/show any response field based on user inputs. Custom functions can also be created when needed.\\n\\n  \x3c!-- * NOTE: Pages and groups can have visibility rules attached, whereas individual response fields (questions) can have validation, visibility, and requirement rules attached. --\x3e\\n\\n* **Constant communication between front and backend = Saving on the fly, data security**: Because Dialob Composer (frontend) is in constant contact with Dialob Manager (backend), changes are saved as they happen. There is no fear of losing work. This provides the additional benefit of security: Data cannot be manipulated on the front end, because the backend does all the heavy lifting.  \\n\\n* **Lists**: Lists can be created to populate multi-choice and choice questions and can be reused/edited as often as needed.  \\n  * **CSV support**: Upload and download valueset entries from Comma Separated Value files, which is useful for utilising lists created outside of Composer.\\n\\n* **Custom Variables and Functions**: Using \\"Context Variables\\" and \\"Expression Variables\\", form creators can create their own custom variables and functions to suit their needs.  \\n\\n  * A context variable is a user-created variable that can be used either to store the result of a function evaluation, to prefill form data on the filling side, or as a static value (age = 5).  \\n\\n  * An expression variable is a user-created function that can be used to process inputs from dialog questions, and the product can be stored in a context variable. For example, an expression variable can be written to find the sum of two fields, (question1 and question2) which can then be stored in and later retrieved from a context variable (`question1 + question2 = {sum}`)\\n\\n* **Pre-filling data**: Dialogs can be configured to populate the filling side with pre-selected data (questionnaires, context variables) where desired. This can be done in the integration layer of Dialob where Dialogs are instantiated.\\n\\n* **Full visual customisation options**:\\n  * **CSS customisability**: Dialogs can easily be adapted to fit users\' look and feel requirements.\\n  * **Markdown editing**: Text outputs such as group descriptions, question-level additional information (help text), and note outputs can be styled with simple [Markdown](https://www.markdownguide.org/)\\n\\n* **Preview**: In preview mode, the user is able to see the form in its current state and test the functionality in real time from the perspective of the filling side.  \\n\\n* **Downloading as JSON**: Dialogs can be downloaded as JSON files.\\n\\n* **Versioning**: Dialogs can be tagged and versioned to create a history of changes. The Dialob lifecycle is managed either in a linear or a branched manner. \\n\\n* **Translations**: Dialog questions and list items can be individually translated to / from English, Finnish, Swedish, or Estonian languages. In addition, custom languages can also be created.\\n\\n* **Saving changes**: Because Dialob Composer (frontend) is in constant contact with Dialob Manager (backend), changes are saved as they happen.\\n"},{"build":{"created":1610445169,"modified":1612767226},"url":"./src/markdown/000_basic_operations/001_pages.md","name":"000_basic_operations/001_pages.md","content":"# Pages\\n\\n## Quick Summary\\n\\n* Pages are the main containers for all Dialob elements\\n* All forms need to have at least one page\\n* Only visibility logic rules can be applied to pages\\n\\n---\\n\\n## Overview  \\n\\nPages are the basic containers for all Dialob elements.\\n\\nBelow is a simple diagram of Pages and their child elements:\\n\\n* Page\\n  * Group\\n    * Question\\n      * Logic Rules\\n\\n---\\n\\n## Creating a page\\n\\nBefore you can begin creating your form\'s content, you need to create a page to hold it. All forms need at least one page, but you can have as many pages as you require.\\n\\nPages can contain only visibility rules.\\n\\nWhen you first create a new form, you will need to add your first page by clicking the \'add\' button in the top right corner.\\n\\n![New Page](basicoperations/new-page.png)\\n\\nNow, you can begin to populate your empty page with items.\\n\\n![Second Page](basicoperations/new-page2.png)\\n"},{"build":{"created":1610445169,"modified":1612779793},"url":"./src/markdown/000_basic_operations/002_groups.md","name":"000_basic_operations/002_groups.md","content":"# Groups\\n\\n## Quick Summary\\n\\n* Groups exist within pages\\n* Only visibility logic rules can be applied to groups\\n* Groups can be nested\\n* Inputs can exist outside groups\\n* Groups are created with the \'Add Item / Structure\' buttons\\n* Groups are deleted via the hamburger icon in the top right corner of the group\\n\\n---\\n\\n## Overview\\n\\nGroups exist within pages. They serve to organise different types of questions into logical groups and have slightly different functionalities depending on their type.\\n\\nThere are four types of groups:\\n\\n* Group (general)\\n* Survey Group\\n* Survey Group (vertical)\\n* Multi-row Group\\n\\nAll groups can contain other groups (nested groups), inputs, and outputs (note type). Inputs or outputs can be created both inside and outside of groups.\\n\\nOnly visibility logic rules can be applied to groups\\n\\n---\\n\\n## Group Types\\n\\n### Group (general)\\n\\nThis is the most basic type of group. It can be used to nest other groups or simply to logically organise inputs and outputs.\\n\\n### Survey Group\\n\\nA survey group is used to create survey-style questions.  It usually contains **Survey Items** and a **List**.  In this type of group, survey radio buttons are arranged horozontally across the screen on the filling side.\\n\\n### Survey Group (vertical)\\n\\nA vertical survey group is used to create survey-style questions.  A vertical survey group can contain **Survey Items** and a **List**.  In this type of group, survey radio buttons are arranged vertically across the screen on the filling side.\\n\\n### Multi-row Group\\n\\nThis type of group is used when multiple inputs are required, for example, when collecting a client\'s first, middle, and last names as separate inputs. On the filling side, a multi-row group will be rendered as a row containing a group of input fields. The number of fields rendered within the group is determined by the number of input fields created within that group on the Composer side.\\n\\nA multi-row group can contain any combination of different inputs.  \\n\\n---\\n\\n## Creating a new group\\n\\nTo create a group, click \'Add item / Structure\' buttons at the bottom left corner of the page or an existing group. Then, select the type of group to create.\\n\\n![New Group](basicoperations/create-group.png)\\n\\n---\\n\\n## Deleting a group\\n\\nTo delete a group, click the hamburger icon in the top right corner of the group, and select \'Delete\'.\\n\\n![Delete Group](basicoperations/delete-group.png)\\n\\n"},{"build":{"created":1610445169,"modified":1612779793},"url":"./src/markdown/000_basic_operations/003_adding_items.md","name":"000_basic_operations/003_adding_items.md","content":"# Adding new items\\n\\n## Quick Summary\\n\\n* There are two ways to add new items: Via the hamburger icon + \\"Insert New\\" in the top right of an element, or \\"Add Item\\" button on the bottom left.\\n* Adding an item via the hamburger icon creates the item outside of a group.\\n* Adding an item via the \'Add Item\' button creates the item within the active group.\\n\\n---\\n\\n## Overview\\n\\nItems consist of structures (groups), inputs, and outputs.  \\n\\nThere are two ways to add a new item:\\n\\n1. **To create a new item WITHIN a group**: Use the \\"Add Item\\" button in the bottom left corner of a group1. \\n2. **To create a new item OUTSIDE of a group**: Use the hamburger icon in the top right corner of a page or group and select \\"Insert new\\"\\n\\n---\\n\\n## Creating a new item WITHIN a group: Use the \'Add Item\' button\\n\\nUsing the \'Add Item\' button at the bottom left corner of a group will create a new item within that particular group. See example below:\\n\\n\\n![Add new item](basicoperations/add-item.png)\\n\\nSelect text input type and write a label.\\n\\n![Add new item](basicoperations/add-item2.png)\\n\\nOn the filling side, we see that our text input with the label \\"I am inside group 1\\" appears within group1.\\n\\n![Add new item Preview](basicoperations/add-item3.png)\\n\\n---\\n\\n## Creating a new item OUTSIDE of a group: Use the hamburger icon + \'Insert New\'\\n\\nCreating a new item with the hamburger icon + \\"Insert New\\" from **within a group** will create a new item **below and outside** of the group. See example below:\\n\\nFirst, we add an input of type `text`.\\n\\n![Insert new](basicoperations/insert-new.png)\\n\\nWe add a label to `text1`.\\n\\n![Insert new](basicoperations/insert-new2.png)\\n\\nOn the filling side, we see that the `text1` with the label \\"I am outside of group 1\\" appears outside of Group1.\\n\\n![Insert new Preview](basicoperations/insert-new3.png)\\n\\n---\\n"},{"build":{"created":1611824811,"modified":1612779793},"url":"./src/markdown/000_basic_operations/004_input_types.md","name":"000_basic_operations/004_input_types.md","content":"# Input Types\\n\\n## Quick Summary\\n\\n* A Response is akin to a question: We create a Response on the Composer side, and a user fills out that Response, or question, on the filling side.\\n* An Input type is one of the different kinds of values that can be returned by a response. \\n  * Example: An input such as a text field or text box will return a text value (string response type). An input of type \\"number\\" has a `number` response type.\\n* Dialob supports a variety of different input/response types that cover basic data collection needs.\\n* Additional types can be added to suit your needs.\\n\\n---\\n\\n## Overview\\n\\nData is comprised of multiple types, such as numbers, texts, true/false information, time, etc.  To collect this information, we use input/response types. \\n\\nWhen you design a form, you decide what type of information to collect, from names to birthdates to decimal values. This is where input/response types come in. As you build your form and create your questions, you specify, using types, what kind of data you are collecting and accordingly, the form of that data that will be returned by Dialob.\\n\\nAs an example, if a question requires that a user enter a first name, the type capable of capturing and returning text is called a \\"string\\".  To collect decimal values, you will use the corresponding \\"decimal\\" type.\\n\\n---\\n\\n\\n\\n### Supported response types\\n\\n\\n| Tables        | Are           | Cool  |\\n| ------------- |:-------------:| -----:|\\n| col 3 is      | right-aligned |  |\\n| col 2 is      | centered      |    |\\n| zebra stripes | are neat      |     |\\n\\n\\n\\n* **Survey item**: Return type will be a key\\n\\n* **Text**: Return type will be a string\\n\\n* **Text box**: Return type will be a long string\\n\\n* **Address**: Enables autocomplete of addresses (disabled by default)\\n\\n* **Decimal**: Return type will be a decimal number\\n\\n* **Number**: Return type will be an Integer number (whole number, positive, negative, or zero, no decimals)\\n\\n* **Boolean**: Return type will be a Boolean value (true / false)\\n\\n* **Date**: Return type will be a date in the format of \\"yyyy-mm-dd\\". [See more on ISO dates](http;//ISO Date](https://en.wikipedia.org/wiki/ISO_8601).\\n\\n* **Time**: Return type will be a time in the format of \\"hh:mm:ss\\"\\n\\n* **Choice**: Return type will be an ID of selected row in the list\\n\\n* **Multi-Choice**: Return type will be a set of an ID of selected rows from the list\\n\\n* **Multi-Row**: Return type will be TODO\\n\\n"},{"build":{"created":1611824811,"modified":1612779793},"url":"./src/markdown/000_basic_operations/005_output_types.md","name":"000_basic_operations/005_output_types.md","content":"# Output Types\\n\\n## Quick Summary\\n\\n* **Note** type is the only output type currently supported in Dialob.\\n  * It is used to provide additional information on the filling side\\n  * It has no return value\\n\\n---\\n\\n## Overview\\n\\nNote is an output type which is used to provide additional / general information about a question, on the filling side, to assist users in answering questions.\\n\\nThere is no return value to note type.\\n\\nNote text can be styled with Markdown. [Link to Markdown Syntax Guide](https://www.markdownguide.org/)\\n\\n---\\n\\n## Example of Note type\\n\\n![Note on filling side](basicoperations/note-example1.png)\\n\\nDetailed information on working with Note type can be found in input-and-output-types.\\n\\n\\n"},{"build":{"created":1610445169,"modified":1612779793},"url":"./src/markdown/000_basic_operations/006_reordering.md","name":"000_basic_operations/006_reordering.md","content":"# Reordering items\\n\\n\\n## Quick Summary\\n\\n* The left-hand tree view shows you the current order of present form items\\n* To rearrange items, drag and drop them within the tree\\n\\n---\\n\\n## Overview  \\n\\nTree view shows you the current hierarchy of items as they appear both on the Composer side and on the filling side.  \\n\\nTo rearrange your form items, simply click on them in the tree view, and then drag and drop them in the desired location.\\n\\n---\\n\\n## Example of the tree view\\n\\n![Tree view](basicoperations/tree-view1.png)\\n\\n\\n"},{"build":{"created":1610445169,"modified":1612779793},"url":"./src/markdown/000_basic_operations/007_ids.md","name":"000_basic_operations/007_ids.md","content":"# Identifiers\\n\\n## Quick Summary\\n\\n* All Dialob elements have globally unique IDs\\n* All IDs must be globally unique\\n* Group, response (question), and note IDs can be changed by clicking on their current ID in the top left corner of the item window\\n* Page IDs can be changed by clicking on the hamburger icon next to their names\\n\\n--- \\n\\n## Overview \\n\\nAll Dialob elements have globally unique identifiers:\\n\\n* Dialog ID\\n* Page ID\\n* Group ID\\n* Input ID\\n* Output ID\\n\\nThe Dialog ID can be found in the Dialog Options/Information window, accessible from the upper menu.\\n\\nThe IDs for all other items can be seen in the top left corner of the items themselves. See example:\\n\\n\\n![IDs](basicoperations/id1.png)\\n\\n---\\n\\n## ID Rules\\n\\n* A valid ID consists of letters, numbers, and underscores\\n* A valid ID must start with a letter\\n* IDs are case sensitive\\n* IDs must be unique\\n* IDs must not match reserved words used in expressions\\n\\n---\\n\\n\\n## Changing IDs\\n\\nChanging an ID will update all references to this ID automatically.\\n\\n### Page ID\\n\\nThe Page ID can be changed by clicking the hamburger icon to the right of the Page name and selecting \\"Change ID\\" from the dropdown.\\n\\n\\n### Group ID, Question ID, Note ID\\n\\nThese can all be changed simply by clicking on their current IDs in the top left corner of the items and creating a new ID.\\n\\n\\nIf a new ID conflicts with an existing one, the ID editing field will turn red, and a new ID will not be set until the naming conflict is resolved.\\n"},{"build":{"created":1610445169,"modified":1612786167},"url":"./src/markdown/000_basic_operations/008_testing.md","name":"000_basic_operations/008_testing.md","content":"# Preview mode: Testing the filling side\\n\\n## Quick Summary\\n\\n* Forms can be live-tested at any time with the \\"Preview Mode\\" feature\\n* Click \\"Preview\\" in the top right corner of the Composer window\\n* Preview mode is not accessible if a form has errors\\n\\n---\\n\\n## Overview  \\n\\nYou can test your form live, at any time in the creation process.\\n\\nTo activate Preview Mode, simply click \\"Preview\\" in the upper right corner of the Composer window.\\n\\n**NOTE**: Any existing errors will need to be resolved before you can utilise Preview Mode.\\n\\n---\\n\\n![Preview Mode](basicoperations/preview1.png)\\n\\n"},{"build":{"created":1610128748,"modified":1612786167},"url":"./src/markdown/001_advanced_operations/000_lists.md","name":"001_advanced_operations/000_lists.md","content":"# Lists\\n\\n## Quick Summary\\n\\n* Lists\\n  * are **key**-_value_ pairs (**id**-_listItem_) \\n  * are used to populate drop-down menus, choice selections, and create survey button options\\n  * can have visibility rules, which are created via the Lists window\\n  * used in combination with Choice or Multi-choice types must be inserted **at the response level**.\\n  * used in combination with Survey Group or Vertical Survey Group must be inserted **at the group level**.\\n\\n\\n[Use cases of lists](#use-cases)  \\n[Creating a Global list](#creating-global-list)  \\n[Creating a Local list](#creating-local-list)  \\n[Setting list visibility rules](#list-visibility)  \\n[Using a List in a Choice or Multi-Choice Response Field](#using-list-choice-multichoice)  \\n[Using a List in a Survey Group or Survey Group (Vertical) \\n[Response Field](#using-list-survey-group)  \\n\\n---\\n\\n## Overview\\n\\nLists are **key**-_value_ pairs (**id**-_listItem_) that are used to populate drop-down menus, choice selections, and create survey button options.  There are two types of lists in Dialob:\\n\\n**Global lists**: These lists exist independently from specific response fields, which means that they are not tied to any specific question and can easily be reused anywhere in the form. Any changes made to a global list will automatically be updated in all of the questions which use that list. Use a global list for drop-downs if the intent is to reuse the same list many times in different questions. For example, if a form requires the repeated reuse of a drop-down menu comprised of the same generic sports cars, a global list is the best choice.\\n\\n**Local lists**: These lists are bound to the response in which they are created. In fact, you can only create them from within the question/response where they will be used. Changes to local lists will be reflected only within the question where they were created. Use a local list if the goal is to simply create a one-time drop-down which is bound to a particular response field and will only apply to that particular question. For example, if a form requires one specific list of Italian sports cars and only one question will ask the user about these cars, a local list is the best choice.\\n\\n---\\n\\n### Use cases of lists {#use-cases}\\n\\n* Populate a drop-down menu\\n* Create survey button options\\n\\nA **global list** exists independently from specific response fields, which means that it is not tied to any specific question and can easily be reused. Any changes made to a global list will automatically be updated in all of the questions which use that list. Use a global list for drop-downs if the intent is to reuse the same list many times in different questions. For example, if a form requires the repeated reuse of a drop-down menu comprised of the same generic sports cars, a global list is the best choice.\\n\\nA **local list** is bound to the response in which it is created. Changes to local lists will be reflected only within the question where they were created. Use a local list if the goal is to simply to use it once and only in that particular question. For example, if a form requires one specific list of Italian sports cars and only one question will ask the user about these cars, a local list is the best choice.\\n\\n---\\n\\n### Creating a global list {#creating-global-list}\\n\\n1. Select \\"Lists\\" option from the top menu of the Composer screen.\\n2. Create a new list by selecting \\"Add new list\\".\\n3. Give the list a name.\\n4. Give the list items their keys and texts.\\n\\n* **Name** is the name of the list itself and is used by the form creator on the Composer side to identify the list.\\n* **Key** is the request ID and must be manually created by the form creator (at this time, list keys are not auto-generated). Keys must follow the [Request ID rules](https://docs.dialob.io/dialob-expressions/#request-id-rules) for creation of IDs.\\n* **Text** is the actual words / sentences / numbers that the form filler will see when selecting an item from the list.\\n\\n---\\n\\n### Setting visibility rules for list items {#list-visibility}\\n\\n* To write a visibility rule, click the \\"eye\\" icon to the left of the item\'s key. A gray eye indicates that no rule exists, whereas a black eye indicates that a rule does exist.\\n* The rule is edited at the bottom of the list window.\\n* Visibility rules can refer to ANY response ID in the Dialog except for attributes inside of a multi-row element.\\n\\nFor more information on writing visibility rules, see [Basic Logic Building and Rule Writing](https://docs.dialob.io/dialob-expressions/logic-building/)\\n\\n![List](advancedoperations/list-visibility1.png)\\n\\n**NOTE:** Next to the list name, you can utilise the \\"Users\\" option as a quick way to see how many responses are using this list and to identify unused lists.\\n\\n---\\n\\n### Creating a local list {#creating-local-list}\\n\\nLocal lists are created **at the response level** or **at the group level**.\\n\\n* `Choice` and `Multi-choice` local lists are created at the response level.\\n\\n* `Survey Group` and  `Survey Group (Vertical)` local lists are created at the group level.\\n\\nClick the hamburger icon in the top-right corner of the response editor. Then select \\"Options\\". Select \\"Create new local list\\".  The process of creating a local list is identical to that of a global list.  The new local list will automatically be inserted into the question once \\"OK\\" is selected.\\n\\n---\\n\\n### Using a list in a Choice or Multi-Choice response field {#using-list-choice-multichoice}\\n\\nLists used in combination with `Choice` or `Multi-choice` types must be inserted **at the response level**.  \\nLists used in combination with `Survey Group` or `Vertical Survey Group` must be inserted **at the group level**.\\n\\n\\nThe following screenshots demonstrate how to use a list in a Choice or Multi-Choice response type:\\n \\n1. To use a list in a `Choice` or `Multi-choice` response, insert the list **at the response level**. Create a group, then create a response of type `Choice` or `Multi-choice` within that group.\\n2. Click the hamburger icon in the top-right corner of the response editor. Then select Options. Select the desired list.\\n3. Preview the filling side.\\n\\n\\n![List 4](advancedoperations/list4.png)\\n\\n**Click the hamburger icon in the top-right corner of the response editor. Then select Options. Select the desired list.**\\n\\n![List 5](advancedoperations/list5.png)\\n\\n**Insert the list at the response level. To do this, create a group, then create a response of type Choice or Multi-choice within that group. Finally, select and insert the list.**\\n\\n![List 6](advancedoperations/list6.png)\\n\\n**Preview the filling side.**\\n\\n![List 7](advancedoperations/list7.png)\\n\\n**NOTE**: There is currently no external or visual indication that a response has a list attached to it. To check whether a response has a list bound to it, click the hamburger icon, then \\"Options\\".\\n\\n---\\n\\n### Using a list in a Survey Group or Survey Group (Vertical) response field {#using-list-survey-group}\\n\\nCreating a survey question is done at the **group level** through the creation of a \\"Survey Group\\" or \\"Survey Group (Vertical)\\".  \\n\\nA complete survey question is comprised of three basic parts:\\n\\n* A survey group (general container for the survey question)\\n* `Survey item` input type to provide the survey questions within the survey group\\n* A **global or local list** to provide the survey responses from which users can select\\n\\nThe following example follows these steps to create a survey about user opinions on car brands.  \\n\\n1. Create a survey group by selecting \\"Add item/Structure/Survey Group\\".\\n2. Inside the survey group, create Survey Items. For this example, the Survey Items are the car brands we will ask opinions on.\\n3. Create the list to populate the Survey Responses. The list will comprise the range of opinion choices for the user to select.\\n4. Insert the list into the Survey Group by selecting the hamburger icon at the top-right of the **group**.\\n5. Preview the filling side.\\n\\n\\n\\n**Create a survey group by selecting \\"Add item/Structure/Survey Group\\".**\\n\\n![Survey](advancedoperations/survey3.png)\\n\\n**Inside the survey group, create Survey Items. For this example, the Survey Items are the car brands we will ask opinions on.**\\n\\n![Survey](advancedoperations/survey5.png)\\n\\n **Create the list to populate the Survey Responses. The list will comprise the range of opinion choices for the user to select.**\\n\\n![Survey](advancedoperations/survey2.png)\\n\\n**Insert the list into the Survey Group by selecting the hamburger icon at the top-right of the **group**.**\\n\\n![Survey](advancedoperations/survey7.png)\\n\\n**Preview the filling side.**\\n\\n![Survey](advancedoperations/survey6.png)\\n"},{"build":{"created":1611915630,"modified":1612786167},"url":"./src/markdown/001_advanced_operations/001_lifecycle_management-_tags.md","name":"001_advanced_operations/001_lifecycle_management-_tags.md","content":"# Lifecycle Management: Tagging and Branching\\n\\n## Quick Summary\\n\\n* Dialob supports two kinds of tagging: Linear and Branching\\n* Dialob forms created via branching will not appear in Version History\\n* Multiple users editing the same dialog session simultaneously will result in unpredictable Dialob behaviour\\n\\n[Examples of tagging: Linear and Branching](#examples)  \\n[How to create a tag](#create-tag)  \\n[Multiple users accessing the same dialog session simultaneously](#multiple-users)  \\n\\n---\\n\\n## Overview\\n\\nManaging the Dialob Lifecycle is simple with tagging. Creating a tag can be thought of as assigning a name to represent the state of a dialog at a certain point in time. This tag can then be referred back to at any time, and previously-created dialogs can be recalled and used whenever needed. Dialogs can be continually refined and managed in this way, with the tagging history providing a list of each tag, its creation date, and the ability to revisit/reactive previous tags. \\n\\nWhen making a new tag, Dialob Manager will save the dialog in its current state, which will then become immutable. Then, Dialob will create an exact copy of this dialog, which it will tag as the \\"latest version\\". Only the \\"latest version\\" can be edited. In this way, new versions can be built on top of old versions, using the older tags as a \\"starting off point\\" for the \\"latest versions\\".  \\n\\nDialob currently supports two forms of versioning: **Linear** and **Branching**. \\n\\n---\\n\\n### Examples of Tagging: Linear and Branching {#examples}\\n\\n\\n**Linear tagging**: \\n\\nPossible use case: Create a singular, evolving form with a core set of elements which won\'t change much over time\\n\\n* Create v1.0 with 10 core questions.\\n* Create v2.0, which is based on v1.0 **PLUS** additional 20 questions.\\n  * v2.0 now has 30 questions: 10 from v1.0 and 20 new, unique to v2.0\\n* Create v3.0 from v2.0.  Modify existing questions.\\n\\n_Result: There are three different tags in this scenario which represent the same form at different periods in time, a sort of evolution. This scenario can save time if you need to reuse many of the same questions without making too many modifications._\\n\\n**Branching**: \\n\\nPossible use case: Create multiple different forms based on the same core elements/original form, and modifying each core to suit different needs\\n\\n* Create v1.0 with 10 core questions.\\n* Create v2.0 with modified v1.0 questions, tailored to a similar but different user base.\\n* Create v3.0 with modified v1.0 questions, tailored to a similar but different user base.\\n* Repeat for each version of v1.0 required.\\n\\n_Result: Using one core set of questions, multiple different forms can be created, each sharing similarities of the original core._\\n\\nIn summary, creating version tags via the \\"Version\\" menu creates dialogs that are tagged in a straight line as a continuous process, which means, in practice, that the newer version is an evolution based on the version that came immediately before it.\\n\\nBranching, on the other hand, produces \\"lateral\\" versions based on the same original copy. It works simply by copying the original version and creating a duplicate.  \\n\\n---\\n\\n### How to create a tag {#create-tag}\\n\\n**Linear tags** are created via the \\"Version\\" menu in the Composer window.\\n\\n1. Navigate to the \\"Version\\" menu. To the right of \\"Version\\", the current dialog\'s version tag in will be displayed. If the active dialog is the latest version, \\"Latest Version\\" will be displayed. If the active dialog of is a previous version, that version\'s tag will be displayed.\\n\\n2. To create a new tag, navigate to \\"Version\\" / \\"Create version tag\\" and enter desired tag name.\\n\\n3. When navigating back to \\"Version\\" / \\"Manage versions\\", a list of all tags and the dates at which they were created is displayed. Select \\"Activate\\" for a previous version.\\n\\n**Branches** are created by copying the original version to create a duplicate to be edited. The branching functionality is not currently available in the \\"Version\\" menu, and branched versions will not appear in Version history.\\n\\n---\\n\\n![Version Menu](advancedoperations/version1.png)\\n\\n### Multiple users accessing the same dialog session at the same time {#multiple-users}\\n\\nIn the Dialob lifecycle, it is possible for multiple versions of the same dialog to co-exist at the same time.  For example, a situation may occur when one user is working with an older version on the filling side, while, at the same time, another user decides to create a new version.  Because session IDs are associated with the user\'s login, the user with the older version will proceed with the older version while the user with the newer version will proceed with the newer version.  Dialob\'s default behaviour is to allow this, but it can be modified if needed.  \\n\\nAlso, when in the production environment, one user can be editing a dialog on the Composer side while another user can see the changes as they happen on the filling side.  However, multiple users editing the same dialog session at the same time is not supported and will result in unpredictable Dialob behaviour.\\n"},{"build":{"created":1610128748,"modified":1612767716},"url":"./src/markdown/001_advanced_operations/002_translations.md","name":"001_advanced_operations/002_translations.md","content":"# Translation and Localisation\\n\\n## Quick Summary\\n\\n* Create multi-language forms with the Translation feature\\n* Built-in languages include English, Estonian, Finnish, and Swedish. Additional language support can be added according to your needs.\\n* There are two creation modes: Create Empty and Copy from Active\\n* Test your translations on the filling side by changing the active language either via the Translation window OR via the language dropdown in the Composer upper menu\\n\\n[Activating a new language](#activating)  \\n[Translating items](#translating-items)  \\n[Testing](#testing)  \\n\\n---\\n\\n## Overview\\n\\nThe ability to create multi-language forms is critical, and Dialob supports this via a simple Translation feature.  There are three main items within the Translation window:\\n\\n1. **Languages Tab**: All activated languages, including the currently active language of the filling side. Within this tab, you can also set the active language for your filling session. The active language is indicated with the language name inside of a blue highlighted box.\\n\\n2. **Fields Tab**: All form fields, including Page, Group, and Question-level labels\\n\\n3. **Lists Tab**: All list items\\n\\n![Translations](advancedoperations/translation1.png)\\n\\n---\\n\\n### Activating a new language {#activating}\\n\\nWhen you activate a supported new language, any translations you have written for fields and items will appear in that language on the filling side as long as they have been defined.  Filling side buttons will automatically be translated into the active language.\\n\\nFrom the screenshots above and below, you can see that English is the only supported language on our form. Also, the blue highlighted box indicates that English is the currently active language. \\n\\nTo activate a new language, select it from the \\"Add new language\\" dropdown. Currently, English, Swedish, Finnish, and Estonian come built-in. Support for additional languages can be added per client request.\\n\\n![Translations](advancedoperations/translation2.png)\\n\\nTake note of the two creation method options: **Copy from Active** and **Create Empty**.  \\n\\n#### Copy from Active\\n\\nThis feature will create the new language and populate its values with a copy of the values in the currently active language. In practice, this means that if your currently active language is English, and you create a new language with the \\"Copy from Active\\" option, you will see your existing values copied to the new language in English. The values will need to be deleted and translated accordingly.\\n\\nThis is the result when selecting \\"Copy from Active\\":\\n\\n![Copy from Active](advancedoperations/copy-from-active.png)\\n\\nNOTE: When creating new translations via \\"Copy from Active\\", you can be assured that there will never be any blank fields or items on the filling side. If you forget to translate certain items into the active language of the filling side, they will appear in the language from which they were copied, thus ensuring that every field has at least some text in it.\\n\\n#### Create Empty\\n\\nThis feature will activate the new language without copying the values from the currently active language, essentially leaving you with a \\"blank slate\\" with which to start writing your translations, no deleting needed.  \\n\\nThis is the result when selecting \\"Create Empty\\":\\n\\n![Create Empty](advancedoperations/create-empty.png)\\n\\nNOTE: If you forget to translate some fields and then start a filling session with incomplete translations, the untranslated items will not appear, causing empty fields on the flling side.  You can easily see if there are any remaining untranslated items by checking the \\"problems\\" box. If the \\"problems\\" box indicates a number other than zero, simply click on the box and you will be taken to the untranslated item.\\n\\n---\\n\\n### Translating items {#translating-items}\\n\\nUpon activating a new language, you can begin to translate your items. In this example below, we activated the Estonian language and selected the \\"Create empty\\" option. We then navigated to the \\"Fields\\" tab.\\n\\nThere are two things to be aware of here.\\n\\n* **Blue \\"Problems\\" message**: This will display how many untranslated items there are. Once all items have been translated, the \\"problems\\" will change to zero.\\n* **\\"Show language\\" dropdown**: Click here to select the language into which you want to translate your items. In our case, we will select Estonian language. Note that you cannot proceed with translations until you have chosen the language to show in the Translation window.\\n\\n**NOTE**: To make additional languages appear in this dropdown into which you can translate, you need to activate them in the Languages tab first.  \\n\\n![New Language List Tab](advancedoperations/translation3.png)\\n\\nOnce you have clicked your desired language inthe \\"Show language\\" dropdown, the translation text box will appear on the right.\\n\\nTo start additing translations, click the row/value you wish to translate, and write your translations in the Translation box.\\n\\n![Writing translation](advancedoperations/translation4.png)\\n\\nNow, we have written all the translations. Note that the \\"problems\\" message is now zero.\\n\\n![Translations complete](advancedoperations/translation6.png)\\n\\n---\\n\\n### Testing {#testing}\\n\\nYou can test that your translations appear correctly on the filling side first by changing the active language either via the Translation window OR via the language dropdown in the Composer upper menu.\\n\\n![Testing languages](advancedoperations/activate-language.png)\\n\\nIn this example, we select \\"Estonian\\" from the dropdown and then select \\"Preview\\", and on the filling side, everything is correct:\\n\\n![Testing languages](advancedoperations/est-translation.png)\\n\\n"},{"build":{"created":1610128748,"modified":1612786167},"url":"./src/markdown/001_advanced_operations/003_csv.md","name":"001_advanced_operations/003_csv.md","content":"# Comma Separated Values (CSV)\\n\\n## Quick Summary\\n\\n* CSV files are a quick and easy way to create list valuesets with localisations\\n* Uploaded CSV files must follow the required format for Composer to apply them\\n* Supported form languages must be created via Translations **before** uploading a multi-language CSV file, otherwise those language values will be ignored by Composer\\n\\n[What is a valueset?](#valueset)  \\n[Required CSV format and notes](#format)  \\n[Simple outline of steps to list-building with CSV](#outline)  \\n[Step-by-step walkthrough: Build a single-language list with CSV](#walkthrough)  \\n[Important notes and troubleshooting multi-language list-building with CSV](#multilanguage)\\n\\n---\\n\\n## Overview\\n\\nUploading CSV files is a quick and easy way to create list valuesets with localisations, using your CSV editor of choice.  The uploaded file can then populate an empty list created within Composer, which you can apply to individual questions just like any Composer-created list.  \\n \\nYou can also download any list valuesets as a CSV file.\\n\\n**NOTE**: If you plan to use CSV files for multi-language valueset creation, first check out [Important notes on list-building with localisations in CSV](#multilanguage)\\n\\n---\\n\\n### What is a valueset?{#valueset}\\n\\n A valueset is the key-value pair for a list item (unique id + item text/description). See this example from a list entitled \\"animals\\":\\n\\n![Value set](advancedoperations/valueset.png)\\n\\nValuesets created via CSV files can be localised for a particular language, simply by adding additional columns with headers designating the language of that item using two-letter language codes. This localisation is explained in greater detail in the next section: _Required CSV format_.\\n\\n---\\n\\n### Required CSV format and notes {#format}\\n\\nA CSV file must follow this format:\\n\\n* The first row is the header row.\\n  * The first column of the header row must be `ID`.\\n  * The rest of the header columns must be two-letter language IDs for labels. [See two-letter language codes](https://en.wikipedia.org/wiki/List_of_ISO_639-2_codes)\\n* The first column of the content rows is item ID.\\n* The rest of the content columns are the entries in the language corresponding to the two-letter language code in the column header.\\n\\nThe example below follows these rules. It contains two items (column B and C). Each item has an ID (item1 and item2), a two-letter language code (English = en, Estonian = et), and corresponding English and Estonian localisations.\\n\\n![CSV format](advancedoperations/csv-format-example.png)\\n\\n#### Notes on CSV creation and uploading\\n\\n* Empty rows are ignored\\n* The order of entries in the file is retained\\n* All **defined** languages on a form are imported. This means that, if your target form doesn\'t support the language specified in the CSV file, the values will remain hidden.  In practice, for example, if you specify Estonian language valuesets like we did above, but your form doesn\'t have Estonian language translations enabled, the values in the \\"et\\" column will not appear in your Lists, nor will they be accessible until you define the Estonian language and reupload your CSV.  Defining a language for your form is as simple as going to the [Translations](https://docs.dialob.io/introduction/translations/) feature in the top menu bar and activating your desired language.\\n\\n_To avoid this issue, be sure to activate your desired languages via the Translations modal **before** uploading your CSV file._\\n\\n* All entry IDs are imported exactly how you wrote them in your CSV file. In the case of conflicts or other problems, error messages will be displayed, and you will need to resolve these as normal.\\n* Valueset entries are downloaded as a CSV file in the same format as described above.\\n* The following import modes are supported:\\n\\n  * **Replace all**: Replaces all valueset entries with the values from the CSV file.\\n  * **Append**: Appends values from the CSV file to the end of the existing valueset entries. This will cause ID conflicts if new CSV values have IDs which are the same as existing valueset entries\' IDs.\\n  * **Update**: Updates existing entries by ID and adds new entries from file.  \\n\\n---\\n\\n### Simple outline of steps to list-building with CSV {#outline}\\n\\nBelow is a simple outline for creating a list using CSV files from Google Sheets. A more detailed walkthrough for this process follows the outline.\\n\\n#### Creating and uploading the CSV file\\n\\n1. Create a csv file following the required format\\n2. Download file in .csv format (only .csv format is supported)\\n3. Create a new list in Composer and give it a name\\n4. Upload .csv file to that list via the upload button\\n\\n#### Applying the CSV file to your form\\n\\n5. Create the question to which you wish to append your list\\n6. If using multiple languages, open Translations and add your required language\\n6. Navigate to Translations/Fields, and translate the question to which you will append your list\\n7. Test the filling side by selecting an active language in the top right of the Composer window, followed by the Preview button.  \\n\\n---\\n\\n### Step-by-step walkthrough of single-language list-building with CSV {#walkthrough}\\n\\n**1. Create a CSV file and download it in .csv format _only_**\\n\\nFor this walkthrough, we will use a CSV file containing key-value pairs for animals. The CSV file has one language localisation: English (en).  \\n\\nCreate your CSV file according to the guidelines for required CSV format above, and download it to your local machine.\\n\\n![CSV format](advancedoperations/csv-format-example2.png)\\n\\n**2. Create a new list in Composer to hold your CSV values**\\n\\nNavigate to \\"Lists\\" in the top menu, and create a new list. Give the list a name, but do not fill in any list items.\\n\\n![Animals list](advancedoperations/animals1.png)\\n\\n**3. Upload your CSV file via the upload button in the Global Lists modal**\\n\\nClick the \\"Upload CSV\\" icon.\\n\\n![Uploading and downloading CSV](advancedoperations/upload-valueset2.png)\\n\\nThen, select your desired CSV file, followed by upload mode. For this example, we are going to select \\"Replace all\\" because we are dealing with a completely new list with no pre-existing values to edit or append to.\\n\\n![Uploading and downloading CSV](/advancedoperations/upload-valueset1.png)\\n\\nOnce you have uploaded your CSV file, you will see that the list will automatically be populated with your valuesets, which appear in English because the form\'s active language is English and the two-letter language codes used in the second column of the table determined this content to be of language \\"en\\".\\n\\n![Uploading and downloading CSV](advancedoperations/upload-valueset3.png)\\n\\n**4. Test your new list**\\n\\nAppend your list to a choice or multi-choice input type, write your question, and preview your form.\\n\\n![Filling side preview CSV](/advancedoperations/animals-csv-preview.png)\\n\\n---\\n\\n### Important notes and troubleshooting multi-language list-building with CSV {#multilanguage}\\n\\n* To ensure that all of your CSV\'s languages are recognised and added to your form upon upload, supported form languages **must be created** via the [Translations](https://docs.dialob.io/introduction/translations/) feature **BEFORE** you upload your CSV file!  \\n* This means the following: Composer will ignore the values of a CSV file associated with a language that has not been defined in Composer prior to CSV upload.  \\n* If you forget to activate a desired language prior to CSV upload, or you just wish to add support for other languages after the initial upload, activate the desired language via the Translation function and **reupload your list.**\\n* When looking at your list in the Lists window, you will see only the values associated with the currently active language in Composer. Changing the active language will change the values in the list to the specified language.  \\n"},{"build":{"created":1611828805,"modified":1612767716},"url":"./src/markdown/001_advanced_operations/004_downloading_json.md","name":"001_advanced_operations/004_downloading_json.md","content":"# Downloading a Dialog in JSON format\\n\\n## Quick Summary\\n\\n* Forms can be downloaded in JSON format\\n\\n---\\n\\n## Overview  \\n\\nYou can download a JSON file at any time which describes your current Dialog.  \\n\\nSimply click on the download icon in the top right of the Composer window.\\n\\n---\\n\\n![Preview Mode](advancedoperations/download-json.png)\\n\\n"},{"build":{"created":1612599863,"modified":1612786167},"url":"./src/markdown/001_advanced_operations/005_custom_variables.md","name":"001_advanced_operations/005_custom_variables.md","content":"# Custom variables and expressions\\n\\n\\n## Quick Summary\\n\\n* Context Variables are static/immutable variables, available across the entire dialog session\\n* Expression Variables are user-defined functions, available across the entire dialog session\\n* Custom variables are only available for use when their values are set. If the values are not set, they will not be present or usable in the session\\n\\n---\\n\\n## Overview: Custom Variables and Expressions\\n\\n**DEL** supports custom variables and custom expressions, called **Context Variables** and **Expression Variables** respectively, which can be used as part of dialog *visibility*, *required* or *validation* logic. These special variables/expressions are especially helpful for several situations where custom functionality is needed:\\n\\n* If you need to pre-fill default data into a response field\\n* When a filling session is to be initialised with pre-defined data, often pulled from an outside resource\\n* Writing custom mathematical and logical functions\\n\\nContext variables and expression variables can be of the following types: `Text`, `Number`, `Boolean`, `Date`, or `Time` with the exclusion of `Note` type.\\n\\nContext variables and expression variables can be a combination of existing variables or function calls.  \\n\\n---\\n\\n## Context variables\\n\\n**In terms of a dialog session, a context variable is a static variable: it is immutable in the dialog session and is available across the entire session.**  \\n\\n* A context variable has an ID, a type, and a default value.  \\n* A context variable can be called with its ID surrounded by curly braces. For example: ` {contextId}`.\\n* A context variable\'s value is set outside of the context of the given dialog session and is not tied to any specific request ID. It works like a \\"hidden field\\", and typically, it is used to preload a given dialog session with data, such as preloading CRM data of an identified user, which is known before launching the session.  \\n* A context variable  can also be any existing response ID in the current session. For example, if you have a Text type response with ID `myName`, you can output the value of `myName` in a `Note` type. Just surround the response ID with curley braces `{ }` from inside the `Note`. So, as a response ID: `myName` but as a context variable being called: `{myName}`.  \\n\\nBelow are some examples to demonstrate what context variables can look like.\\n\\n![Context variables examples](/advancedoperations/context-variable-examples.png)\\n\\n---\\n\\n## Expression variables\\n\\n**An expression variable is a user-defined function which is not coupled to any specific request ID. It can be used, for example, to find the sum of two request IDs of type `Number` or to validate a text input in multiple different responses.** \\n\\n* An expression variable has an ID and an expression (function).\\n* An expression variable can be called with its ID surrounded by curley braces. For example: `{expressionId}`.\\n* An expression variable can be any of the response IDs in the current Dialob session, a logical expression, or a mathematical operation.\\n  * **Response ID in the current session**: Examples include default IDs such as `text1`, `date3`, `boolean2` or user-created IDs such as `isNewCustomer`, `postalCode2`, etc..\\n  * **Logical expression**: Example: `{date3 > date2}`, which can be read as \\"**If** date 3 is later (greater) than date 2, **then** return true\\".\\n  * **Mathematical operation**: Example: `{1 + 5 + 2 * (6 / 3)}`, which can be read as \\"6 divided by 3, 2 multiplied by 2, and then 1 plus 5.\\n\\nBelow are some examples to demonstrate what expression variables can look like.\\n\\n![Context variables examples](/advancedoperations/expression-variable-examples.png)\\n\\n**NOTE**: **Requests, expression variables or context variables** are *ONLY* available when their values are set. This means that if the value is not set, then they will not be not present in the given dialog context.  In other words, in **DEL**, there is no such thing in as a NULL as value for a variable.\\n\\nThe next page outline the use of context and expression variables.\\n"},{"build":{"created":1612599863,"modified":1612786167},"url":"./src/markdown/001_advanced_operations/006_using_custom_variables.md","name":"001_advanced_operations/006_using_custom_variables.md","content":"# Using custom variables and expressions\\n\\n## Quick Summary\\n\\n* Custom variables are created in the \\"Variables\\" menu item at the top of the Composer screen\\n* Custom variables have many use cases, including\\n  * Pre-filling data on a question \\n  * Initialising a form filling session with prefilled data\\n  * Creation of custom functions\\n* It is recommended to leave custom variables\' \\"Published\\" value unselected as per default, unless special implementation is required\\n* A custom variable built using *question input data* becomes active only after all of its questions have been asked. This means that it must \\"wait\\" to receive input data before it can start working\\n\\n\\n[Example basic use cases](#basic-use-cases)  \\n[Using context variables to pre-fill default data in a question](#pre-fill)  \\n[Using context variables to initialise a filling session with pre-defined data](#initialise-session)  \\n[Using expression variables to perform mathematical and logical operations](#expression-variable-function)  \\n\\n---\\n\\n## Overview: Creating custom variables and expressions\\n\\n\\nContext variables and expression variables can be created in the \\"Variables\\" menu at the top of the Composer window.  \\n\\n![variables menu](/advancedoperations/variables-menu.png)\\n\\nSelecting the \\"Variables\\" menu option will present you with the variables window. From here, you can choose to create context or expression variables via the tabs.\\n\\n![variables menu](/advancedoperations/variables-menu2.png)\\n\\n---\\n\\n**NOTE**: When you create a variable, it is important to take note of the \\"Published\\" feature.\\n\\n![variables menu](/advancedoperations/variables-published.png)\\n\\n**Context and expression variables both have the \\"Published\\" option.  Publishing a variable will make its value available on the filling side UI.**\\n\\nIt is recommended that, unless required by a specific implementation, the \\"Published\\" setting remain unselected.\\n\\n**\\"Published\\" is unselected by default.**\\n\\n---\\n\\n### General example of creating and injecting a custom variable into a dialog\\n\\nFor this example, we create a custom variable called `{age}` which will be of type `Number` and will have a default value of 15. This variable will be used in a Boolean response field and will prompt the user on the filling side with the following:\\n\\n`Is your age 15?`\\n`YES/NO`\\n\\nWe begin by creating our context variable.\\n\\n![age context variable](/advancedoperations/age3.png)\\n\\nNow that we have a variable created, we want to put it to use by inserting it into a response field. To do this, the we take the variable ID, surround it with curly braces`{ }`, and insert it in the field where we want to use it. In this case, it is in the \\"Label\\" field of ageQuestion1. \\n\\nSo, the variable\'s ID is `age`, but when used in a response field, we must refer to it as `{age}`.  \\n\\nIn this next step, we create a boolean response field and place our context variable inside, remembering to surround it with curly braces: `{age}`. This boolean response field will ask the user if his/her age is equivalent to the default value set by the context variable, which we set to 15.  We then preview the variable on the filling side:\\n\\n![Age context variable](/advancedoperations/age-context-variable-preview1.png)\\n\\nBefore you can actually preview the form, it is important to remember that, whenever context variables are exist in a dialog, whether or not they are being used at the time, you will need to declare or check their default values before the filling side preview mode can be shown. This means that, after you click Preview but before you see your form, you will be presented with the Context Variable Preview window as seen below. This window will show you your context variables and any default values you have given them.\\n\\nIn the example below, you can see here that a value of 15, which we set for our `{age}` context variable, shows up as the default value. This value will appear on the filling side unless we type in a different value.\\n\\n![Age context variable](/advancedoperations/is-your-age2.png)\\n\\nFinally, on the filling side, this is the output:\\n\\n![Age context variable](/advancedoperations/is-your-age3.png)\\n\\n---\\n\\n## Example basic use cases {#basic-use-cases}\\n\\n[Using context variables to pre-fill default data in a question](#pre-fill)  \\n[Using context variables to initialise a filling session with pre-defined data](#initialise-session)  \\n[Using expression variables to create a function to add two numbers together](#expression-variable-function)  \\n\\n---\\n\\n### Using context variables to pre-fill data in a question {#pre-fill}\\n\\nIn this use case, a context variable is used to pre-fill a dialog response field with a default value for a customer\'s age.\\n\\n#### Step 1: Create context variable, specify its ID, type, and default value. Leave \\"Published\\" unchecked.\\n\\n![Context Variable Type](/advancedoperations/age-context1.png)\\n\\n#### Step 2: Insert context variable into response field in Composer\\n\\nCreate your response field and enter the context variable, surrounded by curly braces, right into your response field.\\n\\n![Context Variable Type](/advancedoperations/age-context2.png)\\n\\n#### Step 3: Hit the Preview button to bring up the Context Variable preview before viewing the filling side\\n\\n![Context Variable Type](/advancedoperations/age-context3.png)\\n\\n#### Step 4: Preview the filling side with the custom default value\\n\\n![Context Variable as pre-filled value](/advancedoperations/age-context4.png)\\n\\n---\\n\\n### Using context variables to initialise the filling session with pre-filled data {#initialise-session}\\n\\nSimilarly to setting default values with context variables, DEL also supports a way to initialize the filling session with predefined data already prepared. This is done by declaring a set of attributes via context variables that are passed to the dialog as the filling session is started.\\n\\nIn the same way as the previous example, you need to declare or confirm the values of the context variables on the Composer side before you can preview the form on the filling side. \\n\\nIn this next use case, we are going to create a filling session that outputs predefined data and does not require any user inputs to produce that data.  We will display three predefined values: `firstName`, `surname`, `age`.\\n\\n#### Step 1: Create context variables, specify their IDs, types, and default values. Leave \\"Published\\" unchecked.\\n\\n![Personal Info Context Variables](/advancedoperations/pre-fill1.png)\\n\\n **Note**: Variable names must be the same, one-to-one, on both sides (variable and Composer side) in order for mapping to work.\\n\\n#### Step 2: Enter context variables in a `Note` Output type (for the sake of this exercise)\\n\\nEnsure that variable names are the same both in the Variable editor as well as on the Composer side.\\n\\n![Entering default values](/advancedoperations/pre-fill2.png)\\n\\n#### Step 3: Before previewing filling side, set default values for context variables  \\n\\nBefore context variables can work, their default values must be set. If you create context variables without also assigning their default values, Composer will prompt you to assign their default values before dialog Preview mode for the filling side can be activated.\\n\\nThe window below will appear when you hit the \\"Preview\\" button. You\'ll be prompted to input the context variable default values.\\n\\n![Entering default values](/advancedoperations/pre-fill3.png)\\n\\n#### Step 4: Replace the variables\' default values with the data you want pre-filled on the filling side\\n\\n![Entering default values](/advancedoperations/pre-fill4.png)\\n\\n#### Step 5: View output on filling side\\n\\n![Entering default values](/advancedoperations/pre-fill5.png)\\n\\n---\\n\\n### Using expression variables to create and execute mathematical functions {#expression-variable-function}\\n\\nIn this example, we create several expression variables which will perform mathematical and logical operations on data that the user inputs on the filling side. \\n\\n#### Step 1: Create form inputs\\n\\nBefore we create our expression variables, let\'s first create the inputs that the expression variables will perform operations on. We will create two inputs of type Integer: `number1` and `number2`.\\n\\n![Fun with numbers](/advancedoperations/fun-with-numbers1.png)\\n\\nPreviewing the filling side gives us this:\\n\\n![Fun with numbers](/advancedoperations/fun-with-numbers2.png)\\n\\n#### Step 2: Write expression variable functions\\n\\nNext, we will create several expressions to perform operations on whatever integer input we get from the filling side.  Keep in mind that **creating an expression variable is almost the same as creating a context variable**:  \\n\\n* In the ID field, write the desired name of the custom function. This is how you will call this function later.\\n* In the Expression field, write the ID(s) of the responses to process with the function as well as the mathematical / logical operators that will be used.\\n* Remember to leave \\"Published\\" unchecked unless your specific implementation requires it be checked.\\n* Expressions can be broken into multiple lines. The reason for this is to increase readability if the expressions grow long.\\n\\nThe expressions we will create are as follows:  \\n\\n| ID                | Expression           |\\n|-------------------|----------------------|\\n| add               | number1 + number2    |\\n| subtract          | number1 - number2    |\\n| multiply          | number1 * number2    |\\n| comboOperation    | (number1 + number2) * (number1 + number2) |\\n| isGreater         | number1 > number2    |\\n| isDifferentNumber | number1 != number2   |\\n\\nAnd in Composer, they look like this:\\n\\n![Fun with numbers](/advancedoperations/fun-with-numbers4.png)\\n\\n**Calling an expression variable** works in the same way as calling a context variable. For this example, we are going to call the expression variables in a note output, where we will be able to view the outcome of their mathematical operations after the user has input integers into the filling side.  \\n\\n#### Step 3: Create a note output into which you can insert your expression variables and view the outcome of your operations\\n\\nCreate a new output type: `note` in your group and enter the following:\\n\\n```markdown\\n\\nThe sum after adding is: {add}.  \\n\\nThe remainder after subtracting is: {subtract}.  \\n\\nThe product after multiplying is: {multiply}.  \\n\\nThe super fun comboOperation result is: {comboOperation}.  \\n\\nIs number1 greater than number2?  {isGreater}.\\n\\nIs number1 a different number than number2?  {isDifferentNumber}.  \\n\\n```\\n\\nDepending on how you laid out your group/input structure, on the Composer side, you should see something like this:\\n\\n![Fun with numbers](/advancedoperations/fun-with-numbers5.png)\\n\\n#### Step 4: Preview and test\\n\\nFinally, hit the Preview button and test your form to see if everything is working correctly.\\n\\n![Fun with numbers](/advancedoperations/fun-with-numbers6.png)\\n\\n**NOTE** A custom variable built using *question input data* becomes active only after all of its questions have been asked!\\nThis means that, for example, the expression variables created above in the previous cannot work until number1 and number2 have been answered on the filling side.\\n"},{"build":{"created":1611921525,"modified":1612767716},"url":"./src/markdown/002_input_and_output_types/000_text.md","name":"002_input_and_output_types/000_text.md","content":"# Text and Text box types\\n\\n## Quick Summary\\n\\n* Text and Text Box both return text (string)\\n* The only difference between them is how they are rendered on the filling side\\n\\n---\\n\\n## Overview  \\n\\nBoth text and text box return text (string) values. There is no length difference between the maximum text length for either of these. \\n\\nThe only difference between them is how they appear on the filling side.\\n\\n* **Text**: A single-line text field\\n* **Text box**: A multi-line text field\\n\\n---\\n\\nOn the Composer side, they both look the same:\\n\\n![Text and Text Box](types/text-textbox1.png)\\n\\n\\nBut on the filling side, the rendering difference is visible:\\n\\n![Text and Text Box](types/text-textbox.png)\\n\\n\\n## Creating a new text response\\n\\n1. Select \\"Add item\\" --\x3e \\"Structure\\" --\x3e \\"Group\\" \\n2. Select \\"Add item\\" --\x3e \\"Inputs\\" --\x3e \\"Text\\" / \\"Text box\\"\\n\\n"},{"build":{"created":1611921525,"modified":1612859514},"url":"./src/markdown/002_input_and_output_types/001_number.md","name":"002_input_and_output_types/001_number.md","content":"# Number type\\n\\n## Quick Summary\\n\\n* Number responses may only be whole numbers\\n* Number return type is `Integer`\\n* Typical validation example can be seen at the bottom of this page\\n\\n---\\n\\n## Overview\\n\\nNumber responses are used in the case where whole numbers are required. Decimal points will be ignored on the filling side so as to provide \\"automatic validation\\" that only whole numbers are entered. See examples:\\n\\n![Number Example](types/number-example.png)\\n\\n---\\n\\n## Creating a new Boolean response\\n\\nCreating a new Number response works in the same way as other types:\\n\\n1. Select \\"Add item\\" --\x3e \\"Structure\\" --\x3e \\"Group\\"\\n2. Select \\"Add item\\" --\x3e \\"Inputs\\" --\x3e \\"Integer\\"\\n\\n---\\n\\n## Typical validation example\\n\\n### Ensuring a number falls within a specified range\\n\\nIn this example, we create a response where the user is required to enter a number between 1 and 10. If a response is not within that range, our validation message will appear. This example shows a situation where the input does not match the validation requirements.\\n\\n**Validation expression**: `answer < 1 or answer > 10`\\n**Another version of a valid expression**: `number1 < 1 or number1 > 10`\\n\\n**Validation message**: \\"Number must be between 1 and 10, and your number doesn\'t fall in this range!\\"\\n\\n**Expected result**: The user is going to enter a response of 15. This will fall outside of the acceptable range and cause the validation message to appear. \\n\\n**Example screenshots**\\n\\nComposer side\\n\\n![Number Validation](types/number-validation1.png)\\n\\n\\nFilling side\\n\\n![Number Validation](types/number-validation2.png)\\n"},{"build":{"created":1611921525,"modified":1612859514},"url":"./src/markdown/002_input_and_output_types/002_decimal.md","name":"002_input_and_output_types/002_decimal.md","content":"# Decimal type TODO\\n\\n## Quick Summary\\n\\n* Decimal responses may be entered as whole numbers and as decimal values\\n* Decimal return type is a decimal number \\n* Typical validation example can be seen at the bottom of this page\\n\\n---\\n\\n## Overview\\n\\nDecimal responses are used in cases where more precision is needed than whole numbers can provide:\\n\\nSee example:\\n\\n![Decimal Example](types/decimal-example.png)\\n\\n---\\n\\n## Creating a new decimal response\\n\\nCreating a new Number response works in the same way as other types:\\n\\n1. Select \\"Add item\\" --\x3e \\"Structure\\" --\x3e \\"Group\\"\\n2. Select \\"Add item\\" --\x3e \\"Inputs\\" --\x3e \\"Decimal\\"\\n\\n---\\n\\n## Typical validation example TODO\\n\\n### Checking that a decimal value is greater than or less than zero\\n\\nIn this example, we are going to validate that a user enters a decimal value greater than zero. If the input is less than or equal to zero, we will trigger a validation message.\\n\\nValidation expression: `answer <= 0`\\nAnother version of a valid expression: `decimal1 <= 0`\\n\\nValidation message: \\"You cannot add 0 or less to your account!\\"\\n\\nExpected result: The user is going to enter a response of -5. This will fall outside of the acceptable range and cause the validation message to appear. \\n\\n**Example screenshots**\\n\\nComposer side\\n\\n![Decimal Validation](types/decimal-validation1.png)\\n\\n\\nFilling side\\n\\n![Decimal Validation](types/decimal-validation2.png)\\n\\n"},{"build":{"created":1611921525,"modified":1612767716},"url":"./src/markdown/002_input_and_output_types/003_boolean.md","name":"002_input_and_output_types/003_boolean.md","content":"# Boolean type TODO\\n\\n## Quick Summary\\n\\n* Boolean is used for yes/no or true/false questions.\\n* Return type will be a boolean value: `true` or `false`. \\n\\n---\\n\\n## Overview\\n\\nBoolean responses are used for true/false situations. When you create a Boolean response, a button will be rendered on the filling side with YES/NO selection options. See example:\\n\\n![Boolean Example](types/boolean-example.png)\\n\\n---\\n\\n## Creating a new Boolean response\\n\\nCreating a new Boolean response works in the same way as other types:\\n\\n1. Select \\"Add item\\" --\x3e \\"Structure\\" --\x3e \\"Group\\"\\n2. Select \\"Add item\\" --\x3e \\"Inputs\\" --\x3e \\"Boolean\\"\\n\\n"},{"build":{"created":1611921525,"modified":1612859514},"url":"./src/markdown/002_input_and_output_types/004_date.md","name":"002_input_and_output_types/004_date.md","content":"# Date type\\n\\n## Quick Summary\\n\\n* Date type creates a date picker on the filling side\\n* Date type returns a date in the format of \u201cyyyy-mm-dd\u201d. See more ISO Date.(LINK)\\n* Two typical validation examples can be seen at the bottom of this page\\n\\n---\\n\\n## Overview\\n\\nDate type creates a date picker in the form of a calendar on the filling side:\\n\\n![date picker](types/date-picker.png)\\n\\n---\\n\\n## Creating a new date response \\n\\n\\nCreating a new Date response works in the same way as other types:\\n\\n1. Select \\"Add item\\" --\x3e \\"Structure\\" --\x3e \\"Group\\"\\n2. Select \\"Add item\\" --\x3e \\"Inputs\\" --\x3e \\"Date\\"\\n\\n---\\n\\n## Two typical validation examples\\n\\n### Example A: A date is not in the past\\n\\nA typical use case for Date type is verification that a user-selected date is **not** in the past. This operation can be accomplished with the `today()` function and the following DEL notation entered into the date response type validation field:\\n\\n`responseId < today()`\\n\\nIn the following case, our response id is `date1`, and the expression is validating whether `date1` is **earlier** than today\'s date:\\n\\n`date1 < today()`\\n\\n![date validation one](types/date-in-past1.png)\\n\\nThis validation expression will trigger our validation message when a user selects a date in 1995:\\n\\n![date validation two](types/date-in-past2.png)\\n\\n\\n### Example B: A date is not in the past, not in the future, and a time limit applies to the situation\\n\\nAnother typical use case builds on the first example. In the context of an insurance claim, we want to ensure three things:\\n\\n1. A user-entered date is not in the past\\n2. The claim data cannot be in the future\\n3. If the incident happened more than 30 days ago, the claim is no longer valid\\n\\n\\n**Validation message**: \\"Incident date cannot be in the future, and incident date cannot be more than 30 days in the past. Please check entered dates for these criteria.\\"  \\n**Validation expression**: `incidentDate > today() or incidentDate < today() -30 days`\\n\\nIn plain language, this Validation expression says   \\n\\n_\\"incidentDate cannot be later than today, and incidentDate cannot be earlier than 30 days before today\\"_\\n\\n**Expected result**: The user is going to enter a date which is more than 30 days in the past. This will trigger the validation message. \\n\\n\\nOn the Composer side:\\n\\n![date validation one](types/date-validation1.png)\\n\\n\\nOn the filling side: \\n\\n![date validation one](types/date-validation2.png)\\n"},{"build":{"created":1611921525,"modified":1612863656},"url":"./src/markdown/002_input_and_output_types/005_choice.md","name":"002_input_and_output_types/005_choice.md","content":"# Choice type\\n\\n## Quick Summary\\n\\n* Choice type functions with an attached list\\n* A Choice return type will be an ID of selected row in the list\\n* It allows users to choose only one option from the list\\n* Creating a Choice and a Multi-choice type follows the same process\\n* Syntax for Choice type logic writing and a typical usage example can be seen at the bottom of this page\\n\\n\\n---\\n\\n## Overview\\n\\nChoice type utilises a global or local list to populate a single-choice selection menu.\\n\\n---\\n\\n### Creating a new choice response \\n\\n\\n**To create a Choice type, follow the steps of creating a multi-choice input type:**\\n\\n1. Create a group to contain your choice response: Select \\"Add item\\" --\x3e \\"Structure\\" --\x3e \\"Group\\"\\n2. Create the choice input item: Select \\"Add item\\" --\x3e \\"Inputs\\" --\x3e \\"Choice\\"\\n3. Create or apply global or local list which will form the individual choice items: Select the hamburger icon in the top right corner of the question window and select \\"Options\\". You will then be given the option to apply a global list or create a local list.\\n\\nBelow is an example of a choice type on the filling side. The choice list has four items, and their associated IDs are `opt1`, `opt2`, `opt3`, `opt4`.\\n\\n![](types/choice1.png)\\n\\n---\\n\\n## Syntax for Choice type logic writing\\n\\nWhen using logic with Choice type, the syntax is as following:\\n\\nWhen matching a single item: `responseId = \\"listItemId\\"`  \\nEvaluates true when the return value of question1 is opt1.\\n\\nWhen matching multiple items: `responseId in (\\"listItemId1\\", \\"listItemId2\\", \\"listItemId3\\")`  \\nThis evaluates true when the return value of question1 is one of the following: opt1, opt3 or opt4 possible *Choice* key values.  \\n\\nWhen matching multiple items: `responseId not in (\\"listItemId1\\", \\"listItemId2\\", \\"listItemId3\\")`  \\nThis evaluates true when the return value of question1 is NOT one of the following opt1, opt3 or opt4 possible *Choice* key values.\\n\\n---\\n\\n## Typical validation example\\n\\nIn this example, we want to evaluate against a single choice option. Depending on this choice, a corresponding note output will be displayed.\\n\\nTo do this, we create a group with a Choice type. The Choice type has a local list attached to it with three values. We have two note outputs. We write visibility rules for the note outputs and set them to be shown depending on which option the user selects from the Choice list.\\n\\n**Note visibility expression**: `list2 = \\"countryside`  \\n\\n**Expected behaviour**: When a client selects \\"Rural Countryside\\" from the Choice list, the Note output visibility rule will be triggered, and note content will be output.\\n\\nOn the Composer side:\\n\\n![Choice example](types/choice-example1.png)\\n\\n\\nOn the filling side:\\n\\n![Choice example](types/choice-example2.png)\\n\\n"},{"build":{"created":1611921525,"modified":1612865885},"url":"./src/markdown/002_input_and_output_types/006_multi-choice.md","name":"002_input_and_output_types/006_multi-choice.md","content":"# Multi-choice type\\n\\n## Quick Summary\\n\\n* Multi-choice type functions with an attached list\\n* A multi-choice return type will be a set of an ID of selected rows from the list\\n* It allows users to choose one or more items from the list\\n* Creating a Choice and a Multi-choice type follows the same process\\n* Syntax for Multi-choice type logic writing and a typical usage example can be seen at the bottom of this page\\n\\n---\\n\\n## Overview  \\n\\nMulti-choice type utilises a global or local list to populate a multiple-choice selection menu.\\n\\nBelow is an example of a multi-choice type on the filling side: \\n\\n\\n![Multi-choice respone example](types/multi-choice-example.png)\\n\\n---\\n\\n## Creating a new multi-choice response\\n\\n\\n**To create a multi-choice response, follow the steps of creating a choice response:**\\n\\n1. Create a group to contain your multi-choice response: Select \\"Add item\\" --\x3e \\"Structure\\" --\x3e \\"Group\\"\\n2. Create the multi-choice input item: Select \\"Add item\\" --\x3e \\"Inputs\\" --\x3e \\"Multi-choice\\"\\n3. Create or apply global or local list which will form the individual multi-choice items: Select the hamburger icon in the top right corner of the question window and select \\"Options\\". You will then be given the option to apply a global list or create a local list.\\n\\n---\\n\\n## Visual guide to creating a multi-choice type\\n\\n* **Create a group to hold your response.**\\n* **Create a multi-choice input.**\\n* **Write your group label and multi-choice label.**\\n\\n![Multi-choice](types/multi-choice1.png)\\n\\n**After creating a group and a multi-choice input, click the hamburger icon in the top right corner of the question window and select `Options`. You will then be given the option to apply a global list or create a local list.**\\n\\n![Multi-choice](types/multi-choice2.png)\\n\\n**Create a list of input items. Add visibility rules if desired.**\\n\\n![Multi-choice](types/multi-choice3.png)\\n\\n**The filling side preview**\\n\\n![Multi-choice](types/multi-choice-after.png)\\n\\n---\\n\\n## Syntax for Multi-choice type logic writing\\n\\nTo write rules to evaluate Multi-choice responses, use the ID of the question you wish to evaluate against, followed by the `in` keyword, and then the ID of the Multi-choice question.\\n\\nExample: `\\"id1\\" in multichoice1`\\n\\nMore examples: \\n\\nWhen matching a single item: `\\"responseId1\\" in multichoiceId1`  \\nEvaluates true when `responseId1` is selected from `multichoiceId1`\\n\\nWhen matching a single item: `\\"responseId1\\" not in multichoiceId1`  \\nEvaluates true when `responseId1` is **not** selected from `multichoiceId1`\\n\\nWhen matching multiple items within the same multi-choice response: `\\"responseId1\\" not in multichoiceId1 or \\"responseId2\\" not in multichoiceId1`  \\nEvaluates true when `responseId1` and `responseId2` are **not** selected from `multichoiceId1`\\n\\n---\\n\\n## Typical validation example\\n\\n### Specifying the number of selections a user must make\\n\\nTo validate/specify the number of choices within a given multi-choice request, use the `count( )` function and create validation logic to fit your needs.  \\n\\nThe example below shows a situation where the user is not permitted to choose nothing, and they are required to select at least two choices. \\n\\nOn the Composer side:\\n\\n![Multi-choice](types/multi-choice-validation.png)\\n\\nOn the filling side, **before** a choice is made:\\n\\n![Multi-choice](types/multi-choice-validation2.png)\\n\\nOn the filling side, **after** the correct number of choices is made:\\n\\n![Multi-choice](types/multi-choice-validation3.png)\\n\\n\\n\\n\\n\\n\\n\\n\\n"},{"build":{"created":1611999392,"modified":1612865885},"url":"./src/markdown/002_input_and_output_types/007_multi-row.md","name":"002_input_and_output_types/007_multi-row.md","content":"# Multi-row type\\n\\n## Quick Summary\\n\\n* Multi-row creates an inline row of any number of input fields\\n* Multi-row response type: TODO\\n* The number of rows in a multi-row element directly corresponds to the number of input fields created.\\n* A visibility-logic example can be seen at the bottom of this page\\n\\n\\n---\\n\\n## Overview\\n\\nMulti-row creates an inline row of any number of input fields. The number of input fields created will determine how many rows the multi-row input will consist of.  \\n\\nBelow is an example of a multi-row input with three input fields.\\n\\n**Composer side**\\n\\n![Multi-row composer side](types/multi-row-composer-example.png)\\n\\n**Filling side**\\n\\nNote the \\"Add new\\" button. This will add as many identical rows as needed.\\n\\n![Multi-row filling side](types/multi-row-filling-example.png)\\n\\n**Filling side after selecting \\"Add new\\" row multiple times.**\\n\\n![Multi-row filling side](types/multi-row-filling-example2.png)\\n\\n\\n---\\n\\n### Creating a multi-row response \\n\\n\\n**To create a multi-row group:**\\n\\n1. Create a multi-row group to contain your response: Select \\"Add item\\" --\x3e \\"Structure\\" --\x3e \\"Multi-row group\\"\\n2. Create the label(name) for the multi-row group, which will serve as the prompt for the user on the filling side.\\n3. Create the input fields: The input fields created here will be the visible fields on the filling side.\\n\\n![Multi-row](types/multirow1.png)\\n\\n---\\n\\n\\n![Multi-row filling side](types/multirow2.png)\\n\\n---\\n\\n## Visibility-logic example\\n\\n### Showing an additional field within a multi-row type depending on a previous answer \\n\\nIn this example, we want to show a particular field within a multi-row item only if the user selects a particular boolean value.\\n\\n* We create a multi-row group with three input fields (two text fields and one boolean). \\n* We write a visibility rule to trigger the visibility of a fourth field (`list1`, a choice menu), if the user answers \\"Yes\\" to `boolean1`. \\n\\nOur items are as follows: \\n\\n`text2`: First Name  \\n`text4`: Last Name  \\n`boolean1`: Do you wish to be added to our mailing list?  \\n\\n...if the user answers \\"yes\\".... then show\\n\\n`list1`: Please select the topic you are most interested in.  \\nVisibility rule: `boolean1 = true`  \\n\\n**Example screenshots**\\n\\nComposer side\\n\\n![Rowgroup visibility](types/rowgroup-visibility1.png)\\n\\nFilling side\\n\\n![Rowgroup visibility](types/rowgroup-visibility2.png)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n"},{"build":{"created":1611921525,"modified":1612866238},"url":"./src/markdown/002_input_and_output_types/008_survey.md","name":"002_input_and_output_types/008_survey.md","content":"# Survey type\\n\\n## Quick Summary\\n\\n* A complete Survey response type is comprised of three parts: Survey group, survey options, and survey inputs\\n* A Survey return type is a key\\n* Survey buttons can be horizontally or vertically arranged\\n* Follow the (visual) guide below to create a Survey response type.\\n* Syntax for Survey type logic writing and a typical usage example can be seen at the bottom of this page\\n\\n---\\n\\n## Overview  \\n\\nSurvey type uses radio buttons to collect input from users. Below is an example:\\n\\n![Survey List Creation](types/survey-filling-side.png)\\n\\n\\nSurvey types function a bit differently than other types.  For example, where a **Text** response type is located within a group which can contain any number of various response types, a **Survey** response type is the group itself. \\n\\n**A complete Survey response type is comprised of three parts:**\\n\\n1. The **survey group**, which can be thought of the \\"question\\" itself.\\n2. The **survey options** which are created with a global or a local list. \\n3. The **survey inputs**, which are text fields. \\n\\nIn summary, one survey group is the equivalent of one survey \\"whole\\" encompassing these three elements. This example below illustrates the three cohesive elements of a Survey response type as they appear on the filling side.\\n\\n![Survey List Creation](types/survey-filling-side-b.png)\\n\\n---\\n\\n## Creating a new survey response\\n\\nA Survey response type is created as a Survey Group or Survey Group (Vertical). \\n\\nTo create a survey:\\n\\n* Click \\"Add item\\"\\n* Select \\"Structure\\"\\n* Select \\"Survey Group\\" or \\"Survey Group (Vertical\\"\\n* Give your survey question a name by writing in the Survey Group label field\\n* Create a global/local list and attach it to the Survey group via the Survey Group-level hamburger icon + \\"Options\\" hamburger.\\n* Create survey inputs by clicking \\"Add item\\" in the bottom left of the Survey Group, and select \\"Survey Item\\". Write your text accordingly.\\n\\nFollow the guide below for screenshots of this process.\\n\\n---\\n\\n## Visual guide to creating a survey group\\n \\n**Click the \\"Add item\\" button and select \\"Structure\\", then \\"Survey Group\\".**\\n\\n![Survey Group](types/survey-group.png)\\n\\n**Next, survey values are needed to populate the Survey group. Create a list (Global or local) which will comprise your inputs.**\\n\\n![Survey List Creation](types/survey-input-list.png)\\n\\n**Next, apply your list of survey values to a survey group**  \\n\\nClick the hamburger icon in the top-right corner of the survey group. Then, select the list you wish to apply.\\n\\n![Survey List Selection](types/select-survey-input-list.png)\\n\\n**After that, create survey inputs by creating a survey input within the survey group**.\\n\\n![Survey List Creation](types/create-survey-input.png)\\n\\n---\\n\\n## Syntax for Survey type logic writing\\n\\nWhen matching a single item:  \\n`question1 = \\"opt1\\"`  \\nEvaluates true when the return value of question1 is opt1.\\n\\nWhen matching multiple items:  \\n`question1 in (\\"opt1\\", \\"opt3\\", \\"opt4\\")`  \\nEvaluates true when the return value of question1 is one of the following: opt1, opt3 or opt5 possible *Survey* key values.\\n\\nWhen matching multiple items:  \\n`question1 not in (\\"opt1\\", \\"opt3\\", \\"opt4\\")`  \\nEvaluates true when the return value of question1 is NOT one of the following: opt1, opt3 or opt4 possible *Survey* key values.\\n\\n## Typical visibility-logic example\\n\\nFor this situation, we create a customer satisfaction survey. If the user indicates via a survey item that a service was \\"poor\\", we want to trigger a text input to appear so that we can collect additional information on how to improve in that area of service.\\n\\nWe create a survey group and three survey inputs:\\n\\n* Friendliness of staff\\n* Response time for service inquiries\\n* Quality of solution to my problem\\n\\nWe create three survey options via a local list. These options describe the quality of service:\\n\\n* `opt1` :  poor\\n* `opt2` :  average\\n* `opt3` :  good\\n\\nWe add a visibility rule to a text field inside the survey group that will appear on the filling side if a user selects `opt1: poor` and to describe \\"Staff Friendliness\\".\\n\\n**Text input**: \\"Please tell us how we can improve our staff friendliness\\"\\n**Visibility rule**: `survey1 = \\"opt1\\"`\\n\\nOn the Composer side:\\n\\n![Survey Example](types/survey-example1.png)\\n\\nOn the filling side:\\n\\n![Survey Example](types/survey-example2.png)\\n\\n"},{"build":{"created":1611921525,"modified":1612786167},"url":"./src/markdown/002_input_and_output_types/009_time.md","name":"002_input_and_output_types/009_time.md","content":"# Time type\\n\\n## Quick Summary\\n\\n* Time type returns a time in the format of \\"hh:mm:ss\\".\\n* Time type appears as a time picker on the filling side.\\n* Example of validating time type can be seen at the bottom of this page.\\n\\n---\\n\\n## Overview  \\n\\nTime type creates a time picker on the filling side:\\n\\n![time picker](types/time-picker.png)\\n\\n---\\n\\n## Creating a new time response\\n\\n1. Select \\"Add item\\" --\x3e \\"Structure\\" --\x3e \\"Group\\" \\n2. Select \\"Add item\\" --\x3e \\"Inputs\\" --\x3e \\"Time\\"\\n\\n\\n## Validating Time type\\n\\nLogical operators can be used to determine the relation of different time values to each other.\\n\\nUsing the \\"less than\\" `<` operator essentially means \\"earlier than\\" in Time type.  The \\"greater than\\" `>` operator essentially means \\"later than\\".\\n\\n\\nFor example:\\n\\nTo check if Time1 is earlier than Time2, use the \\"less than\\" operator: `<` \\n\\n`time1 < time2` \\n\\n\\n\\n\\n\\n\\n"},{"build":{"created":1610128748,"modified":1612767716},"url":"./src/markdown/003_dialob_expression_language:_(DEL)/000_basic_del.md","name":"003_dialob_expression_language:_(DEL)/000_basic_del.md","content":"# Basics of DEL\\n\\n## Quick Summary\\n\\n* DEL expressions resemble traditional grammar and have a subject (Request ID), verb (operator or function), and condition (elements or values to compare against or evaulate against).\\n* DEL reserved words operate similarly to verbs (is answered, is not answered, is valid, etc.) or connecting words (and, or).\\n* Functions are actions. Functions are reserved words followed by parenthesis. The thing you want to perform the action on goes into the parenthesis. Not all functions require inputs in the parenthesis. \\n* A String type is the same as a \\"text\\" type, which includes letters, numbers, and punctuation.\\n* DEL expressions do not end in any punctuation such as full stops or semi-colons.\\n* DEL expressions are if/then statements, where the **if** part is written by the user, and the **then** part is handled and evaluated by Dialob Manager\\n\\n---\\n\\n## Overview: Introduction to Dialob Expression Language (DEL)\\n\\n* **DEL: Dialob Expression Language** was designed for use with Dialob Composer\\n  * It is used to powerfully yet simply define the control logic of online forms. \\n* DEL is continuously enhanced and improved with new features to cover more complex cases and extend its usability to new areas.\\n\\n---\\n\\n### Concepts of DEL in linguistic terms\\n\\nLet\'s think about DEL in terms of simple grammar. All sentences have a subject and a verb.\\n\\nA subject is what the sentence is about.  \\nA verb shows the action in the sentence. \\n\\nLet\'s see an example first:\\n\\n\\"A customer\'s age is at least 21.\\"\\n\\nIn this sentence, _customer_ is the subject, and _is_ is the verb. In Dialob, you will be writing expressions both similar and more complex than this, which will comprise the core of your form logic.  So, let\'s \\"translate\\" this English sentence into DEL to see what it looks like. \\n\\nFor one of our form questions, we need to validate that a customer is at least 21 years of age, because if he/she is younger than 21, we cannot sell certain products. In DEL, you can write this expression as follows:\\n\\n`customerAge >= 21`\\n\\nIn this example, `customerAge` is the Request ID (subject), `>=` is the logical operator (verb), and \\"21\\" is the value that we are to validate against.  We will revisit these terms shortly.\\n\\n### Syntax of a DEL expression: Examples\\n\\nA DEL expression is basically an **If/Then statement**.  The \\"If\\" part is written by the user, and the \\"Then\\" part represents the result of the expression. The \\"then\\" part can evaluate to `true` or `false` based on how the user writes the \\"If\\" part.  For example, here we have two questions. The second question should only appear if the user specifies in the previous question that his/her age is greater than 25. \\n\\n```javascript\\nquestion1:  How old are you?\\nAnswer1: 25\\n\\nquestion2: Are you married?\\nVisibility Rule: question1 > 25 \\n```\\n\\nHere, `question1 < 25` is the \\"if\\" part of the DEL expression. The \\"then\\" part is implied.  **If** the user enters his age as 26, **then** the statement will evaluate to true, and **then** this Question 2 will be displayed. However, **If** the user enters his age as 16, **then** this statement will evaluate to false, and **then** Question 2 will not be displayed.\\n\\n\\nA DEL expression can have several basic parts:\\n\\n* [Request ID](https://docs.dialob.io/dialob-expressions/#what-is-request-id) or reference to a request ID (not required to be used in `Required` fields)\\n* [Logical operator](https://docs.dialob.io/dialob-expressions/basic-del-operators/)\\n* [Reserved word](https://docs.dialob.io/dialob-expressions/del-functions-reserved-words/)\\n* [Function](https://docs.dialob.io/dialob-expressions/del-functions-reserved-words/)\\n\\nIn the following expression, we can see three of these elements:\\n\\n`text1 = \\"happy\\"`  \\n\\n`text1` is the Request ID  \\n`=` is the logical operator  \\n`\\"happy\\"` is the String value we wish to validate against  \\n\\n**NOTE: \\"String\\" is a programming term which means \\"text\\". Text can be any character, including punctuation, letters, and numbers.**\\n\\n`text1` can be thought of as the subject, `=` is the verb (is / is equal to), and `\\"happy\\"` is akin to the condition.\\n\\nLet\'s look at some more examples:\\n\\n`age > 25 and favouriteColour = \\"green\\"`  \\n\\nIn this expression, we have two Request IDs: `age` and `favouriteColour`. There are two logical operators: `>` and `and`.  There are also two predicate expressions: 25 and \\"green\\".\\n\\nThis sentence can be \\"translated\\" into English as the following: \\"**If** age is greater than 25 and favourite color is green, **then**...\\"  \\n\\n### Response types and punctuation\\n\\nIn the examples above, you might have noticed that some elements were surrounded by quotation marks and others were not.  Here is the explanation:\\n\\n**No quotation marks**: If you are referencing a number, there are no quotation marks around the number.\\n\\n`numberOfCats >= 35`  \\n\\n**Quotation marks**: If you are referencing a String (text), the text has to have quotation marks around it.\\n\\n`catName = \\"Tiger\\"`\\n\\n**Referencing a particular selection from a Choice list**: If you want to reference a particular choice that a user selected from a `Choice` drop down list, the ID of the choice must be surrounded with quotation marks and the requestID of the question to which the choice list is attached must be in the beginning of the expression.\\n\\n`question1 = \\"opt1\\"` **Translation**: The selection from question1 must be opt1.\\n\\n**Referencing more than one selection from a Choice list**: If you want to specify more than one predicate (answer), you still need quotation marks around the individual answers, but all of the answers must be grouped and surrounded by parenthesis.  \\n\\n`coloursList = (\\"green\\", \\"orange\\")` **Translation**: The selection from coloursList must be green OR orange.  \\n\\nDEL expressions do not end with any punctuation like full stops or semi-colons.\\n\\nFor more examples of writing DEL expressions with different response types like `Survey`, `Multi-choice`, `Choice`, etc., [click here](https://docs.dialob.io/dialob-response-types/working-with-types/)\\n\\n### Using reserved words\\n\\nReserved words function as \\"verbs\\" in DEL expressions. They will go after the \\"subject\\" of the sentence (Request ID).  \\n\\nHere are some examples:\\n\\n`text1 is answered and text1 is valid` **Translation**: If the question whose ID is text1 has been answered **and** the answer to text1 is valid, then...  \\n\\n`survey4 not in \\"cat\\"` **Translation**: If the user does NOT select \\"cat\\" from the survey question whose ID is survey4, then...\\n\\nThe next example shows a validation rule for multiple selections from a mult-choice list:\\n\\n`carsOwned in (\\"Opel\\", \\"Renault\\", \\"Audi\\")` **Translation**: If the question whose ID is carsOwned has been answered by the user, who selected either Opel, Renault, or Audi....  \\n\\nFor a complete list of the current Dialob reserved words, [click here](https://docs.dialob.io/dialob-expressions/del-functions-reserved-words/#reserved-words)\\n\\n### Using functions\\n\\nFunctions are statements that perform actions. A DEL function is a reserved word followed by parenthesis `( )`.  The word will trigger an action, and this action will be performed on whatever is inside the parenthesis. An example function is as follows:\\n\\n`wash()`  \\n\\n**Translation:** The `( )` show that this is a function (action). However, there is nothing inside the parenthesis for our wash function to actually wash. As it is written, this function will simply wash, but becasue we haven\'t defined what it will wash, it will just wash in a generic sense.  So, let\'s add something to wash.\\n\\n`wash(laundry)`  \\n\\nNow, our function will perform the action of wash on the object of laundry.  Functions in DEL work the same way. Here are some real examples:\\n\\n`lengthOf(text1)`  **Translation**: This function will check the length of the question whose ID is text1.  \\n\\n`lengthOf(text1) > 5` **Translation**: This function will check that the length of text1 is greater than 5 characters.\\n\\nNot all functions need to have anything entered into the parenthesis. For example, the function `now()` will simply fetch the current system time.  \\n\\nFor more information and examples of DEL\'s functions, [click here](https://docs.dialob.io/dialob-expressions/del-functions-reserved-words/#existing-functions)\\n\\n"},{"build":{"created":1610128748,"modified":1612767716},"url":"./src/markdown/003_dialob_expression_language:_(DEL)/001_basic_del_operators.md","name":"003_dialob_expression_language:_(DEL)/001_basic_del_operators.md","content":"# Basic Dialob Expression Language (DEL) operators\\n\\n## Quick Summary\\n\\n* Use operators to write logic rules\\n* DEL comparison operators: `=` , `!=` , `>`, `>=` , `<` , `<=`\\n* DEL keyword-based basic logical operators: `and`, `or`, `in`, `not in`\\n\\n---\\n\\n## Overview\\n\\nOperators are symbols or words used to connect and evaluate two or more expressions to produce a result.  In Dialob, operators are used for writing the various logic rules (validation, visibility, and requirement).\\n\\nDEL utilises several types of operators, including:\\n\\n* Comparison operators\\n* Symbol-based logical operators\\n* Keyword-based logical operators\\n\\n---\\n\\n## Available operators\\n\\nBelow is a description of the basic DEL operators, which includes comparison operators, symbol-based logical operators, and keyword-based basic operators and their corresponding input types.\\n\\n### Comparison Operators\\n\\n* **=**: **Equal to** is valid with all default Response types\\n\\n* **!=**: **Not equal to** is valid with all default Response types\\n\\n* **>**, **<**: **Greater than** and **Less than** are valid with Integer, Decimal, Date and Time Response types\\n\\n* **>=**, **<=**: **Greater than or Equal to**, and **Less than or Equal to** are valid with Integer, Decimal, Date and Time Response types\\n\\n### Basic Logical Operators\\n\\n* **and**: To combine a set of comparisons for evaluation as one entity\\n\\n* **or**: To evaluate a set of comparisons as separate entities\\n\\n* **in**: Checks if a given set of unique key(s) is found in the list to which it is compared. Valid Response types are Choice and Multi-choice\\n\\n* **not in**: Checks if a given set of unique key(s) are found in the list to which it is compared. Valid Response types are Choice and Multi-choice\\n\\n\\n\\n\\n"},{"build":{"created":1612174186,"modified":1612767716},"url":"./src/markdown/003_dialob_expression_language:_(DEL)/002_advanced_del_operators.md","name":"003_dialob_expression_language:_(DEL)/002_advanced_del_operators.md","content":"# Advanced Dialob Expression Language (DEL) operators\\n\\n## Quick Summary\\n\\n* Advanced operators include the keyword phrases `is answered`, and `is valid`\\n  * These two operators produce different behaviours on the filling side\\n\\n---\\n\\n## Overview\\n\\n* **`is answered`**: Checks if a given request has a response.  Useful in cases where visibility of a particular question is based on whether a previous question has been answered on the filling side.\\n\\n* **`is valid`**: A special comparison that checks if all Required and Validation conditions are passed for a given, answered request. `is valid ` can be used in a situation, for example, to define that a particular page, group, or question will not be displayed until all Required and Validation errors have been addressed and will only be displayed **while** the validation and required conditions **are being met.**  \\n\\n---\\n\\n## How are `is valid` and `is answered` different? \\n\\nThe behaviour of these two operators can be seen in how questions are displayed on the filling side. \\n\\n* `is answered` can be used in situations where a request field is to be displayed **only when a response to a previous question is entered, regardless of whether it passes validation rules**, i.e.: _it does not matter if the previous response\'s validation rule has been met._  The question field will remain visible as long as there is some data entered in the previous response field.\\n  * Example: `vatNumber is answered and europeanCountries = \\"germany\\"` will cause a response field to appear as soon as there is some data entered into VAT number field and \\"Germany\\" has been selected from a list.  If VAT number field is deleted by the form filler or \\"Germany\\" is deselected from the list, the response field will also disappear until data is entered again in VAT field and \\"Germany\\" is selected.\\n\\n* `is valid` can be used in situations where a request field will **only** be displayed **while a previous response is currently entered _and_ that response _is currently passing_ all validation rules.** If the response is edited and no longer matches validation rules **or** that response is deleted, the response field with `is valid` in its validation/visibility will disappear. It will only appear again once validation / required rules have been met.\\n  * `vatNumber is valid and list1 = \\"estonia\\"` will cause a response field to appear **only as long as** an entered VAT number is passing validation **and** \\"Estonia\\" is currently selected from a list. If either condition is altered, the field in which this validation/visibility rule is written will disappear until the conditions are met again.\\n\\n"},{"build":{"created":1610525865,"modified":1612787964},"url":"./src/markdown/003_dialob_expression_language:_(DEL)/003_request_ids.md","name":"003_dialob_expression_language:_(DEL)/003_request_ids.md","content":"# Requests IDs and ID-naming rules\\n\\n## Quick Summary\\n\\n* A Request ID is a unique variable name that ensures each Request has a unique identifier across a Dialog session\\n* Requests consist of two parts: Request Type (string, boolean, number, etc.) and meta data (e.g. the question the user will be responding to on the filling side)\\n* DEL is used to write three types of logic rules: validation, visibility, and requirement logic rules\\n* DEL works in combination with Request IDs and logical operators/expressions\\n* There is ONLY one outcome of logic written with elements: True\\n\\n[What is a Request ID?](#what-is-request-id)  \\n[Request IDs and rules for writing them](#request-id-rules)  \\n\\n---\\n\\n## What is a Request ID? {#what-is-request-id}\\n\\nThe main variable used in DEL is a special meta variable called **Request**. A Request is the meta variable used to gather (form user) input defined as **Response**.\\n\\nA Request consists of two parts:\\n\\n* **Request type**: Defines how user input is gathered. For example, a Text type will gather responses by the user in the form of text and return a String, whereas Integer type will gather numbers and return an Integer.  In other words, the request type is the type of data that a question will return; for example, a number, a paragraph, or an address.\\n\\n* **Request meta data**: Contains a hint/rubric/question describing what it wants the form user to do. Examples of a request include prompts such as \\"What is your name?\\" Take a picture\u201d or \u201cSelect from the list\u201d.  This can be thought of as the question prompt for the user to answer. \\n\\nSee example below of a request type, request meta data, and a validation rule:\\n\\n![Response ID and meta data](expressions/request-id-example.png)\\n\\nDEL also allows the defining of variables without binding to a Request, for example, [context variables](https://docs.dialob.io/dialob-variables/), and it also permits the creation of new types of variables.\\n\\n---\\n\\n## Request IDs and rules for writing them {#request-id-rules}\\n\\nRequest IDs (unique variable names) are automatically generated by Dialob Composer to speed up the development process and to ensure that each Request has a unique ID by default. The user can change them as desired, and user-defined Request IDs uniqueness is automatically checked in near real time. Dialob Composer\u2019s built-in ID notation check is based on the following naming conventions:\\n\\n* The request ID must start with letter [a-z,A-Z]\\n* It can be followed by a number [0-9]\\n* It cannot be any reserved name (logical operators, comparison operators etc.)\\n* It must be unique. This is automatically checked by Dialob.\\n* Request IDs are case-sensitive. E.g. _firstname_ is not the same as _Firstname_.\\n* All of the changes to existing Request IDs are automatically updated by Dialob Composer. This ensures that the previously-created control logic with DEL remains correct and up-to-date.\\n\\n"},{"build":{"created":1610128748,"modified":1612787964},"url":"./src/markdown/003_dialob_expression_language:_(DEL)/004_overview-_functions_and_reserved_words.md","name":"003_dialob_expression_language:_(DEL)/004_overview-_functions_and_reserved_words.md","content":"# Overview of Dialob functions and reserved words\\n\\n## Quick Summary\\n\\n* Dialob Expression Language (DEL) comes with built-in functions and keywords to help create form logic\\n\\n---\\n\\n## Overview  \\n\\n* **DEL** comes with a set of inbuilt functions and keywords that help in the creation of dialog logic. \\n  * These functions are built via Java and Groovy and are automatically loaded into the dialog context when creating a new dialog.\\n* **DEL** function library is continuously being improved, and it is possible to extend it.\\n\\n---\\n\\n### Existing DEL functions: \\n\\n* **`today()`**: Gets the system date (where **Dialob Manager** is deployed) in ISO format \\"yyyy-mm-dd\\". Return type is *Date*.  \\n\\n* **`now()`**  Gets the system time (where **Dialob Manager** is deployed) in ISO format \\"hh:mm:ss.sss\\". Return type is *Time*.\\n\\n* **`lengthOf(*Text*)`**: Provides the length of *Text* type. White spaces before and after the response are counted. Return type is *Number*.\\n\\n* **`isLyt(*Text*)`**: Checks if a given input is a valid FI company ID. Format is nnnnnnnn-n (for example, 12345678-3). Return type is *Boolean*.\\n\\n* **`isHetu(*Text*)`**: Validates if given FIN personal ID (Hetu) is valid. The format of ID is ddmmyy-nnnl. Return type is *Boolean*.\\n\\n* **`birthDateFromHetu()`**: Calculates a birthday from FIN personal ID (Hetu). Return type is *Date*.\\n\\n* **`count(*Multi-choice type*)`**: Provides the number of selected items of **Multi-choice** type of request. Return type is *Number*.\\n\\n**NOTE**: Although the list of inbuilt functions can be extended via Java or Groovy, users should consider using service requests instead as an alternative to functions. This especially true in cases where the scope of functions is growing larger and more complex.  \\n\\n---\\n\\n### DEL reserved words summary table\\n\\nThere are three basic categories of reserved words used when writing logic expressions in DEL: **Logic-building**, **time and date**, and **language specification**.\\n\\nLanguage specification follows ISO-639-1 two-character abbreviations. [See list here](https://www.wikimass.com/html/language-code)\\n\\n| Logic-building    |      Time and Date  |  Language       |\\n|-------------------|---------------------|-----------------|\\n|  `and`            |  `day`              | `language = \'\'` |\\n| `answer`          |  `days`             |                 |\\n| `answered`        |  `hour`             |                 |\\n|  `false`          |  `hours`            |                 |\\n| `in`              |  `minute`           |                 |\\n| `is`              |  `minutes`          |                 |\\n| `lengthOf`        |  `now()`            |                 |\\n| `matches`         |  `second`           |                 |\\n| `not`             |  `seconds`          |                 |\\n| `or`              |  `today()`          |                 |\\n| `true`            |  `week`             |                 |\\n| `valid`           |  `weeks`            |                 |\\n|                   |  `year`             |                 |\\n|                   |  `years`            |                 |\\n"},{"build":{"created":1610128748,"modified":1612787964},"url":"./src/markdown/004_logic/000_logic_rules_overview.md","name":"004_logic/000_logic_rules_overview.md","content":"# Introduction to the logic rules of Dialob Expression Language (DEL) \\n\\n## Quick Summary\\n\\n\\n* Dialob has three types of logic rules:\\n  * Validation rules\\n  * Visibility rules\\n  * Requirement rules\\n* The location where you write a rule depends on what type of rule it is\\n \\n---\\n\\n## Overview\\n\\nDEL creates the logic to control the behavior of a dialog via three main control elements (rules): **Visibility**, **Validation**, and **Requirement**.  Combined with Request IDs, DEL logic rules will determine the complexity of the end-user filling experience.\\n\\nThere are three basic types of DEL rules:\\n\\n* **Visibility logic**: Defines if a given form element (unique request, group of requests or set of groups) is available in a given dialog when compared against a set of user inputs.  \\nIn other words, visibility logic can be used to decide whether to show or to hide a certain question or group of questions based on a previous answer: E.g. If a user specifies that his/her age is 15, then visibility rules can be set to hide questions about spousal income, and these will not be asked.\\n\\n* **Required logic**: Defines if a response (user interaction) is required for a given Request. The request must be visible.  \\nRequired logic can be used in situations where, for example, a question about total household income can be required to be answered if a user\'s previous answer indicates that he/she is married and both partners work.  \\n\\n* **Validation logic**: Validates that the user response (user interaction) for a given Request is valid. The request must be visible.\\nThe current state of Required and Validations is also \\"monitored\\" across all visible requests and the online rendering application (UI) is made \\"aware\\" if there are Required and / or Validation violations within a visible set of Requests.  \\n  * As a basic example, validation logic can be used to require a user to answer a question about his/her age with numbers only. If the user enters a short text or series of letters in the \\"age\\" field, the validation logic will catch this mistake and require the user to enter input in the specified correct format: Integer.  Validations are highly-customizable and can be written in a rich and complex manner.\\n  * Validation logic can also be written with Java Regular Expressions\\n\\n**NOTE: There is ONLY one outcome of logic written with elements: True. If the expressions do not evaulate to true, then Visibility, Required, Validation form control elements will do nothing and they will not exist in the form context!**\\n\\n**REMINDER**: _Rules for visibility and requirement are read-only within the question itself. They can be edited by clicking inside a question to make it active and then editing them in the field editor window located at the bottom of the screen. For more information, see_ [Basic Logic Building: Where to write rules](https://docs.dialob.io/dialob-expressions/logic-building/#where)\\n\\n---\\n\\n### Where to write rules {#where}\\n\\nThe type of rule will determine where in Composer you need to write it.\\n\\n* **Visibility Rule**: \\n  * For individual responses, the visibility rule is written directly into the response itself\\n  * For list items, the visibility rule is written at the bottom of the Lists window\\n\\n* **Requirement Rule**: This is written in the rule editor window at the bottom of the Composer screen.\\n\\n* **Validation Rule**: This is written in the rule editor window at the bottom of the Composer screen. \\n\\nTo write Requirement and Validation rules in the editor window, click on the response that you wish to edit. This will make the response the currently active item.  The rule editor at the bottom of the screen will then be populated with the Requirement and Validation rule editing fields. \\n\\nOn the actual response level, Requirement and Validation rules are read-only.\\n\\nSee example:\\n\\n![Rule editor](expressions/rule-editor.png)\\n\\n"},{"build":{"created":1610128748,"modified":1612767716},"url":"./src/markdown/004_logic/001_logic_reserved_words_examples.md","name":"004_logic/001_logic_reserved_words_examples.md","content":"# Logic and reserved words example use cases\\n\\n## Quick Summary\\n\\n* DEL keywords are a powerful and simple way to build logic rules\\n* This page will give several examples of common use cases of keywords in logic-building\\n\\n---\\n\\n## Overview: Keywords in use\\n\\n**DEL** comes with a set of inbuilt functions and keywords that help in the creation of dialog logic. These functions are built via Java and Groovy and are automatically loaded into the dialog context when creating a new dialog.\\n\\nThe following examples feature various logic-building keywords across common use cases and should provide a basic working reference. The examples feature groups of words that are commonly used together.\\n\\n* Example set 1: `answer`, `answered`, `and`, `is`, `valid`, `not`, `or`, `in`, `true`, `false`, `matches`\\n* Example set 2: `true`, `false`\\n* Example set 3: `matches`, `not matches`\\n\\n---\\n\\n## Example set 1: `answer`, `answered`, `and`, `is`, `valid`, `not`, `or`, `in`, `true`, `false`, `matches`\\n\\n`answer`: Refers to the answer of the current question. `answer` can not be used to reference the answer from a different question. \\n\\n![](expressions/answer.png)\\n\\nIn this case, `answer` is referring to the specific answer to `number1`. \\n\\n---\\n\\n`answered`: Refers to the answer of a previous question.  \\n\\n`and`: Used when joining two statements together. Both statements must evaluate to either `true` or `false`\\n\\n`is`: Used in boolean logic calculations involving `answered` and `valid`\\n\\n![](expressions/is-answered2.png)  \\n\\nAnother example:\\n\\n![](expressions/is-answered1.png)  \\n\\n---\\n\\n`valid`: Used when showing/hiding/requiring/validating a field is dependent on a previous input being valid (passes validation rules). Used in combination with `is` and `not`\\n\\n`not`: Used to negate an expression / part of an expression\\n\\n![](expressions/is-valid.png)\\n\\n`or`: Used when specifying one given statement in an expression and excluding the other(s). One of the statements must evaluate differently than the others. \\n\\n**Mini-example A: Visibility using OR**\\n\\nThis rule below specifies `text1` to be visible only if the left or the right side of the visibility rule statement, separated by `or`, returns `true`.\\n\\ntext1: `Who is your current car insurance provider?`\\n\\nVisibility rule: `age > 18 or age is not answered`\\n\\n**Mini-example B: Visibility using OR**\\n\\n![](expressions/or.png)\\n\\n---\\n`in`: Used in combination with `Choice` or `Multi-Choice` type questions.  Evaluates to `true` if the answer(s) it refers to is/are selected from a list.\\n\\n![](expressions/in.png)\\n\\n---\\n\\n## Example set 2: `true`, `false`\\n\\n`true` and `false` are used in evaluating boolean logic statements. They are preceeded by `=` or `!=` operator.\\n\\n**Mini-example A: Visibility rule**\\n\\nA following question will be displayed if the answer to isHappy is yes (true)\\n\\n_Question 1_: `Are you happy? Select \'yes\' or \'no.\'`  \\n_Answer evaluation_: `isHappy = true`\\n\\n_Question 2_: `You are happy. You may continue with the survey.`  \\n`Please explain what makes you happy.`\\n\\n**Mini-example B: Validation rule**\\n\\nA question will not pass validation if the answer is false  \\n\\n_Question 1_: `You must be 25 or older to participate. Are you 25 or older?`  \\n_Answer evaluation_: `answer != true`  \\n\\n_Question 2_: `How did you hear about this competition?`\\n\\n---\\n\\n## Example set 3: `matches`, `not matches`\\n\\n`matches`: Used when matching an input against a formula to see whether they are the same. Used in Regular Expression validations/visibility rules.\\n\\nThe following example shows a Java regex which validates that an input matches a date format (YYYY-MM-DD) and that if the month is April, June, September, or November, the input should match for between 1 and 30 days:\\n\\n![](expressions/matches.png)\\n\\n**NOTE**: Why is the validation written as `answer not matches` if we are trying to use a regex to match a pattern?  \\n\\nWhen using validations, the logic works opposite to visibility and required logic.  Validations can be thought of as \\"Answer CANNOT be\\" whereas visibility and requirement can be thought of as \\"Answer MUST be\\".\\n"},{"build":{"created":1610128748,"modified":1612767716},"url":"./src/markdown/004_logic/002_language_keywords.md","name":"004_logic/002_language_keywords.md","content":"# Language Keywords  TODO\\n\\n## Quick Summary\\n\\n* Dialob Expression Language (DEL) comes with built-in functions and keywords to help create form logic\\n\\n---\\n\\n## Overview  \\n\\nIt is possible to show and/or hide different language fields and note outputs on the filling side based on the currently active language of a filling session. For example, you may want certain inputs to appear based on the form user\'s active language: If a client is using the English version of a form, but the client\'s active language is Finnish, it is possible to set outputs to appear, in Finnish. These Finnish outputs will only appear for Finnish-language users of this form and will be invisible to everyone else.\\n\\n\\n?? TODO\\nUsing the ISO 639-1 standard, two-character language codes can be specified, which store the language that the current Dialob session is using. The `language` keyword can be used to write logic rules based on language. A list of two-character language codes [can be found here](https://www.wikimass.com/html/language-code).\\n\\n\\n---\\n\\nIn DEL, a language is designated with the keyword `language` followed by **equal to** `=` operator  or **not equal to** `!=` operator and completed with the two-character abbreviation.\\n\\nExample:\\n\\n`language = \'xx\'`\\n\\nLanguage specification is written into the visibility or required fields as an expression seen below:\\n\\n`language = \'fi\'` (Language is Finnish)  \\n`language != \'en\'` (Language is not English)\\n\\n**Example**\\n\\nA form has two languages for the filling side: Finnish and English, depending on the client/user needs. Depending on the currently-displayed language of the form, note outputs will appear in Finnish or English.\\n\\n![](logic/language-fi.png)\\n\\nOn the filling side, the note specified to appear if the form language is set to Finnish is displayed.\\n\\n![](logic/languages-visibility.png)"},{"build":{"created":1610128748,"modified":1612767716},"url":"./src/markdown/004_logic/003_time_and_date_keywords.md","name":"004_logic/003_time_and_date_keywords.md","content":"**Time and date keywords** can be used to write logic connected to the following:\\n\\n* [**Time durations**](#time) (time in hours, minutes, seconds)\\n* [**Date periods**](#date) (time in months, days, years)\\n\\n\\n**Time and date functions** can be used to return the system time and date to write logic in connection with the current time and date.\\n\\nThe `today()` function returns the system date in MM/DD/YY format.  \\nThe `now()` function returns the system time in 12-hour format (hh:mm AM/PM): For example 8:58 AM.\\n\\n#### Time and date keywords and functions overview table {#time-date}\\n\\n| Time in Years, Months, Weeks, Days    |  Time in Hours, Minutes, Seconds  |\\n|---------------------------------------|-----------------------------------|\\n| `day`                                 |  `hour`                           |\\n| `days`                                |  `hours`                          |\\n| `week`                                |  `minute`                         |\\n| `weeks`                               |  `minutes`                        |\\n| `year`                                |  `second`                         |\\n| `years`                               |  `seconds`                        |\\n| `today()`                             |  `now()`                          |\\n\\n\\n\x3c!--For example use cases, see [Working With Response Types and Structures](/content/response-types/working-with-types.md)--\x3e\\n---\\n\\n#### _Time_ type reserved words {#time}\\n\\nTime type reserved keywords work in the same way as Date type reserved words; accordingly, they can be used for the following functionalities:\\n\\n* Calculating and returning a duration of a time period between times in hours, minutes, and seconds\\n\\n* Building logic to perform mathematical operations on time such as adding time in hours or subtracting time in minutes\\n\\n* Building logic to validate that one time is earlier or later than another time\\n\\nDate type words are frequently used in combination with the `now()` function.\\n\\n**Basic operations**:  \\n\\n* [Time] **-** or **+** [Time] => [Duration]. Outcome is in the format \\"PT**hh**H**mm**M**ss**S\\" , \\"PT12H34M55S\\" where:\\n  * **P** marks that this is a period of time\\n  * **T** marks that the type of period is time\\n  * **hh** is the difference in hours\\n  * **mm** is the difference in minutes\\n  * **ss** is the difference in seconds\\n\\n* [Time] **-** or **+** [Duration] => [time]. The outcome of time format is \\"hh:mm:ss\\"\\n\\nFor example, the following will return the difference between two times, `time1` and `time2`, in Hours, Minutes, and Seconds in the PT**hh**H**mm**M**ss**S format:\\n\\n**Expression variable ID**: `{durationOfWorkday}`  \\n**Expression variable value**: `time2 - time1`  \\n**Times used for comparison**: `time1 = 08:00` and `time2 = 17:15`  \\n**Note output text**: `Your workday is {durationOfWorkday} long.`  \\n**Return**: `Your workday is PT9H15M long.`\\n\\n*In other words, this return value says that the time difference between time1 and time2 is a **Period** of **Time** of 9 **H**ours, 15 **M**inutes.*\\n\\n**Time duration** can be used also to build logic with the following notation:  \\n`8 hours + 30 minutes + 22 seconds`\\n\\nUsing **Time** type examples:\\n\\n`question1 > \\"05:00\\"`  \\nIs true if *question1* is later than \\"05:00\\" (5 am).\\n\\n`question1 + 2 hours + 30 minutes > \\"18:30\\"`  \\nIs true if *question1* is no earlier than \\"17:00\\".\\n\\n**Example 3**: Checking one time against another time, validating that one is later than the other by a certain number of hours and minutes.\\n\\n---\\n\\n#### _Date_ type reserved words {#date}\\n\\nDate type reserved keywords can be used for the following functionalities:\\n\\n* Calculating and returning a duration of a time period between dates in years, months, and/or days\\n\\n* Building logic to perform mathematical operations on dates such as adding time in months or subtracting time in days\\n\\n* Building logic to validate that one date is earlier or later than another date\\n\\nDate type words are frequently used in combination with the `today()` function.\\n\\n##### Calculating date periods\\n\\n**Basic operations**:  \\n\\n* [Date] **-** or **+** [Date] => [Period]. The period format is \\"P**y**Y**m**M**d**D\\" where:\\n\\n  * **P** marks that this type is a period of time\\n  * **y** is the difference in years  \\n  * **m** is the difference in months\\n  * **d** is the difference in days\\n\\n* [Date] **-** or **+** [Period] => [Date]. Outcome is in the format \\"yyyy-mm-dd\\".\\n\\nFor example, the following will return the difference between two dates, `date1` and `date2`, in Years, Months, and Days in the P**y**Y**m**M**d**D format:\\n\\n**Expression variable ID**: `{timeDifference}`  \\n**Expression variable value**: `date2 - date1`  \\n**Dates used for comparison**: `date1 = 05/11/2005` and `date2 = 10/24/2020`  \\n**Note output text**: `The time difference between date1 and date2 is {timeDifference}`  \\n**Return**: `The time difference between date1 and date2 is P15Y5M13D`\\n\\n*In other words, this return value says that the time difference between these two dates is a **Period** of 15 **Y**ears, 5 **M**onths, and 13 **D**ays.*\\n\\n##### Building logic to add or subtract years, months, or days\\n\\n**Date period** can also be used to build logic with the following notation:  \\n `1 years + 3 months + 14 days`\\n\\n##### Validating that one date has occured before or after another date\\n\\n`question1 > \\"2005-01-01\\" `  \\nIs true if question1 is later than the 1st of January, 2005.\\n\\n`question1 + 4 years < \\"2005-01-01\\" `  \\nIs true if *question1 + 4 years* is earlier than the 1st of January, 2005.  \\n\\nFor example, if the answer to `question1` is \\"2000-01-01\\", then this would evaluate to true, as `question1 + 4 years`  would evaluate to \\"2004-01-01\\", which is earlier than \\"2005-01-01\\".\\n\\n`question1  - \\"2005-01-01\\" > 1 year + 2 months + 10 days`  \\nIs true if *question1* is later than \\"2006-03-12\\".\\n\\n`question1  in (\\"2005-01-01\\",  \\"2006-01-01\\", 2007-01-01\\")`  \\nIs true if *question1* is one of following dates: \\"2005-01-01\\", \\"2006-01-01\\" or \\"2007-01-01\\".\\n\\n**Example 1**: Validating that, as of today\'s date, a client\'s age is at least 18 years old.\\n\\n1. Add a new date input to capture client\'s birthdate.\\n2. Create expression variable for output: `today() > date3 + 18 years`. This will trigger the validation message if the client\'s date of birth is 18 years earlier than today\'s date.\\n3. Add an output `note` and insert the expression variable along with some contextual information:\\n\\n```markdown\\nCustomer birthdate is {date3}\\n\\nCustomer must be at least 18 years old to purchase this product.\\n\\nPossibility to sell product to this customer is {isOver18}.\\n```\\n\\n4. Preview behviour on filling side\\n\\n![date expression variable](/images/date-expression-variable2.png)\\n\\n![date expression variable](/images/date-expression-variable1.png)\\n\\n**Example 2**: Validating that an entered date is both in the past and one day ago (checking for yesterday\'s date)\\n\\n1. Create two inputs of type `Date`. date1 is for today\'s date, date2 is for yesterday\'s date.\\n2. Write your validation rule and validation message in date2.\\n\\n**Validation message**: \\"Yesterday\'s date must be in the past, and it can only be one day ago!\\"  \\n**Validation rule**: `date2 <= date1 or date2 - date1 != 1 day`  \\n\\n3. Preview and test.\\n\\n![Date validation](/images/date-validation.png)\\n\\nForm preview\\n![Date validation](/images/date-validation2.png)\\n\\n---\\n"},{"build":{"created":1610128748,"modified":1612767716},"url":"./src/markdown/004_logic/004_regular_expressions.md","name":"004_logic/004_regular_expressions.md","content":"# Regular Expressions in validation and visibility logic\\n\\n## Quick Summary\\n\\n* Regex format in a logic rule is as follows:\\n  * `answer not matches \\"regex\\"`\\n  * `answer matches \\"regex\\"` \\n* Dialob supports Java Regex in any variable, validation, or visibility rule.\\n* Regex can evaluate only the structure of Strings, Numbers, Dates, etc., but they cannot ensure that this data is factually valid.\\n* Validation logic must evaluate to true in order to make validation message appear on the filling side. \\n  * Write helpful validation messages to assist users in correcting their input if it doesn\'t match the Regex-stipulated format\\n\\n[Java regular expressions and Dialob](#java-regex)  \\n[Notes before you start using Regex](#input-regex)  \\n[Important notes to remember about writing validations with regex](#important-notes)  \\n[Example use cases](#use-cases)  \\n[Validating regex against out-of-scope answers](#out-of-scope) \\n\\n---\\n\\n## Overview\\n\\n### Java regular expressions and Dialob {#java-regex}\\n\\nDialob supports the use of Java regular expressions (regex) in any variable and any validation or visibility rule. Using regex, form creators can write simple or complex rules to validate user inputs against any array of requirements so as to ensure accurate recording of entered data by the end-user on the filling side.  \\n\\n**NOTE**: It is important to remember that regular expressions can validate the *structure* of Strings, Numbers, Dates, etc., but they cannot ensure that this data is factually valid. For example, a regex can ensure that a user\'s ID number is of the correct format for a given country but it cannot check that this ID number is active or real.\\n\\nFor more information on regular expressions: [Wikipedia](https://en.wikipedia.org/wiki/Regular_expression)  \\nFor Oracle Java regular expression patterns: [Oracle Documentation](https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html)\\n\\n---\\n\\n### Notes before you start using Regex {#input-regex}\\n\\n* **Preface Regex with keywords**: In the `Validation Rule` or `Visibility` field, write the following Dialob keywords _first_ : `answer matches` or `answer not matches`. Your Regex will then come _after_ these.\\n\\n* **Ensure rule evaluates to true**: If a response field should be shown based on a previous answer, the rule must be written to evaluate to `true`. Keep in mind that validation messages will only appear on the filling side when a validation rule returns `true`. Therefore, if a form creator wishes the validation message to appear when the user enters incorrect information, validations must be written in a way so as to return true (i.e. `true` produces the validation message, `false` does not).  \\n\\n* **Remember to create a validation message**: The validation message field appears above the validation rule field. The validation message is helpful for the end user on the filling side, as it can be used to give additional information to the user to assist in completing a response accurately (if a user entered data in the wrong format, for example, the validation message can alert him/her to this).  For example, on the filling side, if a response requires that a user enter his/her VAT number, the validation message can be set to appear if the VAT number is entered in an incorrect format. The message will inform the user that the data entered is incorrect and provide a model for him/her to follow to ensure that the response fulfils the validation rule for VAT number format.  \\n\\n\\n### How to create a helpful validation message and ensure it appears when you need it\\n\\n**Question:** `Are you older than 25? Only those 25 and older may participate.`  \\n\\n**Validation Message:** `\\"Sorry, you must be 25 or older!\\"`  \\n\\n**Validation:** `answer > 25`\\n\\n_Validation message is triggered._\\n\\nIf the user enters that his age is 50, the validation will evaluate to true, and the validation message will appear, which is clearly not what we want. We want the validation message to appear only if the user\'s age is under 25, so we need to write the validation in a way that it will evaluate to `true`, given this situation.\\n\\nTo make the validation message appear if a user enters an age less than 25, we need to write the validation in this way:\\n\\n`answer < 25`  \\n\\nIn this way, if a user enters his age is 18, and because 18 is less than 25, the validation will evaluate to true, and the message will appear, alerting the user that his age is under the threshold.\\n\\n### Important notes to remember about writing validations with regex {#important-notes}\\n\\n* `answer not matches` will produce a validation which will return false when the regex matches the input. A return of false will cause the validation message **_not to appear_**.\\n\\n* `answer matches` will produce a validation which will return true when the regex matches the input. A return of true will cause the validation message to appear.  \\n\\n* `answer` refers to the user response which is only in scope of the current selected question.  \\n  * When using regex, it will be very commonplace to need to refer to an `answer` which is out of scope of the regex itself. To access and work with a different variable, simply use that variable\'s ID in place of `answer`. For example, instead of `answer not matches \\"XXX\\"`, write `text2 not matches \\"XXX\\"`.\\n* Regex must be surrounded by quotation marks \\" \\" as in this example: `answer not matches \\"xxxxxx\\"`\\n\\n---\\n\\n## How to input Regex into Composer with example use cases {#use-cases}\\n\\n* [Estonian VAT number validation](#estonian-vat)\\n\\n* [Finnish ID number validation](#id-number)\\n\\n* [Phone number validation](#phone-number)\\n\\n* [Email address validation](#email)\\n\\n---\\n\\n### Estonian VAT number validation {#estonian-vat}\\n\\n**_Example Use Case:_** A form requires that a user input an Estonian VAT number.  \\n\\nThe following regex will check that\\n\\n* The VAT number entered on the filling side is a correctly formatted Estonian VAT number, which takes the format EE123456789 (EE followed by 9 digits).\\n\\n`answer not matches \\"^(EE)?[0-9]{9}\\"`\\n\\n#### Composer side\\n\\n![Estonia VAT Validation Composer Side](logic/estonia-vat-validation.png)  \\n\\n#### Filling side\\n\\n![Estonia VAT Validation Composer Side](logic/estonia-vat-validation-filling-side.png)  \\n\\n**NOTE on writing visibility rules**: If a response field should be shown based on a previous answer, the visibility rule must be written to evaluate to `true`.  \\n\\n---\\n\\n### Finnish identification number validation {#id-number}\\n\\n**_Example Use Case_** A form requires a user to input a national identification / social security number because the user specified that he/she is a Finnish citizen.  \\n\\nThe following regex will validate  \\n\\n* The user input a properly formatted Finnish social security number\\n\\n`answer not matches \\"(\\\\d{2})(\\\\d{2})(\\\\d{2})([+-A])\\\\d{3}[0-9A-Z]\\"`  \\n\\nNext, Composer will validate that the user-entered social security number is of a valid format and match it against the user-specified citizenship (Finnish) which was selected in the previous question.\\n\\n#### Composer side  \\n\\n![Finnish social security number](logic/national-id.png)\\n\\n#### Filling side\\n\\n![Finnish social security number filling side](logic/national-id-filling-side.png) \\n\\n---  \\n\\n### Phone number validation {#phone-number}\\n\\n**Validating an international number**: The following regex will check that\\n\\n**_Example Use Case_:** A form requires that a user input an international phone number. \\n\\n* The phone number follows [E.123 standards](https://en.wikipedia.org/wiki/E.123) for international telephone number notation\\n  * The number is preceeded by a + sign to denote country code\\n  * The country code is followed by telephone number\\n  * Spaces should separate the country code, area code, and local number\\n\\n`answer not matches \\"^\\\\+(?:[0-9] ?){6,14}[0-9]\\"`\\n\\n**Validating a United States number**: The following regex will check that\\n\\n* The phone number is a valid United States format\\n* The number format matches any of these possibilities:\\n  * 1234567890\\n  * 123-456-7890\\n  * 123.456.7890\\n  * 123 456 7890\\n  * (123) 456 7890\\n\\n`answer not matches \\"^\\\\(?([0-9]{3})\\\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})\\"`\\n\\n**Validating that a country code matches a particular country**: The following regex will check that\\n\\n* The user entered a three-digit country code\\n\\n`answer not matches \\"\\\\d{3}\\"`\\n\\nNext, Composer will check that the country code provided matches the country of residence that the user previously specified. For this example, Dialob has been configured to match the country code of Estonia (372).\\n\\n#### Composer side \\n\\n![Country Code Validation](logic/country-code-validation.png)  \\n\\n#### Filling side  \\n\\n![Country Code on Filling Side](logic/country-code-filling-side.png)\\n\\n---\\n\\n### Email address validation {#email}\\n\\n**_Example Use Case:_** A form requires that a user input his/her email address, and the format of the email must be correct to ensure that it is of a valid format before attempting to send an email there.  \\n\\nThe following regex will check that  \\n\\n* The domain name includes at least one dot  \\n* The part of the domain name after the last dot consists of only letters  \\n* The domain must consist of two levels (i.e. secondLevel.com or secondLevel.thirdLevel.com)  \\n* The top-level domain must consist of two to six letters (A good example is country-specific domain names: .uk, .ee, .us)  \\n* Generic top-level domains have between three (.com) and six (.happy) letters  \\n\\n``answer not matches \\"^(?i)^[\\\\w!#%&\'*+/=?`{|}~^-]+(?:\\\\.[\\\\w!#%&\'*+/=?`{|}~^-]+)*@(?:[A-Z0-9-]+\\\\.)+[A-Z]{2,6}\\"``\\n\\n**Composer side**\\n\\n![Email validation](logic/email-validation.png)\\n\\n**Filling side**\\n\\n![Email validation](logic/email-validation-filling-side.png)\\n\\n---\\n\\n### Validating regex against out-of-scope answers {#out-of-scope}\\n\\nIt is easy to validate regex against previous inputs. Simply replace `answer` with the ID of the question you wish to validate against, then adjust your logic accordingly.  \\n\\nIn this example, we are validating that two user-input emails match.\\n\\n![Email validation](logic/email-match1.png)\\n![Email validation](logic/email-match2.png)\\n![Email validation](logic/email-match3.png)\\n"},{"build":{"created":1610445169,"modified":1612767716},"url":"./src/markdown/004_logic/005_validation.md","name":"004_logic/005_validation.md","content":"# Validation Rules\\n\\n## Quick Summary\\n\\n* Validation rules ensure that filling side data matches stipulated requirements. \\n* Validations can be thought of as \u201cAnswer CANNOT be\u201d whereas visibility and requirement can be thought of as \u201cAnswer MUST be\u201d.\\n* Validation rules should be accompanied by Validation Messages, which are short texts providing additional information to users on the filling side, either to give additional information on certain questions or to help them fix any errors that don\'t pass validation.\\n* To make a validation message appear to the user on the filling side, the DEL rule must evaluate to `TRUE`\\n\\n---\\n\\n## Overview\\n\\nValidation rules ensure that the data recorded on the filling side matches the requirements. Dialob matches the filling side data against the validation rule written on the Composer side, and if there is a discrepancy, a validation message will appear and alert the user.  \\n\\nValidation Messages are short texts providing additional information to users on the filling side, either to give additional information on certain questions or to help them fix any errors that don\'t pass validation. By default, these messages are blank in Composer. If you do not write a validation message and the user input doesn\'t pass validation for that particular question, an empty red text field will appear on the filling side because no actual text was specified or written. For that reason, it is a good idea to write clear validation messages when you write a validation rule, as these two things go hand-in-hand. \\n\\nValidation messages appear on the filling side when they are triggered by a validation rule\'s evaluation: That is, when a validation rule evaluates to TRUE, the message will appear. \\n\\nValidation rules are edited directly within the active question. They are not editable within the editor window at the bottom of the screen.\\n\\n\\nSee examples:\\n\\n**Validation rule and message on the Composer side:**\\n\\n![Validation on Composer side](logic/validation-composer-side.png)\\n\\n**Validation rule and message on the filling side with message:**\\n\\n![Validation on filling side](logic/validation-filling-side1.png)\\n\\n**Validation rule and message on the filling side without message:**\\n\\n![Validation on filling side](logic/validation-filling-side2.png)\\n\\n---\\n\\n### Evaluation of Validation rules\\n\\nTo make a validation message appear to the user on the filling side, the DEL rule must evaluate to `TRUE`.  Therefore, the logic works opposite to visibility and required logic. Validations can be thought of as \u201cAnswer CANNOT be\u201d whereas visibility and requirement can be thought of as \u201cAnswer MUST be\u201d.\\n\\n**In other words, an evaluation of `TRUE` triggers the validation message and prevents the user from continuing to the next page of the form, whereas `FALSE` will not trigger the message and will allow the user to continue filling the form.**\\n\\nSee these examples below:  \\n\\n![Personal code validation length](logic/personal-code-validation.png)\\n![Personal code validation length](logic/personal-code-validation2.png)\\n\\nFor examples of validations with Regex, see [this section](https://docs.dialob.io/introduction/regular-expressions/#input-regex)"},{"build":{"created":1612178716,"modified":1612767716},"url":"./src/markdown/004_logic/006_visibility_and_required.md","name":"004_logic/006_visibility_and_required.md","content":"# Visibility and Requirement Rules\\n\\n## Quick Summary\\n\\n* Visibility rules determine when and if a particular question is shown on the filling side.\\n* Requirement rules determine whether a question must be answered before proceeding to the next page or completing the form.\\n* Each page, group, list item, and question can have maximum of **one** visibility rule.\\n* Each page, group, list item, and question can have **multiple** requirement rules.\\n\\n---\\n\\n## Overview\\n\\n**Visibility rules** determine when and if a particular question is shown on the filling side. What determines this is usually based on the answer to a previous question.  For example, if a user selects \\"other\\" from a drop-down list, a subsequent text field can be made to appear for collecting additional information.\\n\\n**Each page, group, list item, and question can have up to one visibility rule each.**\\n\\n**Requirement rules** determine whether a question must be answered before proceeding to the next page or completing the form.  Requirement rules have a default value of `false`, which means that the question is not required to be answered.  Simply writing `true` in the Requirement field is enough to make it universally required without dependency on any other question.\\n\\n**Each page, group, and question can have multiple requirement rules.**\\n\\nVisibility and Requirement rules are written into the rule editor at the bottom of the screen or window.\\n\\nVisibility and Requirement rules cannot be edited within the question itself as these fields are \\"read-only\\" within the question: The editor window at the bottom of the Composer screen must be used.  The rule editor will display the fields of the currently active question.\\n\\n---\\n\\n### Evaluation of Visibility and Requirement rules\\n\\nWhen considering how to write visibility and requirement rules to be triggered at the appropriate times, think of their evaluation in terms of \u201cAnswer MUST be\u201d.  See these examples below:\\n\\n1. To trigger `text2` visibility, the answer to `boolean1` MUST BE true.\\n\\n![Writing visibility](logic/visibility-rule1.png)\\n\\n2. To make `text2` visible AND required, the answer to `boolean1` MUST BE true.\\n\\n![Writing visibility](logic/visibility-rule2.png)\\n\\n**To write a visibility or requirement rule for an active question, use the rule editor window at the bottom of the screen.**\\n\\n![Writing logic](logic/writing-logic1.png)\\n\\n**To write a visibility rule for a list item, use the \\"eye\\" icon next to the list item ID in the Global List modal.**\\n\\n![Writing logic](logic/list-visibility1.png)\\n\\n**To write a requirement rule for an active question, use the editor window at the bottom of the screen.**\\n\\n![Boolean and Visibility](logic/required-rule1.png)\\n\\nIn this case, text2 will only be a required field if the response to boolean1 in the previous field is `true`. "},{"build":{"created":1611921525,"modified":1612767716},"url":"./src/markdown/005_options_and_settings/000_introduction.md","name":"005_options_and_settings/000_introduction.md","content":"# Introduction to Options and Settings\\n\\n## Quick Summary\\n\\n* Dialog options allow the modification of general information.\\n* Element options provide metadata and/or style classes to individual form elements.\\n\\n---\\n\\n## Overview\\n\\nSettings provide various metadata to the form and the form elements. \\n\\n---\\n\\n### Dialog options: Form metadata\\n\\nView and modify general information such as form name, number and types of elements in the form, submit URL, form creation date and last save date, etc.\\n\\n[Jump to General Dialog Options](https://docs.dialob.io/element-options/general-options)\\n\\n### Form element options\\n\\nProvide additional metadata and/or style classes to the individual form elements: Group and Question.\\n\\n[Jump to Element Options](https://docs.dialob.io/element-options/element-options)\\n"},{"build":{"created":1611921525,"modified":1612767716},"url":"./src/markdown/005_options_and_settings/001_dialog_options.md","name":"005_options_and_settings/001_dialog_options.md","content":"# Dialog Options\\n\\n## Quick Summary\\n\\n* Access Dialog options by clicking on the \\"Options\\" button in the Composer upper menu\\n* Dialog options give you an overview of basic form data and several globally-applicable visibility and requirement options\\n\\n---\\n\\n## Overview  \\n\\nThe Dialog options give you \\n\\n* An overview of basic form data\\n* General visibility and requirement options that can be applied globally to all questions\\n\\nDialog options can be accessed by clicking the Options button on the top menu bar.\\n\\n![Accessing Dialog Options](optionsandsettings/menu-bar.png)\\n\\n---\\n\\n#### Options tab\\n\\n![General Dialog Options](optionsandsettings/dialog-options1.png)\\n\\n##### Dialog name\\n\\nA String representing your form\'s name, not technical ID. This can be changed at any time.\\n\\n##### Labels\\n\\nFor grouping and filtering purposes, you can create arbitrary labels for your forms.  This can be used to filter by label when you request a list of forms or to identify which forms belong to which application if you have several applications using the same Dialob backend.\\n\\n##### Default submit URL\\n\\nThis is where completed session data is POST-ed in JSON format.\\n\\n##### Question visibility during filling\\n\\nThis drop-down gives you multiple global options to apply to your questions.\\n\\n* **Show only active questions:** Only information about active elements is sent to filling side (default). For example, elements with visibility rules dependent on previous elements will not appear, as they are not active until their dependent questions are answered.\\n\\n* **Show inactive pages:** Information about inactive pages is sent to filling side, which is useful for navigation features.  \\n\\n* **Show all questions:** Information about all elements is sent to filling side, which is useful for debugging reasons.\\n\\n* **All answers required by default:**  Sets a global \\"required\\" rule across all questions. A Dialog cannot be completed until all questions have been answered. To make an exception to this rule for individual questions, write a requirement rule that returns `false` for each excepted question.\\n\\n---\\n\\n#### Information Tab\\n\\n![General Dialog Options](optionsandsettings/dialog-options3.png)\\n\\nThis tab gives you the following information:\\n\\n* **ID:** The session ID\\n* **Technical name:** The unique ID of this form. It is automatically set upon creating a new form, and it cannot be changed.\\n* **Created:** The date/time of when this form was created.\\n* **Last saved:** The date/time of the last save. The save action takes place upon **every change**, even if it is not immediately reflected in this field.\\n* **Stats:** General information about the elements in the form.\\n  * **Items:** The sum of active and inactive questions in this form.\\n  * **Lists:** The total number of lists in this form, whether or not they have been applied to questions.\\n  * **Variables:** The sum of active and inactive context and expression variables in this form.\\n"},{"build":{"created":1611921525,"modified":1612767716},"url":"./src/markdown/005_options_and_settings/002_element_styling_options.md","name":"005_options_and_settings/002_element_styling_options.md","content":"# Element Styling Options\\n\\n## Quick Summary\\n\\n* Note outputs and description fields (group description / question level help text) can be styled with Markdown\\n* Use the eye icon to toggle between the editor and preview when editing with Markdown\\n* The description field can be used at the group level or at the question level\\n* **Only CSS classes that have already been specified and predefined by your organisation are available for use.**\\n\\n[Styling with Markdown](#markdown)  \\n[Description](#description)  \\n[Style classes](#style-classes)  \\n[Properties](#properties)  \\n\\n---\\n\\n## Overview\\n\\nDialob is set up to give you a range of out-of-the-box customisation options for specifying the look and feel of the filling side; for example, creating custom layouts, customising colors, fonts, input buttons, and much more.  These features are accessed via the `Options` menu on the element level. \\n\\nAccess `Options` via the hamburger icon at the top right of the element.  \\n\\n![Accessing Element Options Modal](optionsandsettings/options-menu1.png)\\n\\nThe `Options` window contains three basic items: **Description, Style Classes,** and **Properties.**\\n\\n---\\n\\n### Styling with Markdown {#markdown}\\n\\nThe following outputs can be styled using simple Markdown: \\n\\n* Note output\\n* Description field\\n  * Group description\\n  * Question level additional information/help text\\n\\n[See Markdown reference](https://www.markdownguide.org/)\\n\\nWhile editing Markdown, you can\\n\\n* Toggle between the editor and the preview by clicking on the eye and code icon.\\n* View Markdown syntax guide by clicking on the question mark icon.\\n\\n![Markdown window](optionsandsettings/markdown.png)\\n\\nSome examples of the differences between unstyled and styled fields are below.\\n\\n**This is an unstyled Group Description and question-level additional information.**\\n\\n![Markdown before](optionsandsettings/markdown-before.png)\\n\\n**This is the same Group Description and question-level additional information styled with Markdown.**\\n\\n![Markdown after](optionsandsettings/markdown-after.png)\\n\\n\\n---\\n\\n### Description {#description}\\n\\nThe Description field can be used on the Group level or on the Question level.\\n\\n* **Group level**:\\n  * **Create a group description**: Give additional information about a group which will appear under the Group Label on the filling side. To access the Description on the Group Level to apply a Group Description, click on the Group\'s Hamburger icon.\\n* **Question level**:\\n  * **Create question-level \\"help text\\"**: Give additional information to assist users on the filling side or communicate extra information about specific questions. To access the Description on the Question Level to apply a Question-level additional information text, click on the question\'s Hamburger icon.\\n\\nLike `Note` output type, both Group Description and Additional Information can be styled with [Markdown](https://www.markdownguide.org/). \\n\\n![Accessing Element Options Modal](optionsandsettings/options-menu2.png)\\n\\nThe form below has a Group Level Description and Question-level additional information text/styling applied.\\n\\n![Styling headings and descriptions](optionsandsettings/properties1.png)\\n\\n**NOTE**: Keep in mind that the Group Label is written directly into the Group Label field itself, not via the Options modal.\\n\\n---\\n\\n### Style classes {#style-classes}\\n\\nThis feature allows you to _apply_ existing CSS classes to elements.\\n\\n![Styling classes tab](optionsandsettings/style-classes-tab.png)\\n\\n**Only CSS classes that have already been specified and predefined by your organisation are available via this modal.**\\n\\nTo apply preexisting styles, refer to your organisation\'s documentation to enter a defined CSS class name, and if it already exists in the system, it will be applied. However, if it hasn\'t already been defined, no changes will appear on the filling side.\\n\\n**NOTE**: New CSS classes cannot be created with this feature.\\n\\n---\\n\\n### Properties {#properties}\\n\\nThis feature makes it possible to communicate specific data to the fill API.  Client-specific configurations can strictly define properties, including which elements can have which properties. For example, a Group element may have a `columns` property with a value that defaults to 1.  \\n\\n![Properties Column](optionsandsettings/properties-column1.png)\\n\\nAnother example is a `display` property with the value of Dropdown and a `notscored` property with the value of a switch.\\n\\n![Properties Dropdown](optionsandsettings/properties-dd.png)\\n\\nThe Properties feature works in combination with your specific configuration to allow customisation in a controlled manner.\\n"},{"build":{"created":1610445169,"modified":1612767716},"url":"./src/markdown/006_reference/000_new_form_walkthrough.md","name":"006_reference/000_new_form_walkthrough.md","content":"# New form walkthrough \\n\\nWelcome to Dialob! In this guide, you will use Dialob Composer and learn how to create a simple dialog using structures, inputs, and response types. You will create a basic input validation, learn how to show/hide fields, and write a requirement rule for a question, all using Composer\'s built-in features and Dialob Expression Language, **DEL**.\\n\\nAfter completing this new user guide, you will be familiar with Dialob\'s basic features and have a better idea how to organise your workflows while using the platform. Note that this basic guide does not include advanced features such as custom variables and complex validations, visibility, or requirement rules.\\n\\nLet\'s get started in making our first dialog.  Below is a screenshot of the end-result we are going to build: A simple questionnaire to collect user personal data on foods and restaurant opinions.\\n\\n![Complete form](/reference/complete-form.png)\\n\\nTo make this example, we will follow these steps:\\n\\n1. [Create a new form](#new-form)\\n\\n2. [Create a new page](#new-page)\\n\\n3. [Create a new group](#new-group)\\n\\n4. [Create a response (form question)](#response)\\n\\n5. [Create list and apply it to a group / question](#list)\\n\\n6. [Create a survey input](#survey)\\n\\n7. [Write simple validation, visibility, and requirement rules](#rules)\\n\\n8. [Preview your form](#preview)\\n\\n---\\n\\n### Step 1: Create a new form {#new-form}\\n\\nAll dialogs (forms) are built using Dialob Composer, the user interface that you see on the front-end side, and these dialogs are processed by Dialob Manager, which is the engine running in the background, processing all of your changes in near real-time. There is no need for a \\"save\\" button anywhere, as each change you make is automatically processed by Manager.\\n\\nLet\'s begin our work with Composer by creating a new form.\\n\\n![Create new form](/reference/create-new-form.png)\\n\\n---\\n\\n### Step 2: Create a new page {#new-page}\\n\\nPages form the base containers for all inputs in Dialob. Pages contains groups. Groups contain questions. To get started, click the `add` icon to create your first page.\\n\\n![Create page](/reference/new-form-empty.png)\\n\\n---\\n\\n### Step 3: Create a group {#new-group}\\n\\nNow that you have a page, you can create a group inside of it. Click the `Add item` button to add a \\"standard\\" group. The other forms of group -- _Survey group, Survey Group (Vertical), Multirow group_ -- will be discussed later.\\n\\n![Create group](/reference/page-add-group.png)\\n\\n---\\n\\n### Step 4: Create a response (form question) {#response}\\n\\nNow that you have a group, you can give the group a _label_. The label is the name or title of the group which will appear on the filling side above all the questions contained within that group. The group label can be left empty if you don\'t want to have any visible text as a group label. In our case, we want this group to have a visible label, called \\"Personal Data\\", since that is the nature of the question we will be asking the user.  \\n\\nNext, let\'s create our first response (question). Click the `Add item` button in the bottom left corner of the Group window. Add a question of type Text.\\n\\n![Create response](/reference/create-new-response.png)\\n\\nYou can see below that the tree view on the left side of the screen is automatically updated with groups and questions as you go. Our group label (title) has been updated with the name we have given it. `text1` is the default ID of the question we have just created and will be updated if we choose to rename this ID later on.  \\n\\n![Create response](/reference/create-new-text-input.png)\\n\\nNow, let\'s create our first question. Since this group is intended to collect personal data, it is logical that our first question should be a Text input to collect a user\'s full legal name.  In the `Text field label`, write your question: \\"Please enter your full legal name\\".\\n\\n![Create response full legal name](/reference/full-legal-name.png)\\n\\nFor now, do not worry about filling in `Visibility`, `Required`, `Default Value`, or `Validation Rules`--they can be left empty.  \\n\\nLet\'s preview this on the filling side. Click the `Preview` button in the top right of the Composer screen.  Note how the Group Label (title) is displayed above the question.\\n\\n![Full legal name filling side](/reference/full-legal-name-filling-side.png)\\n\\nNow, we have a text response field to collect someone\'s full legal name, but it would make more sense to collect each name individually, so as to create a clear differentiation between a first, middle, and last name. We will create a `Multi-Row` response type to collect these names individually.  \\n\\n`Multi-Row` response types need to be created in a separate, `Multi-Row` group, which we will create now.\\n\\n![Multi-row group](/reference/multi-row-group.png)\\n\\n`Multi-Row` creates inline fields, and the number of inputs you add to the group will determine the number of input fields. For this demonstration, we will create three text fields for the collection of a user\'s first, middle, and last name.\\n\\nBe sure to add a group label here, as the group label will serve as the question prompt to tell the user what to do.  In this case, our group label will be the following: \\"Please enter your full legal name\\".\\n\\n![Multi-row group](/reference/multi-row-group-add-text.png)\\n\\nNow, you should have something that looks like this:\\n\\n![Multi-row group](/reference/multi-row-group-three-inputs.png)\\n\\nOn the filling side, the user will see this:\\n\\n![Multi-row group](/reference/multi-row-group-three-inputs-filling.png)\\n\\nSince we now have a `Multi-Row` group to collect a user\'s legal name, we do not need our first text input anymore, so it can be deleted. To delete, click on the hamburger icon in the top right corner of the desired question. In the picture below, we are deleting the entire group, since it holds only the one question that we don\'t want anyway. Groups and questions can be deleted from the hamburger icon. However, **keep in mind that there is no undo button!  Once a group or question has been deleted, the only way to get it back is to recreate it!**\\n\\n![Delete question](/reference/delete-question.png)\\n\\nOur dialog now has one question. Next, we will add our second, third, and fourth questions: A single-choice dropdown, a multiple-choice dropdown, and a survey question, respectively.\\n\\n---\\n\\n### Step 5: Create a list and apply it to a group / question {#list}\\n\\nA single `Choice` input gives the user the option of selecting only **one** option from a list, whereas the `Multi-choice` input allows the user to select **one or more than one** input. \\n\\n_Note: For more advanced use cases, if you want to specify that the user must select a certain number of inputs from a `Multi-choice` question, this can be determined by writing a validation rule which includes your specification._\\n\\n`Choice` and `Multi-choice` can be created within a \\"standard\\" group.\\n\\nLet\'s create a group to house our two new questions:  `Add-item` --\x3e `Structure` --\x3e `Group`\\n\\nBe sure to select the `Add-item` button which is **outside** of any existing group. If you select the `Add-item` button within a group, you will create a nested group within that group, which, in this case, is not needed.\\n\\n![Add new group](/reference/add-new-group.png)\\n\\nGive the group a label of \\"Favourite Foods\\".\\n\\n![Add new choice type](/reference/new-group-choice.png)\\n\\nNotice that, within the group, the `Choice` input type will produce a `List` ID. This is telling us that, to create the drop-down menu for the user to select from, we need to create a list.\\n\\nTo create a list, go to the upper menu bar and select `Lists`.\\n\\n![Add new choice type](/reference/choice-make-list.png)\\n\\nSelect \\"Add new list\\".\\n\\n![Add new global list](/reference/new-global-list.png)\\n\\nIn this example, we are creating a Global List. Global Lists can be applied to any number of questions across the dialog.  Any changes made to a global list will be reflected across all questions which use that list.  This is a good thing to use if you wish to reuse the same list over and over.\\n\\n![Anatomy of a list](/reference/anatomy-of-list.png)\\n\\nTo add a new list item, click the `add` button (plus sign) and enter a key and text.  **NOTE**: When creating lists, the key (ID) is not auto-generated, and it must be set manually by the form creator. Any changes to the ID will be auto-updated globally, however.\\n\\nLet\'s fill in the name and options in our list of Favourite Foods. You should see something similar to the following:\\n\\n![Anatomy of a list](/reference/anatomy-of-list2.png)\\n\\nNow that we have a list, we need to apply it to our `Choice` question and give our `Choice` question some text to prompt the user on the filling side.  Click the hamburger icon in the top right corner of the question and select `Options`.\\n\\n![Add a list to choice](/reference/choice-attach-list.png)\\n\\nNow, select the global list you just created.  If you had wanted to create a one-time list which is bound to this question in specific, you could create a local list here.\\n\\n![Add a list to choice](/reference/select-global-list.png)\\n\\nLet\'s preview this on the filling side:\\n\\n![Choice list filling side](/reference/choice-list-filling.png)\\n\\nNow that we have seen how to create a global list, next, we will create a `Multi-choice` input type and connect it with a local list, which follows basically the same process.\\n\\n![Add multi-choice](/reference/add-multi-choice.png)\\n\\nCreate a local list. For this case, we will create a \\"Food Preferences\\" list.\\n\\n![Add multi-choice2](/reference/add-multi-choice2.png)\\n\\nCreate the local list of food preferences. Remember that this list is bound to this specific question only and cannot be reused in a different question.\\n\\nYour food preferences list should look something like this:\\n\\n![Local list of food preferences](/reference/food-preferences-local-list.png)\\n\\nLet\'s preview the filling side now.\\n\\n![Local list of food preferences](/reference/preview-filling-2lists.png)\\n\\n---\\n\\n### Step 6: Create a Survey input {#survey}\\n\\nLike `Multi-Row` input types, questions involving survey buttons require being placed in their own specific group: `Survey Group` or `Survey Group Vertical`.  In this section, we will create our fourth question: An opinion survey on restaurants.\\n\\nThe first thing you need to do is create a `Survey Group`.  \\n\\n`Add item` --\x3e `Structure` --\x3e `Survey Group`. This will create a single group with as many survey options as needed. The Group Label will be the singular prompt for the user, unifying all of the survey options under one question text.\\n\\n![Create survey group](/reference/create-survey-group.png)\\n\\nNext, add the categories for the survey options by selecting `Survey item`.\\n\\n![Create survey group](/reference/create-survey-group2.png)\\n\\nNote that the number of inputs directly corresponds to the number of survey categories the user will be able to choose from.\\n\\n![Create survey group inputs](/reference/create-survey-group3.png)\\n\\nNow that we have the categories, it is time to add the survey buttons themselves. This is done by creating a list. For this question, we will create a local list.  Select the hamburger icon in the top right corner of the group, then select `Options` and `Create local list`.\\n\\n![Create survey group inputs](/reference/survey-group-list.png)\\n\\nThis is what we see on the filling side preview:\\n\\n![Survey group on filling side](/reference/survey-group-filling-side.png)\\n\\n---\\n\\n### Step 7: Write simple validation, visibility, and requirement rules {#rules}\\n\\nTo create a more dynamic and appropriate user experience, the dialog should be crafted in such a way that it responds to user inputs efficiently and logically. For example, it would not make sense to ask a user about a favourite restaurant if he/she had previously specified that he/she doesn\'t eat at restaurants. Likewise, if a question asks the user for an email address, and the email address is to be used in the future for sending follow-up emails, it would be reasonable to expect that this field is required to be filled and that the input conforms to valid email address specifications. Validation, visibility, and requirement rules allow you to accomplish these things with ease.  These rules are written in Dialob Expression Language (DEL), a \\"programming\\" language so simple that even those who have never touched programming can use it.  It resembles a combination of algebra and the most basic of English grammatical structures.\\n\\nBefore we begin writing rules, however, it is important to understand that there is are two ways/places to write rules: In the \\"Rule Editor\\" and  in the \\"In-line editor\\".\\n\\n**_Visibility_ and _Requirement_ rules are read-only within the question. These are edited with the Rule Editor at the bottom of the screen.  You cannot edit them simply by moving your mouse curser to their empty fields and starting to type. To edit them, first you need to click the question itself to make it active, and then look at the bottom part of your screen: You will see the Visibility and Requirement rule editor there and it will be populated with the empty visibility and requirement fields.  After writing your rules, you can look up to see that they have appeared in the question\'s read-only fields.**\\n\\n**Validation messages, validation rules, and Default Value are editable directly within the question. To edit these, simply click the question and put your curser inside the field. Then, you can type your rules directly into the question.  These rules will not show up in the rule editor at the bottom of the screen.**\\n\\nBelow is an example of the rule editor when empty. Nothing appears.\\n\\n![Inactive rule editor](/reference/inactive-rule-editor.png)\\n\\nBelow is an example of the rule editor when a question is active. You can tell that a question is active if it has a blue highlight above the question text field.  When the question is active, the rule editor appears with the visibility and requirement fields ready for editing.\\n\\n![Active rule editor](/reference/active-rule-editor.png)\\n\\n**Now that we know where to write and edit rules, from this point forward, please remember that rules demonstrated in the screenshots are created in the manner specified above.**\\n\\nLet\'s begin by adding a simple requirement rule to our first `Multi-Row` input. \\n\\nThis is achieved simply by writing `true` in the `Required` field, which you find in the question editor at the bottom of the screen.  If a question has `Required` set to `true`, the dialog session cannot be completed until the question is answered (Complete button will be greyed out).\\n\\nNote that all questions default to `false`, which means that, unless otherwise specified, there is no requirement that questions be answered before completion of the dialog is permitted.\\n\\n![Adding requirement rule](/reference/adding-requirement-rule.png)\\n\\n\\nNext, after collecting the user\'s name, it might be nice to collect additional information if the user selects \\"other\\" from the favourite food `Choice` drop-down list. However, we did not add the option to select \\"other\\" before when we created the original global list. We will edit the global list to add that option, and then we will make a text box response field and set it to be visible if the user selects \\"other\\".\\n\\nFirst, go up to the top menu bar and select `Lists`. Then, select your global list, `Favourite Foods`.  Adding another option is as simple as clicking the `Add` icon and setting your key-value pair.\\n\\n![Edit Global List](/reference/edit-global-list.png)\\n\\nReturn to `group1`: Favourite Foods. Click the `Add item` button within the group to add a new input. Select the `Text Box` input type.  The text box question editor will appear at the bottom of the group. If you wish to reorder it and place it after the first `Choice` question, drag it into place from the tree view on the left.\\n\\n![Adding a text box](/reference/add-move-text-box.png)\\n\\nAt this point, we will begin writing a visibility rule. We want to show `textBox1` **only if** a user selects \\"other\\" from the drop-down list in the preceeding question.  Using DEL, we will write the following into the `Visibility Rule` field:\\n\\n`list1 = \\"other\\"`\\n\\nBreaking it down, this rule is saying that, if the value \\"other\\" from the global list is selected in the question whose ID is `list1`, the expression will be `true`, and if this expression is `true`, `textBox1` is shown.  We can also make this a `Required` field.\\n\\n![Text Box Visibility](/reference/text-box-visibility.png)\\n\\nOn the filling side, we see this:\\n\\n![Text Box Visibility filling side](/reference/text-box-visibility-filling.png)\\n\\nIt would be nice if our `textBox1` required the user to submit an input of a certain length so as to ensure a more detailed response. We can write a validation rule to specify the minimum / maximum length of a response.  We will also want to write a validation message, which will appear on the filling side if the user enters data that we don\'t want to accept, which is specified by our validation rule. The validation message will alert the user that the input is not valid and prompt him/her to re-enter it correctly.\\n\\nValidations work in this way: Dialob will evaluate the user\'s inputs against the rules you write, and if your validation rule evaluates to `true`, the validation message will be displayed. The message will continue to be displayed until the rule evaluates to `false`. Please keep this in mind when writing validation rules.\\n\\n**Remember that validation rules and messages are edited in-line, in the question itself.**\\n\\nUsing the `lengthOf( )` function, we tell Dialob to check that the input of the item in parenthesis (in this case, `textBox1`) is less than 25 characters. If the user provides an input of fewer than 25 characters, the validation will evaluate to `true` and the validation message will be shown, prompting the user to continue entering characters, until the user enters more than 25 characters. At that time, the validation will evaluate to `false` and the message will stop being displayed. The form will also be completable, as a form cannot be completed with any outstanding invalid inputs.\\n\\n![Text Box validation writing](/reference/text-box-validation-writing.png)\\n\\nOn the filling side:\\n\\n![Text Box with validation on filling side](/reference/text-box-filling-side.png)\\n\\n---\\n\\n### Step 8: Preview your Dialog {#preview}\\n\\nCongratulations! You have now gone through the basic steps in creating a dialog using Dialob Composer. Preview your form to see your end product!\\n\\nThis guide has been a simple beginning to help you become aware of Dialob\'s features and how the platform works in the dialog creation process. Of course, there are many more functionalities to explore and advanced options available to leverage the power of Dialob in the creation of highly complex, flexible dialogs. Please see the other sections of the documentation for an additional, more in-depth look.\\n"}]}'),i=void 0}if(i)a=i,console.log("compiled site");else{console.log("uncompiled site");var m=t(280);a={files:m.keys().map((function(e){return{url:m(e).default,name:e}}))}}var g=Object(p.jsx)("img",{src:c,style:{height:45,width:200},alt:"logo"});s.a.render(Object(p.jsx)(l.a,{theme:d,md:a,brand:{logo:g}}),document.getElementById("root")),h()}},[[325,1,2]]]);
//# sourceMappingURL=main.f9fcaeeb.chunk.js.map